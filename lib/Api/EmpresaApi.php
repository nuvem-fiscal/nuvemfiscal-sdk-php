<?php
/**
 * EmpresaApi
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NuvemFiscal\ApiException;
use NuvemFiscal\Configuration;
use NuvemFiscal\HeaderSelector;
use NuvemFiscal\ObjectSerializer;

/**
 * EmpresaApi Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmpresaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'alterarConfigCte' => [
            'application/json',
        ],
        'alterarConfigMdfe' => [
            'application/json',
        ],
        'alterarConfigNfce' => [
            'application/json',
        ],
        'alterarConfigNfe' => [
            'application/json',
        ],
        'alterarConfigNfse' => [
            'application/json',
        ],
        'atualizarEmpresa' => [
            'application/json',
        ],
        'baixarLogotipoEmpresa' => [
            'application/json',
        ],
        'cadastrarCertificadoEmpresa' => [
            'application/json',
        ],
        'consultarCertificadoEmpresa' => [
            'application/json',
        ],
        'consultarConfigCte' => [
            'application/json',
        ],
        'consultarConfigMdfe' => [
            'application/json',
        ],
        'consultarConfigNfce' => [
            'application/json',
        ],
        'consultarConfigNfe' => [
            'application/json',
        ],
        'consultarConfigNfse' => [
            'application/json',
        ],
        'consultarEmpresa' => [
            'application/json',
        ],
        'criarEmpresa' => [
            'application/json',
        ],
        'enviarCertificadoEmpresa' => [
            'multipart/form-data',
        ],
        'enviarLogotipoEmpresa' => [
            'multipart/form-data',
        ],
        'excluirCertificadoEmpresa' => [
            'application/json',
        ],
        'excluirEmpresa' => [
            'application/json',
        ],
        'excluirLogotipoEmpresa' => [
            'application/json',
        ],
        'listarEmpresas' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation alterarConfigCte
     *
     * Alterar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigCte $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigCte
     */
    public function alterarConfigCte($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigCte'][0])
    {
        list($response) = $this->alterarConfigCteWithHttpInfo($cpf_cnpj, $body, $contentType);
        return $response;
    }

    /**
     * Operation alterarConfigCteWithHttpInfo
     *
     * Alterar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigCte $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigCte, HTTP status code, HTTP response headers (array of strings)
     */
    public function alterarConfigCteWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigCte'][0])
    {
        $request = $this->alterarConfigCteRequest($cpf_cnpj, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigCte' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigCte' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigCte', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigCte';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigCte',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alterarConfigCteAsync
     *
     * Alterar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigCte $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigCteAsync($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigCte'][0])
    {
        return $this->alterarConfigCteAsyncWithHttpInfo($cpf_cnpj, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alterarConfigCteAsyncWithHttpInfo
     *
     * Alterar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigCte $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigCteAsyncWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigCte';
        $request = $this->alterarConfigCteRequest($cpf_cnpj, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alterarConfigCte'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigCte $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alterarConfigCteRequest($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigCte'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling alterarConfigCte'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling alterarConfigCte'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/cte';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alterarConfigMdfe
     *
     * Alterar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigMdfe $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigMdfe
     */
    public function alterarConfigMdfe($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigMdfe'][0])
    {
        list($response) = $this->alterarConfigMdfeWithHttpInfo($cpf_cnpj, $body, $contentType);
        return $response;
    }

    /**
     * Operation alterarConfigMdfeWithHttpInfo
     *
     * Alterar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigMdfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigMdfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function alterarConfigMdfeWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigMdfe'][0])
    {
        $request = $this->alterarConfigMdfeRequest($cpf_cnpj, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigMdfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigMdfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigMdfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigMdfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigMdfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alterarConfigMdfeAsync
     *
     * Alterar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigMdfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigMdfeAsync($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigMdfe'][0])
    {
        return $this->alterarConfigMdfeAsyncWithHttpInfo($cpf_cnpj, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alterarConfigMdfeAsyncWithHttpInfo
     *
     * Alterar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigMdfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigMdfeAsyncWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigMdfe';
        $request = $this->alterarConfigMdfeRequest($cpf_cnpj, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alterarConfigMdfe'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigMdfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alterarConfigMdfeRequest($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigMdfe'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling alterarConfigMdfe'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling alterarConfigMdfe'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/mdfe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alterarConfigNfce
     *
     * Alterar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfce $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfce'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigNfce
     */
    public function alterarConfigNfce($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfce'][0])
    {
        list($response) = $this->alterarConfigNfceWithHttpInfo($cpf_cnpj, $body, $contentType);
        return $response;
    }

    /**
     * Operation alterarConfigNfceWithHttpInfo
     *
     * Alterar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfce $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfce'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigNfce, HTTP status code, HTTP response headers (array of strings)
     */
    public function alterarConfigNfceWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfce'][0])
    {
        $request = $this->alterarConfigNfceRequest($cpf_cnpj, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigNfce' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigNfce' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigNfce', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigNfce';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigNfce',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alterarConfigNfceAsync
     *
     * Alterar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfce $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigNfceAsync($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfce'][0])
    {
        return $this->alterarConfigNfceAsyncWithHttpInfo($cpf_cnpj, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alterarConfigNfceAsyncWithHttpInfo
     *
     * Alterar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfce $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigNfceAsyncWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfce'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigNfce';
        $request = $this->alterarConfigNfceRequest($cpf_cnpj, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alterarConfigNfce'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfce $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alterarConfigNfceRequest($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfce'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling alterarConfigNfce'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling alterarConfigNfce'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/nfce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alterarConfigNfe
     *
     * Alterar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfe $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigNfe
     */
    public function alterarConfigNfe($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfe'][0])
    {
        list($response) = $this->alterarConfigNfeWithHttpInfo($cpf_cnpj, $body, $contentType);
        return $response;
    }

    /**
     * Operation alterarConfigNfeWithHttpInfo
     *
     * Alterar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigNfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function alterarConfigNfeWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfe'][0])
    {
        $request = $this->alterarConfigNfeRequest($cpf_cnpj, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigNfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigNfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigNfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigNfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigNfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alterarConfigNfeAsync
     *
     * Alterar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigNfeAsync($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfe'][0])
    {
        return $this->alterarConfigNfeAsyncWithHttpInfo($cpf_cnpj, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alterarConfigNfeAsyncWithHttpInfo
     *
     * Alterar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigNfeAsyncWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigNfe';
        $request = $this->alterarConfigNfeRequest($cpf_cnpj, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alterarConfigNfe'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alterarConfigNfeRequest($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfe'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling alterarConfigNfe'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling alterarConfigNfe'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/nfe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alterarConfigNfse
     *
     * Alterar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfse $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfse'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigNfse
     */
    public function alterarConfigNfse($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfse'][0])
    {
        list($response) = $this->alterarConfigNfseWithHttpInfo($cpf_cnpj, $body, $contentType);
        return $response;
    }

    /**
     * Operation alterarConfigNfseWithHttpInfo
     *
     * Alterar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfse $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfse'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigNfse, HTTP status code, HTTP response headers (array of strings)
     */
    public function alterarConfigNfseWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfse'][0])
    {
        $request = $this->alterarConfigNfseRequest($cpf_cnpj, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigNfse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigNfse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigNfse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigNfse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigNfse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alterarConfigNfseAsync
     *
     * Alterar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfse $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigNfseAsync($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfse'][0])
    {
        return $this->alterarConfigNfseAsyncWithHttpInfo($cpf_cnpj, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alterarConfigNfseAsyncWithHttpInfo
     *
     * Alterar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfse $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alterarConfigNfseAsyncWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfse'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigNfse';
        $request = $this->alterarConfigNfseRequest($cpf_cnpj, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alterarConfigNfse'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaConfigNfse $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alterarConfigNfse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alterarConfigNfseRequest($cpf_cnpj, $body, string $contentType = self::contentTypes['alterarConfigNfse'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling alterarConfigNfse'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling alterarConfigNfse'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/nfse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation atualizarEmpresa
     *
     * Alterar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\Empresa $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['atualizarEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\Empresa
     */
    public function atualizarEmpresa($cpf_cnpj, $body, string $contentType = self::contentTypes['atualizarEmpresa'][0])
    {
        list($response) = $this->atualizarEmpresaWithHttpInfo($cpf_cnpj, $body, $contentType);
        return $response;
    }

    /**
     * Operation atualizarEmpresaWithHttpInfo
     *
     * Alterar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['atualizarEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\Empresa, HTTP status code, HTTP response headers (array of strings)
     */
    public function atualizarEmpresaWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['atualizarEmpresa'][0])
    {
        $request = $this->atualizarEmpresaRequest($cpf_cnpj, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\Empresa' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\Empresa' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\Empresa', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\Empresa';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\Empresa',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation atualizarEmpresaAsync
     *
     * Alterar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['atualizarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function atualizarEmpresaAsync($cpf_cnpj, $body, string $contentType = self::contentTypes['atualizarEmpresa'][0])
    {
        return $this->atualizarEmpresaAsyncWithHttpInfo($cpf_cnpj, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation atualizarEmpresaAsyncWithHttpInfo
     *
     * Alterar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['atualizarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function atualizarEmpresaAsyncWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['atualizarEmpresa'][0])
    {
        $returnType = '\NuvemFiscal\Model\Empresa';
        $request = $this->atualizarEmpresaRequest($cpf_cnpj, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'atualizarEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['atualizarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function atualizarEmpresaRequest($cpf_cnpj, $body, string $contentType = self::contentTypes['atualizarEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling atualizarEmpresa'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling atualizarEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarLogotipoEmpresa
     *
     * Baixar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarLogotipoEmpresa($cpf_cnpj, string $contentType = self::contentTypes['baixarLogotipoEmpresa'][0])
    {
        list($response) = $this->baixarLogotipoEmpresaWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation baixarLogotipoEmpresaWithHttpInfo
     *
     * Baixar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarLogotipoEmpresaWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['baixarLogotipoEmpresa'][0])
    {
        $request = $this->baixarLogotipoEmpresaRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarLogotipoEmpresaAsync
     *
     * Baixar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarLogotipoEmpresaAsync($cpf_cnpj, string $contentType = self::contentTypes['baixarLogotipoEmpresa'][0])
    {
        return $this->baixarLogotipoEmpresaAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarLogotipoEmpresaAsyncWithHttpInfo
     *
     * Baixar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarLogotipoEmpresaAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['baixarLogotipoEmpresa'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarLogotipoEmpresaRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarLogotipoEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarLogotipoEmpresaRequest($cpf_cnpj, string $contentType = self::contentTypes['baixarLogotipoEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling baixarLogotipoEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/logotipo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cadastrarCertificadoEmpresa
     *
     * Cadastrar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaPedidoCadastroCertificado $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cadastrarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaCertificado
     */
    public function cadastrarCertificadoEmpresa($cpf_cnpj, $body, string $contentType = self::contentTypes['cadastrarCertificadoEmpresa'][0])
    {
        list($response) = $this->cadastrarCertificadoEmpresaWithHttpInfo($cpf_cnpj, $body, $contentType);
        return $response;
    }

    /**
     * Operation cadastrarCertificadoEmpresaWithHttpInfo
     *
     * Cadastrar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaPedidoCadastroCertificado $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cadastrarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaCertificado, HTTP status code, HTTP response headers (array of strings)
     */
    public function cadastrarCertificadoEmpresaWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['cadastrarCertificadoEmpresa'][0])
    {
        $request = $this->cadastrarCertificadoEmpresaRequest($cpf_cnpj, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaCertificado' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaCertificado' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaCertificado', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaCertificado';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaCertificado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cadastrarCertificadoEmpresaAsync
     *
     * Cadastrar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaPedidoCadastroCertificado $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cadastrarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cadastrarCertificadoEmpresaAsync($cpf_cnpj, $body, string $contentType = self::contentTypes['cadastrarCertificadoEmpresa'][0])
    {
        return $this->cadastrarCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cadastrarCertificadoEmpresaAsyncWithHttpInfo
     *
     * Cadastrar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaPedidoCadastroCertificado $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cadastrarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cadastrarCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, $body, string $contentType = self::contentTypes['cadastrarCertificadoEmpresa'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaCertificado';
        $request = $this->cadastrarCertificadoEmpresaRequest($cpf_cnpj, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cadastrarCertificadoEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \NuvemFiscal\Model\EmpresaPedidoCadastroCertificado $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cadastrarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cadastrarCertificadoEmpresaRequest($cpf_cnpj, $body, string $contentType = self::contentTypes['cadastrarCertificadoEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling cadastrarCertificadoEmpresa'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cadastrarCertificadoEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/certificado';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarCertificadoEmpresa
     *
     * Consultar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaCertificado
     */
    public function consultarCertificadoEmpresa($cpf_cnpj, string $contentType = self::contentTypes['consultarCertificadoEmpresa'][0])
    {
        list($response) = $this->consultarCertificadoEmpresaWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarCertificadoEmpresaWithHttpInfo
     *
     * Consultar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaCertificado, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarCertificadoEmpresaWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarCertificadoEmpresa'][0])
    {
        $request = $this->consultarCertificadoEmpresaRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaCertificado' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaCertificado' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaCertificado', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaCertificado';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaCertificado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarCertificadoEmpresaAsync
     *
     * Consultar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCertificadoEmpresaAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarCertificadoEmpresa'][0])
    {
        return $this->consultarCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarCertificadoEmpresaAsyncWithHttpInfo
     *
     * Consultar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarCertificadoEmpresa'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaCertificado';
        $request = $this->consultarCertificadoEmpresaRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarCertificadoEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarCertificadoEmpresaRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarCertificadoEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarCertificadoEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/certificado';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarConfigCte
     *
     * Consultar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigCte
     */
    public function consultarConfigCte($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigCte'][0])
    {
        list($response) = $this->consultarConfigCteWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarConfigCteWithHttpInfo
     *
     * Consultar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigCte, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarConfigCteWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigCte'][0])
    {
        $request = $this->consultarConfigCteRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigCte' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigCte' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigCte', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigCte';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigCte',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarConfigCteAsync
     *
     * Consultar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigCteAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigCte'][0])
    {
        return $this->consultarConfigCteAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarConfigCteAsyncWithHttpInfo
     *
     * Consultar configuração de CT-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigCteAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigCte';
        $request = $this->consultarConfigCteRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarConfigCte'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarConfigCteRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigCte'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarConfigCte'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/cte';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarConfigMdfe
     *
     * Consultar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigMdfe
     */
    public function consultarConfigMdfe($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigMdfe'][0])
    {
        list($response) = $this->consultarConfigMdfeWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarConfigMdfeWithHttpInfo
     *
     * Consultar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigMdfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarConfigMdfeWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigMdfe'][0])
    {
        $request = $this->consultarConfigMdfeRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigMdfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigMdfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigMdfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigMdfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigMdfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarConfigMdfeAsync
     *
     * Consultar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigMdfeAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigMdfe'][0])
    {
        return $this->consultarConfigMdfeAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarConfigMdfeAsyncWithHttpInfo
     *
     * Consultar configuração de MDF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigMdfeAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigMdfe';
        $request = $this->consultarConfigMdfeRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarConfigMdfe'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarConfigMdfeRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigMdfe'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarConfigMdfe'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/mdfe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarConfigNfce
     *
     * Consultar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfce'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigNfce
     */
    public function consultarConfigNfce($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfce'][0])
    {
        list($response) = $this->consultarConfigNfceWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarConfigNfceWithHttpInfo
     *
     * Consultar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfce'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigNfce, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarConfigNfceWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfce'][0])
    {
        $request = $this->consultarConfigNfceRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigNfce' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigNfce' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigNfce', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigNfce';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigNfce',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarConfigNfceAsync
     *
     * Consultar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigNfceAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfce'][0])
    {
        return $this->consultarConfigNfceAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarConfigNfceAsyncWithHttpInfo
     *
     * Consultar configuração de NFC-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigNfceAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfce'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigNfce';
        $request = $this->consultarConfigNfceRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarConfigNfce'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfce'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarConfigNfceRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfce'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarConfigNfce'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/nfce';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarConfigNfe
     *
     * Consultar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigNfe
     */
    public function consultarConfigNfe($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfe'][0])
    {
        list($response) = $this->consultarConfigNfeWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarConfigNfeWithHttpInfo
     *
     * Consultar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigNfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarConfigNfeWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfe'][0])
    {
        $request = $this->consultarConfigNfeRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigNfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigNfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigNfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigNfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigNfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarConfigNfeAsync
     *
     * Consultar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigNfeAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfe'][0])
    {
        return $this->consultarConfigNfeAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarConfigNfeAsyncWithHttpInfo
     *
     * Consultar configuração de NF-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigNfeAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigNfe';
        $request = $this->consultarConfigNfeRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarConfigNfe'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarConfigNfeRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfe'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarConfigNfe'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/nfe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarConfigNfse
     *
     * Consultar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfse'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaConfigNfse
     */
    public function consultarConfigNfse($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfse'][0])
    {
        list($response) = $this->consultarConfigNfseWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarConfigNfseWithHttpInfo
     *
     * Consultar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfse'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaConfigNfse, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarConfigNfseWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfse'][0])
    {
        $request = $this->consultarConfigNfseRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaConfigNfse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaConfigNfse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaConfigNfse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaConfigNfse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaConfigNfse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarConfigNfseAsync
     *
     * Consultar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigNfseAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfse'][0])
    {
        return $this->consultarConfigNfseAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarConfigNfseAsyncWithHttpInfo
     *
     * Consultar configuração de NFS-e
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarConfigNfseAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfse'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaConfigNfse';
        $request = $this->consultarConfigNfseRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarConfigNfse'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarConfigNfse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarConfigNfseRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarConfigNfse'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarConfigNfse'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/nfse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarEmpresa
     *
     * Consultar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\Empresa
     */
    public function consultarEmpresa($cpf_cnpj, string $contentType = self::contentTypes['consultarEmpresa'][0])
    {
        list($response) = $this->consultarEmpresaWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarEmpresaWithHttpInfo
     *
     * Consultar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\Empresa, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarEmpresaWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarEmpresa'][0])
    {
        $request = $this->consultarEmpresaRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\Empresa' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\Empresa' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\Empresa', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\Empresa';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\Empresa',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarEmpresaAsync
     *
     * Consultar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEmpresaAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarEmpresa'][0])
    {
        return $this->consultarEmpresaAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarEmpresaAsyncWithHttpInfo
     *
     * Consultar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEmpresaAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarEmpresa'][0])
    {
        $returnType = '\NuvemFiscal\Model\Empresa';
        $request = $this->consultarEmpresaRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarEmpresaRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation criarEmpresa
     *
     * Cadastrar empresa
     *
     * @param  \NuvemFiscal\Model\Empresa $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\Empresa
     */
    public function criarEmpresa($body, string $contentType = self::contentTypes['criarEmpresa'][0])
    {
        list($response) = $this->criarEmpresaWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation criarEmpresaWithHttpInfo
     *
     * Cadastrar empresa
     *
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\Empresa, HTTP status code, HTTP response headers (array of strings)
     */
    public function criarEmpresaWithHttpInfo($body, string $contentType = self::contentTypes['criarEmpresa'][0])
    {
        $request = $this->criarEmpresaRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\Empresa' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\Empresa' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\Empresa', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\Empresa';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\Empresa',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation criarEmpresaAsync
     *
     * Cadastrar empresa
     *
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function criarEmpresaAsync($body, string $contentType = self::contentTypes['criarEmpresa'][0])
    {
        return $this->criarEmpresaAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation criarEmpresaAsyncWithHttpInfo
     *
     * Cadastrar empresa
     *
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function criarEmpresaAsyncWithHttpInfo($body, string $contentType = self::contentTypes['criarEmpresa'][0])
    {
        $returnType = '\NuvemFiscal\Model\Empresa';
        $request = $this->criarEmpresaRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'criarEmpresa'
     *
     * @param  \NuvemFiscal\Model\Empresa $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function criarEmpresaRequest($body, string $contentType = self::contentTypes['criarEmpresa'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling criarEmpresa'
            );
        }


        $resourcePath = '/empresas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enviarCertificadoEmpresa
     *
     * Upload de certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaCertificado
     */
    public function enviarCertificadoEmpresa($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarCertificadoEmpresa'][0])
    {
        list($response) = $this->enviarCertificadoEmpresaWithHttpInfo($cpf_cnpj, $input, $contentType);
        return $response;
    }

    /**
     * Operation enviarCertificadoEmpresaWithHttpInfo
     *
     * Upload de certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaCertificado, HTTP status code, HTTP response headers (array of strings)
     */
    public function enviarCertificadoEmpresaWithHttpInfo($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarCertificadoEmpresa'][0])
    {
        $request = $this->enviarCertificadoEmpresaRequest($cpf_cnpj, $input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaCertificado' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaCertificado' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaCertificado', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaCertificado';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaCertificado',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enviarCertificadoEmpresaAsync
     *
     * Upload de certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enviarCertificadoEmpresaAsync($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarCertificadoEmpresa'][0])
    {
        return $this->enviarCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, $input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enviarCertificadoEmpresaAsyncWithHttpInfo
     *
     * Upload de certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enviarCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarCertificadoEmpresa'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaCertificado';
        $request = $this->enviarCertificadoEmpresaRequest($cpf_cnpj, $input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enviarCertificadoEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enviarCertificadoEmpresaRequest($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarCertificadoEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling enviarCertificadoEmpresa'
            );
        }



        $resourcePath = '/empresas/{cpf_cnpj}/certificado/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }

        // form params
        if ($input !== null) {
            $multipart = true;
            $formParams['Input'] = [];
            $paramFiles = is_array($input) ? $input : [$input];
            foreach ($paramFiles as $paramFile) {
                $formParams['Input'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enviarLogotipoEmpresa
     *
     * Enviar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function enviarLogotipoEmpresa($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarLogotipoEmpresa'][0])
    {
        $this->enviarLogotipoEmpresaWithHttpInfo($cpf_cnpj, $input, $contentType);
    }

    /**
     * Operation enviarLogotipoEmpresaWithHttpInfo
     *
     * Enviar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enviarLogotipoEmpresaWithHttpInfo($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarLogotipoEmpresa'][0])
    {
        $request = $this->enviarLogotipoEmpresaRequest($cpf_cnpj, $input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation enviarLogotipoEmpresaAsync
     *
     * Enviar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enviarLogotipoEmpresaAsync($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarLogotipoEmpresa'][0])
    {
        return $this->enviarLogotipoEmpresaAsyncWithHttpInfo($cpf_cnpj, $input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enviarLogotipoEmpresaAsyncWithHttpInfo
     *
     * Enviar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enviarLogotipoEmpresaAsyncWithHttpInfo($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarLogotipoEmpresa'][0])
    {
        $returnType = '';
        $request = $this->enviarLogotipoEmpresaRequest($cpf_cnpj, $input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enviarLogotipoEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  \SplFileObject $input (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enviarLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enviarLogotipoEmpresaRequest($cpf_cnpj, $input = null, string $contentType = self::contentTypes['enviarLogotipoEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling enviarLogotipoEmpresa'
            );
        }



        $resourcePath = '/empresas/{cpf_cnpj}/logotipo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }

        // form params
        if ($input !== null) {
            $multipart = true;
            $formParams['Input'] = [];
            $paramFiles = is_array($input) ? $input : [$input];
            foreach ($paramFiles as $paramFile) {
                $formParams['Input'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation excluirCertificadoEmpresa
     *
     * Deletar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function excluirCertificadoEmpresa($cpf_cnpj, string $contentType = self::contentTypes['excluirCertificadoEmpresa'][0])
    {
        $this->excluirCertificadoEmpresaWithHttpInfo($cpf_cnpj, $contentType);
    }

    /**
     * Operation excluirCertificadoEmpresaWithHttpInfo
     *
     * Deletar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function excluirCertificadoEmpresaWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['excluirCertificadoEmpresa'][0])
    {
        $request = $this->excluirCertificadoEmpresaRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation excluirCertificadoEmpresaAsync
     *
     * Deletar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function excluirCertificadoEmpresaAsync($cpf_cnpj, string $contentType = self::contentTypes['excluirCertificadoEmpresa'][0])
    {
        return $this->excluirCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation excluirCertificadoEmpresaAsyncWithHttpInfo
     *
     * Deletar certificado
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function excluirCertificadoEmpresaAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['excluirCertificadoEmpresa'][0])
    {
        $returnType = '';
        $request = $this->excluirCertificadoEmpresaRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'excluirCertificadoEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirCertificadoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function excluirCertificadoEmpresaRequest($cpf_cnpj, string $contentType = self::contentTypes['excluirCertificadoEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling excluirCertificadoEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/certificado';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation excluirEmpresa
     *
     * Deletar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function excluirEmpresa($cpf_cnpj, string $contentType = self::contentTypes['excluirEmpresa'][0])
    {
        $this->excluirEmpresaWithHttpInfo($cpf_cnpj, $contentType);
    }

    /**
     * Operation excluirEmpresaWithHttpInfo
     *
     * Deletar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function excluirEmpresaWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['excluirEmpresa'][0])
    {
        $request = $this->excluirEmpresaRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation excluirEmpresaAsync
     *
     * Deletar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function excluirEmpresaAsync($cpf_cnpj, string $contentType = self::contentTypes['excluirEmpresa'][0])
    {
        return $this->excluirEmpresaAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation excluirEmpresaAsyncWithHttpInfo
     *
     * Deletar empresa
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function excluirEmpresaAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['excluirEmpresa'][0])
    {
        $returnType = '';
        $request = $this->excluirEmpresaRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'excluirEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function excluirEmpresaRequest($cpf_cnpj, string $contentType = self::contentTypes['excluirEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling excluirEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation excluirLogotipoEmpresa
     *
     * Deletar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function excluirLogotipoEmpresa($cpf_cnpj, string $contentType = self::contentTypes['excluirLogotipoEmpresa'][0])
    {
        $this->excluirLogotipoEmpresaWithHttpInfo($cpf_cnpj, $contentType);
    }

    /**
     * Operation excluirLogotipoEmpresaWithHttpInfo
     *
     * Deletar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function excluirLogotipoEmpresaWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['excluirLogotipoEmpresa'][0])
    {
        $request = $this->excluirLogotipoEmpresaRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation excluirLogotipoEmpresaAsync
     *
     * Deletar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function excluirLogotipoEmpresaAsync($cpf_cnpj, string $contentType = self::contentTypes['excluirLogotipoEmpresa'][0])
    {
        return $this->excluirLogotipoEmpresaAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation excluirLogotipoEmpresaAsyncWithHttpInfo
     *
     * Deletar logotipo
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function excluirLogotipoEmpresaAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['excluirLogotipoEmpresa'][0])
    {
        $returnType = '';
        $request = $this->excluirLogotipoEmpresaRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'excluirLogotipoEmpresa'
     *
     * @param  string $cpf_cnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['excluirLogotipoEmpresa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function excluirLogotipoEmpresaRequest($cpf_cnpj, string $contentType = self::contentTypes['excluirLogotipoEmpresa'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling excluirLogotipoEmpresa'
            );
        }


        $resourcePath = '/empresas/{cpf_cnpj}/logotipo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cpf_cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cpf_cnpj' . '}',
                ObjectSerializer::toPathValue($cpf_cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listarEmpresas
     *
     * Listar empresas
     *
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarEmpresas'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\EmpresaListagem
     */
    public function listarEmpresas($top = 10, $skip = 0, $inlinecount = false, $cpf_cnpj = null, string $contentType = self::contentTypes['listarEmpresas'][0])
    {
        list($response) = $this->listarEmpresasWithHttpInfo($top, $skip, $inlinecount, $cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation listarEmpresasWithHttpInfo
     *
     * Listar empresas
     *
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarEmpresas'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\EmpresaListagem, HTTP status code, HTTP response headers (array of strings)
     */
    public function listarEmpresasWithHttpInfo($top = 10, $skip = 0, $inlinecount = false, $cpf_cnpj = null, string $contentType = self::contentTypes['listarEmpresas'][0])
    {
        $request = $this->listarEmpresasRequest($top, $skip, $inlinecount, $cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\EmpresaListagem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\EmpresaListagem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\EmpresaListagem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\EmpresaListagem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\EmpresaListagem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listarEmpresasAsync
     *
     * Listar empresas
     *
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarEmpresas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarEmpresasAsync($top = 10, $skip = 0, $inlinecount = false, $cpf_cnpj = null, string $contentType = self::contentTypes['listarEmpresas'][0])
    {
        return $this->listarEmpresasAsyncWithHttpInfo($top, $skip, $inlinecount, $cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listarEmpresasAsyncWithHttpInfo
     *
     * Listar empresas
     *
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarEmpresas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarEmpresasAsyncWithHttpInfo($top = 10, $skip = 0, $inlinecount = false, $cpf_cnpj = null, string $contentType = self::contentTypes['listarEmpresas'][0])
    {
        $returnType = '\NuvemFiscal\Model\EmpresaListagem';
        $request = $this->listarEmpresasRequest($top, $skip, $inlinecount, $cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listarEmpresas'
     *
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarEmpresas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listarEmpresasRequest($top = 10, $skip = 0, $inlinecount = false, $cpf_cnpj = null, string $contentType = self::contentTypes['listarEmpresas'][0])
    {






        $resourcePath = '/empresas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpf_cnpj,
            'cpf_cnpj', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
