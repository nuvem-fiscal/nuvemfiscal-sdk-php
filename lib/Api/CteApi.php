<?php
/**
 * CteApi
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NuvemFiscal\ApiException;
use NuvemFiscal\Configuration;
use NuvemFiscal\HeaderSelector;
use NuvemFiscal\ObjectSerializer;

/**
 * CteApi Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'baixarPdfCancelamentoCte' => [
            'application/json',
        ],
        'baixarPdfCartaCorrecaoCte' => [
            'application/json',
        ],
        'baixarPdfCte' => [
            'application/json',
        ],
        'baixarPdfEventoCte' => [
            'application/json',
        ],
        'baixarXmlCancelamentoCte' => [
            'application/json',
        ],
        'baixarXmlCartaCorrecaoCte' => [
            'application/json',
        ],
        'baixarXmlCte' => [
            'application/json',
        ],
        'baixarXmlCteConhecimento' => [
            'application/json',
        ],
        'baixarXmlCteProtocolo' => [
            'application/json',
        ],
        'baixarXmlEventoCte' => [
            'application/json',
        ],
        'cancelarCte' => [
            'application/json',
        ],
        'consultarCancelamentoCte' => [
            'application/json',
        ],
        'consultarCartaCorrecaoCte' => [
            'application/json',
        ],
        'consultarCte' => [
            'application/json',
        ],
        'consultarEventoCte' => [
            'application/json',
        ],
        'consultarStatusSefazCte' => [
            'application/json',
        ],
        'criarCartaCorrecaoCte' => [
            'application/json',
        ],
        'emitirCte' => [
            'application/json',
        ],
        'listarCte' => [
            'application/json',
        ],
        'sincronizarCte' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation baixarPdfCancelamentoCte
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfCancelamentoCte($id, string $contentType = self::contentTypes['baixarPdfCancelamentoCte'][0])
    {
        list($response) = $this->baixarPdfCancelamentoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfCancelamentoCteWithHttpInfo
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfCancelamentoCteWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfCancelamentoCte'][0])
    {
        $request = $this->baixarPdfCancelamentoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfCancelamentoCteAsync
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCancelamentoCteAsync($id, string $contentType = self::contentTypes['baixarPdfCancelamentoCte'][0])
    {
        return $this->baixarPdfCancelamentoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfCancelamentoCteAsyncWithHttpInfo
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCancelamentoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfCancelamentoCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfCancelamentoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfCancelamentoCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfCancelamentoCteRequest($id, string $contentType = self::contentTypes['baixarPdfCancelamentoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfCancelamentoCte'
            );
        }


        $resourcePath = '/cte/{id}/cancelamento/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarPdfCartaCorrecaoCte
     *
     * Baixar PDF da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfCartaCorrecaoCte($id, string $contentType = self::contentTypes['baixarPdfCartaCorrecaoCte'][0])
    {
        list($response) = $this->baixarPdfCartaCorrecaoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfCartaCorrecaoCteWithHttpInfo
     *
     * Baixar PDF da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfCartaCorrecaoCteWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfCartaCorrecaoCte'][0])
    {
        $request = $this->baixarPdfCartaCorrecaoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfCartaCorrecaoCteAsync
     *
     * Baixar PDF da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCartaCorrecaoCteAsync($id, string $contentType = self::contentTypes['baixarPdfCartaCorrecaoCte'][0])
    {
        return $this->baixarPdfCartaCorrecaoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfCartaCorrecaoCteAsyncWithHttpInfo
     *
     * Baixar PDF da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCartaCorrecaoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfCartaCorrecaoCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfCartaCorrecaoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfCartaCorrecaoCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfCartaCorrecaoCteRequest($id, string $contentType = self::contentTypes['baixarPdfCartaCorrecaoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfCartaCorrecaoCte'
            );
        }


        $resourcePath = '/cte/{id}/carta-correcao/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarPdfCte
     *
     * Baixar PDF do DACTE
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfCte($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfCte'][0])
    {
        list($response) = $this->baixarPdfCteWithHttpInfo($id, $logotipo, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfCteWithHttpInfo
     *
     * Baixar PDF do DACTE
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfCteWithHttpInfo($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfCte'][0])
    {
        $request = $this->baixarPdfCteRequest($id, $logotipo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfCteAsync
     *
     * Baixar PDF do DACTE
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCteAsync($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfCte'][0])
    {
        return $this->baixarPdfCteAsyncWithHttpInfo($id, $logotipo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfCteAsyncWithHttpInfo
     *
     * Baixar PDF do DACTE
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCteAsyncWithHttpInfo($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfCteRequest($id, $logotipo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfCteRequest($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfCte'
            );
        }



        $resourcePath = '/cte/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $logotipo,
            'logotipo', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarPdfEventoCte
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfEventoCte($id, string $contentType = self::contentTypes['baixarPdfEventoCte'][0])
    {
        list($response) = $this->baixarPdfEventoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfEventoCteWithHttpInfo
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfEventoCteWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfEventoCte'][0])
    {
        $request = $this->baixarPdfEventoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfEventoCteAsync
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfEventoCteAsync($id, string $contentType = self::contentTypes['baixarPdfEventoCte'][0])
    {
        return $this->baixarPdfEventoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfEventoCteAsyncWithHttpInfo
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfEventoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfEventoCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfEventoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfEventoCte'
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfEventoCteRequest($id, string $contentType = self::contentTypes['baixarPdfEventoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfEventoCte'
            );
        }


        $resourcePath = '/cte/eventos/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlCancelamentoCte
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlCancelamentoCte($id, string $contentType = self::contentTypes['baixarXmlCancelamentoCte'][0])
    {
        list($response) = $this->baixarXmlCancelamentoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlCancelamentoCteWithHttpInfo
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlCancelamentoCteWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCancelamentoCte'][0])
    {
        $request = $this->baixarXmlCancelamentoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlCancelamentoCteAsync
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCancelamentoCteAsync($id, string $contentType = self::contentTypes['baixarXmlCancelamentoCte'][0])
    {
        return $this->baixarXmlCancelamentoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlCancelamentoCteAsyncWithHttpInfo
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCancelamentoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCancelamentoCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlCancelamentoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlCancelamentoCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlCancelamentoCteRequest($id, string $contentType = self::contentTypes['baixarXmlCancelamentoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlCancelamentoCte'
            );
        }


        $resourcePath = '/cte/{id}/cancelamento/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlCartaCorrecaoCte
     *
     * Baixar XML da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlCartaCorrecaoCte($id, string $contentType = self::contentTypes['baixarXmlCartaCorrecaoCte'][0])
    {
        list($response) = $this->baixarXmlCartaCorrecaoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlCartaCorrecaoCteWithHttpInfo
     *
     * Baixar XML da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlCartaCorrecaoCteWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCartaCorrecaoCte'][0])
    {
        $request = $this->baixarXmlCartaCorrecaoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlCartaCorrecaoCteAsync
     *
     * Baixar XML da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCartaCorrecaoCteAsync($id, string $contentType = self::contentTypes['baixarXmlCartaCorrecaoCte'][0])
    {
        return $this->baixarXmlCartaCorrecaoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlCartaCorrecaoCteAsyncWithHttpInfo
     *
     * Baixar XML da carta de correção
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCartaCorrecaoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCartaCorrecaoCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlCartaCorrecaoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlCartaCorrecaoCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlCartaCorrecaoCteRequest($id, string $contentType = self::contentTypes['baixarXmlCartaCorrecaoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlCartaCorrecaoCte'
            );
        }


        $resourcePath = '/cte/{id}/carta-correcao/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlCte
     *
     * Baixar XML do CT-e processado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlCte($id, string $contentType = self::contentTypes['baixarXmlCte'][0])
    {
        list($response) = $this->baixarXmlCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlCteWithHttpInfo
     *
     * Baixar XML do CT-e processado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlCteWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCte'][0])
    {
        $request = $this->baixarXmlCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlCteAsync
     *
     * Baixar XML do CT-e processado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCteAsync($id, string $contentType = self::contentTypes['baixarXmlCte'][0])
    {
        return $this->baixarXmlCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlCteAsyncWithHttpInfo
     *
     * Baixar XML do CT-e processado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlCteRequest($id, string $contentType = self::contentTypes['baixarXmlCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlCte'
            );
        }


        $resourcePath = '/cte/{id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlCteConhecimento
     *
     * Baixar XML do CT-e
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteConhecimento'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlCteConhecimento($id, string $contentType = self::contentTypes['baixarXmlCteConhecimento'][0])
    {
        list($response) = $this->baixarXmlCteConhecimentoWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlCteConhecimentoWithHttpInfo
     *
     * Baixar XML do CT-e
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteConhecimento'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlCteConhecimentoWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCteConhecimento'][0])
    {
        $request = $this->baixarXmlCteConhecimentoRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlCteConhecimentoAsync
     *
     * Baixar XML do CT-e
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteConhecimento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCteConhecimentoAsync($id, string $contentType = self::contentTypes['baixarXmlCteConhecimento'][0])
    {
        return $this->baixarXmlCteConhecimentoAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlCteConhecimentoAsyncWithHttpInfo
     *
     * Baixar XML do CT-e
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteConhecimento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCteConhecimentoAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCteConhecimento'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlCteConhecimentoRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlCteConhecimento'
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteConhecimento'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlCteConhecimentoRequest($id, string $contentType = self::contentTypes['baixarXmlCteConhecimento'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlCteConhecimento'
            );
        }


        $resourcePath = '/cte/{id}/xml/conhecimento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlCteProtocolo
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteProtocolo'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlCteProtocolo($id, string $contentType = self::contentTypes['baixarXmlCteProtocolo'][0])
    {
        list($response) = $this->baixarXmlCteProtocoloWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlCteProtocoloWithHttpInfo
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteProtocolo'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlCteProtocoloWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCteProtocolo'][0])
    {
        $request = $this->baixarXmlCteProtocoloRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlCteProtocoloAsync
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteProtocolo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCteProtocoloAsync($id, string $contentType = self::contentTypes['baixarXmlCteProtocolo'][0])
    {
        return $this->baixarXmlCteProtocoloAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlCteProtocoloAsyncWithHttpInfo
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteProtocolo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCteProtocoloAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCteProtocolo'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlCteProtocoloRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlCteProtocolo'
     *
     * @param  string $id ID único da CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCteProtocolo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlCteProtocoloRequest($id, string $contentType = self::contentTypes['baixarXmlCteProtocolo'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlCteProtocolo'
            );
        }


        $resourcePath = '/cte/{id}/xml/protocolo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlEventoCte
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlEventoCte($id, string $contentType = self::contentTypes['baixarXmlEventoCte'][0])
    {
        list($response) = $this->baixarXmlEventoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlEventoCteWithHttpInfo
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlEventoCteWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlEventoCte'][0])
    {
        $request = $this->baixarXmlEventoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlEventoCteAsync
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlEventoCteAsync($id, string $contentType = self::contentTypes['baixarXmlEventoCte'][0])
    {
        return $this->baixarXmlEventoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlEventoCteAsyncWithHttpInfo
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlEventoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlEventoCte'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlEventoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlEventoCte'
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlEventoCteRequest($id, string $contentType = self::contentTypes['baixarXmlEventoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlEventoCte'
            );
        }


        $resourcePath = '/cte/eventos/{id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelarCte
     *
     * Cancelar um CT-e autorizado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCancelamento $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeCancelamento
     */
    public function cancelarCte($id, $body, string $contentType = self::contentTypes['cancelarCte'][0])
    {
        list($response) = $this->cancelarCteWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation cancelarCteWithHttpInfo
     *
     * Cancelar um CT-e autorizado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCancelamento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeCancelamento, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelarCteWithHttpInfo($id, $body, string $contentType = self::contentTypes['cancelarCte'][0])
    {
        $request = $this->cancelarCteRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeCancelamento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeCancelamento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeCancelamento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeCancelamento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeCancelamento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelarCteAsync
     *
     * Cancelar um CT-e autorizado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCancelamento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelarCteAsync($id, $body, string $contentType = self::contentTypes['cancelarCte'][0])
    {
        return $this->cancelarCteAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelarCteAsyncWithHttpInfo
     *
     * Cancelar um CT-e autorizado
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCancelamento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelarCteAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['cancelarCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeCancelamento';
        $request = $this->cancelarCteRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelarCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCancelamento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelarCteRequest($id, $body, string $contentType = self::contentTypes['cancelarCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelarCte'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelarCte'
            );
        }


        $resourcePath = '/cte/{id}/cancelamento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarCancelamentoCte
     *
     * Consultar o cancelamento do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeCancelamento
     */
    public function consultarCancelamentoCte($id, string $contentType = self::contentTypes['consultarCancelamentoCte'][0])
    {
        list($response) = $this->consultarCancelamentoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarCancelamentoCteWithHttpInfo
     *
     * Consultar o cancelamento do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeCancelamento, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarCancelamentoCteWithHttpInfo($id, string $contentType = self::contentTypes['consultarCancelamentoCte'][0])
    {
        $request = $this->consultarCancelamentoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeCancelamento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeCancelamento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeCancelamento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeCancelamento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeCancelamento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarCancelamentoCteAsync
     *
     * Consultar o cancelamento do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCancelamentoCteAsync($id, string $contentType = self::contentTypes['consultarCancelamentoCte'][0])
    {
        return $this->consultarCancelamentoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarCancelamentoCteAsyncWithHttpInfo
     *
     * Consultar o cancelamento do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCancelamentoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarCancelamentoCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeCancelamento';
        $request = $this->consultarCancelamentoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarCancelamentoCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarCancelamentoCteRequest($id, string $contentType = self::contentTypes['consultarCancelamentoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarCancelamentoCte'
            );
        }


        $resourcePath = '/cte/{id}/cancelamento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarCartaCorrecaoCte
     *
     * Consultar a solicitação de correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\CteCartaCorrecao
     */
    public function consultarCartaCorrecaoCte($id, string $contentType = self::contentTypes['consultarCartaCorrecaoCte'][0])
    {
        list($response) = $this->consultarCartaCorrecaoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarCartaCorrecaoCteWithHttpInfo
     *
     * Consultar a solicitação de correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\CteCartaCorrecao, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarCartaCorrecaoCteWithHttpInfo($id, string $contentType = self::contentTypes['consultarCartaCorrecaoCte'][0])
    {
        $request = $this->consultarCartaCorrecaoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\CteCartaCorrecao' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\CteCartaCorrecao' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\CteCartaCorrecao', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\CteCartaCorrecao';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\CteCartaCorrecao',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarCartaCorrecaoCteAsync
     *
     * Consultar a solicitação de correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCartaCorrecaoCteAsync($id, string $contentType = self::contentTypes['consultarCartaCorrecaoCte'][0])
    {
        return $this->consultarCartaCorrecaoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarCartaCorrecaoCteAsyncWithHttpInfo
     *
     * Consultar a solicitação de correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCartaCorrecaoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarCartaCorrecaoCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\CteCartaCorrecao';
        $request = $this->consultarCartaCorrecaoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarCartaCorrecaoCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarCartaCorrecaoCteRequest($id, string $contentType = self::contentTypes['consultarCartaCorrecaoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarCartaCorrecaoCte'
            );
        }


        $resourcePath = '/cte/{id}/carta-correcao';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarCte
     *
     * Consultar CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\Dfe
     */
    public function consultarCte($id, string $contentType = self::contentTypes['consultarCte'][0])
    {
        list($response) = $this->consultarCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarCteWithHttpInfo
     *
     * Consultar CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\Dfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarCteWithHttpInfo($id, string $contentType = self::contentTypes['consultarCte'][0])
    {
        $request = $this->consultarCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\Dfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\Dfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\Dfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\Dfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\Dfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarCteAsync
     *
     * Consultar CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCteAsync($id, string $contentType = self::contentTypes['consultarCte'][0])
    {
        return $this->consultarCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarCteAsyncWithHttpInfo
     *
     * Consultar CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\Dfe';
        $request = $this->consultarCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarCteRequest($id, string $contentType = self::contentTypes['consultarCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarCte'
            );
        }


        $resourcePath = '/cte/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarEventoCte
     *
     * Consultar evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeEvento
     */
    public function consultarEventoCte($id, string $contentType = self::contentTypes['consultarEventoCte'][0])
    {
        list($response) = $this->consultarEventoCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarEventoCteWithHttpInfo
     *
     * Consultar evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeEvento, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarEventoCteWithHttpInfo($id, string $contentType = self::contentTypes['consultarEventoCte'][0])
    {
        $request = $this->consultarEventoCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeEvento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeEvento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeEvento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeEvento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeEvento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarEventoCteAsync
     *
     * Consultar evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEventoCteAsync($id, string $contentType = self::contentTypes['consultarEventoCte'][0])
    {
        return $this->consultarEventoCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarEventoCteAsyncWithHttpInfo
     *
     * Consultar evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEventoCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarEventoCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeEvento';
        $request = $this->consultarEventoCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarEventoCte'
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarEventoCteRequest($id, string $contentType = self::contentTypes['consultarEventoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarEventoCte'
            );
        }


        $resourcePath = '/cte/eventos/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarStatusSefazCte
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeSefazStatus
     */
    public function consultarStatusSefazCte($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazCte'][0])
    {
        list($response) = $this->consultarStatusSefazCteWithHttpInfo($cpf_cnpj, $autorizador, $contentType);
        return $response;
    }

    /**
     * Operation consultarStatusSefazCteWithHttpInfo
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeSefazStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarStatusSefazCteWithHttpInfo($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazCte'][0])
    {
        $request = $this->consultarStatusSefazCteRequest($cpf_cnpj, $autorizador, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeSefazStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeSefazStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeSefazStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeSefazStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeSefazStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarStatusSefazCteAsync
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarStatusSefazCteAsync($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazCte'][0])
    {
        return $this->consultarStatusSefazCteAsyncWithHttpInfo($cpf_cnpj, $autorizador, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarStatusSefazCteAsyncWithHttpInfo
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarStatusSefazCteAsyncWithHttpInfo($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeSefazStatus';
        $request = $this->consultarStatusSefazCteRequest($cpf_cnpj, $autorizador, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarStatusSefazCte'
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarStatusSefazCteRequest($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazCte'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarStatusSefazCte'
            );
        }



        $resourcePath = '/cte/sefaz/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpf_cnpj,
            'cpf_cnpj', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $autorizador,
            'autorizador', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation criarCartaCorrecaoCte
     *
     * Solicitar correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCartaCorrecao $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\CteCartaCorrecao
     */
    public function criarCartaCorrecaoCte($id, $body, string $contentType = self::contentTypes['criarCartaCorrecaoCte'][0])
    {
        list($response) = $this->criarCartaCorrecaoCteWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation criarCartaCorrecaoCteWithHttpInfo
     *
     * Solicitar correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCartaCorrecao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\CteCartaCorrecao, HTTP status code, HTTP response headers (array of strings)
     */
    public function criarCartaCorrecaoCteWithHttpInfo($id, $body, string $contentType = self::contentTypes['criarCartaCorrecaoCte'][0])
    {
        $request = $this->criarCartaCorrecaoCteRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\CteCartaCorrecao' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\CteCartaCorrecao' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\CteCartaCorrecao', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\CteCartaCorrecao';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\CteCartaCorrecao',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation criarCartaCorrecaoCteAsync
     *
     * Solicitar correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCartaCorrecao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function criarCartaCorrecaoCteAsync($id, $body, string $contentType = self::contentTypes['criarCartaCorrecaoCte'][0])
    {
        return $this->criarCartaCorrecaoCteAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation criarCartaCorrecaoCteAsyncWithHttpInfo
     *
     * Solicitar correção do CT-e
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCartaCorrecao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function criarCartaCorrecaoCteAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['criarCartaCorrecaoCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\CteCartaCorrecao';
        $request = $this->criarCartaCorrecaoCteRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'criarCartaCorrecaoCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\CtePedidoCartaCorrecao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['criarCartaCorrecaoCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function criarCartaCorrecaoCteRequest($id, $body, string $contentType = self::contentTypes['criarCartaCorrecaoCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling criarCartaCorrecaoCte'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling criarCartaCorrecaoCte'
            );
        }


        $resourcePath = '/cte/{id}/carta-correcao';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emitirCte
     *
     * Emitir CT-e
     *
     * @param  \NuvemFiscal\Model\CtePedidoEmissao $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\Dfe
     */
    public function emitirCte($body, string $contentType = self::contentTypes['emitirCte'][0])
    {
        list($response) = $this->emitirCteWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation emitirCteWithHttpInfo
     *
     * Emitir CT-e
     *
     * @param  \NuvemFiscal\Model\CtePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\Dfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function emitirCteWithHttpInfo($body, string $contentType = self::contentTypes['emitirCte'][0])
    {
        $request = $this->emitirCteRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\Dfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\Dfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\Dfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\Dfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\Dfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emitirCteAsync
     *
     * Emitir CT-e
     *
     * @param  \NuvemFiscal\Model\CtePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emitirCteAsync($body, string $contentType = self::contentTypes['emitirCte'][0])
    {
        return $this->emitirCteAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emitirCteAsyncWithHttpInfo
     *
     * Emitir CT-e
     *
     * @param  \NuvemFiscal\Model\CtePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emitirCteAsyncWithHttpInfo($body, string $contentType = self::contentTypes['emitirCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\Dfe';
        $request = $this->emitirCteRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emitirCte'
     *
     * @param  \NuvemFiscal\Model\CtePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emitirCteRequest($body, string $contentType = self::contentTypes['emitirCte'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling emitirCte'
            );
        }


        $resourcePath = '/cte';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listarCte
     *
     * Listar CT-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeListagem
     */
    public function listarCte($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarCte'][0])
    {
        list($response) = $this->listarCteWithHttpInfo($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType);
        return $response;
    }

    /**
     * Operation listarCteWithHttpInfo
     *
     * Listar CT-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeListagem, HTTP status code, HTTP response headers (array of strings)
     */
    public function listarCteWithHttpInfo($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarCte'][0])
    {
        $request = $this->listarCteRequest($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeListagem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeListagem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeListagem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeListagem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeListagem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listarCteAsync
     *
     * Listar CT-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarCteAsync($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarCte'][0])
    {
        return $this->listarCteAsyncWithHttpInfo($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listarCteAsyncWithHttpInfo
     *
     * Listar CT-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarCteAsyncWithHttpInfo($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeListagem';
        $request = $this->listarCteRequest($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listarCte'
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listarCteRequest($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarCte'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling listarCte'
            );
        }

        // verify the required parameter 'ambiente' is set
        if ($ambiente === null || (is_array($ambiente) && count($ambiente) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ambiente when calling listarCte'
            );
        }








        $resourcePath = '/cte';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpf_cnpj,
            'cpf_cnpj', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $referencia,
            'referencia', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ambiente,
            'ambiente', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $chave,
            'chave', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serie,
            'serie', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sincronizarCte
     *
     * Sincroniza dados no CT-e a partir da SEFAZ
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeSincronizacao
     */
    public function sincronizarCte($id, string $contentType = self::contentTypes['sincronizarCte'][0])
    {
        list($response) = $this->sincronizarCteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation sincronizarCteWithHttpInfo
     *
     * Sincroniza dados no CT-e a partir da SEFAZ
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarCte'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeSincronizacao, HTTP status code, HTTP response headers (array of strings)
     */
    public function sincronizarCteWithHttpInfo($id, string $contentType = self::contentTypes['sincronizarCte'][0])
    {
        $request = $this->sincronizarCteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeSincronizacao' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeSincronizacao' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeSincronizacao', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeSincronizacao';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeSincronizacao',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sincronizarCteAsync
     *
     * Sincroniza dados no CT-e a partir da SEFAZ
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sincronizarCteAsync($id, string $contentType = self::contentTypes['sincronizarCte'][0])
    {
        return $this->sincronizarCteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sincronizarCteAsyncWithHttpInfo
     *
     * Sincroniza dados no CT-e a partir da SEFAZ
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sincronizarCteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['sincronizarCte'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeSincronizacao';
        $request = $this->sincronizarCteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sincronizarCte'
     *
     * @param  string $id ID único do CT-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarCte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sincronizarCteRequest($id, string $contentType = self::contentTypes['sincronizarCte'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling sincronizarCte'
            );
        }


        $resourcePath = '/cte/{id}/sincronizar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
