<?php
/**
 * MdfeApi
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NuvemFiscal\ApiException;
use NuvemFiscal\Configuration;
use NuvemFiscal\HeaderSelector;
use NuvemFiscal\ObjectSerializer;

/**
 * MdfeApi Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MdfeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'baixarPdfCancelamentoMdfe' => [
            'application/json',
        ],
        'baixarPdfEncerramentoMdfe' => [
            'application/json',
        ],
        'baixarPdfEventoMdfe' => [
            'application/json',
        ],
        'baixarPdfMdfe' => [
            'application/json',
        ],
        'baixarXmlCancelamentoMdfe' => [
            'application/json',
        ],
        'baixarXmlEncerramentoMdfe' => [
            'application/json',
        ],
        'baixarXmlEventoMdfe' => [
            'application/json',
        ],
        'baixarXmlMdfe' => [
            'application/json',
        ],
        'baixarXmlMdfeManifesto' => [
            'application/json',
        ],
        'baixarXmlMdfeProtocolo' => [
            'application/json',
        ],
        'cancelarMdfe' => [
            'application/json',
        ],
        'consultarCancelamentoMdfe' => [
            'application/json',
        ],
        'consultarEncerramentoMdfe' => [
            'application/json',
        ],
        'consultarEventoMdfe' => [
            'application/json',
        ],
        'consultarLoteMdfe' => [
            'application/json',
        ],
        'consultarMdfe' => [
            'application/json',
        ],
        'consultarMdfeNaoEncerrados' => [
            'application/json',
        ],
        'consultarStatusSefazMdfe' => [
            'application/json',
        ],
        'emitirLoteMdfe' => [
            'application/json',
        ],
        'emitirMdfe' => [
            'application/json',
        ],
        'encerrarMdfe' => [
            'application/json',
        ],
        'incluirCondutorMdfe' => [
            'application/json',
        ],
        'incluirDfeMdfe' => [
            'application/json',
        ],
        'listarLotesMdfe' => [
            'application/json',
        ],
        'listarMdfe' => [
            'application/json',
        ],
        'sincronizarMdfe' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation baixarPdfCancelamentoMdfe
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfCancelamentoMdfe($id, string $contentType = self::contentTypes['baixarPdfCancelamentoMdfe'][0])
    {
        list($response) = $this->baixarPdfCancelamentoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfCancelamentoMdfeWithHttpInfo
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfCancelamentoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfCancelamentoMdfe'][0])
    {
        $request = $this->baixarPdfCancelamentoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfCancelamentoMdfeAsync
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCancelamentoMdfeAsync($id, string $contentType = self::contentTypes['baixarPdfCancelamentoMdfe'][0])
    {
        return $this->baixarPdfCancelamentoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfCancelamentoMdfeAsyncWithHttpInfo
     *
     * Baixar PDF do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfCancelamentoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfCancelamentoMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfCancelamentoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfCancelamentoMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfCancelamentoMdfeRequest($id, string $contentType = self::contentTypes['baixarPdfCancelamentoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfCancelamentoMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/cancelamento/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarPdfEncerramentoMdfe
     *
     * Baixar PDF do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfEncerramentoMdfe($id, string $contentType = self::contentTypes['baixarPdfEncerramentoMdfe'][0])
    {
        list($response) = $this->baixarPdfEncerramentoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfEncerramentoMdfeWithHttpInfo
     *
     * Baixar PDF do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfEncerramentoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfEncerramentoMdfe'][0])
    {
        $request = $this->baixarPdfEncerramentoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfEncerramentoMdfeAsync
     *
     * Baixar PDF do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfEncerramentoMdfeAsync($id, string $contentType = self::contentTypes['baixarPdfEncerramentoMdfe'][0])
    {
        return $this->baixarPdfEncerramentoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfEncerramentoMdfeAsyncWithHttpInfo
     *
     * Baixar PDF do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfEncerramentoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfEncerramentoMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfEncerramentoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfEncerramentoMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfEncerramentoMdfeRequest($id, string $contentType = self::contentTypes['baixarPdfEncerramentoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfEncerramentoMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/encerramento/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarPdfEventoMdfe
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfEventoMdfe($id, string $contentType = self::contentTypes['baixarPdfEventoMdfe'][0])
    {
        list($response) = $this->baixarPdfEventoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfEventoMdfeWithHttpInfo
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfEventoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfEventoMdfe'][0])
    {
        $request = $this->baixarPdfEventoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfEventoMdfeAsync
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfEventoMdfeAsync($id, string $contentType = self::contentTypes['baixarPdfEventoMdfe'][0])
    {
        return $this->baixarPdfEventoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfEventoMdfeAsyncWithHttpInfo
     *
     * Baixar PDF do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfEventoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarPdfEventoMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfEventoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfEventoMdfe'
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfEventoMdfeRequest($id, string $contentType = self::contentTypes['baixarPdfEventoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfEventoMdfe'
            );
        }


        $resourcePath = '/mdfe/eventos/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarPdfMdfe
     *
     * Baixar PDF do DAMDFE
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarPdfMdfe($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfMdfe'][0])
    {
        list($response) = $this->baixarPdfMdfeWithHttpInfo($id, $logotipo, $contentType);
        return $response;
    }

    /**
     * Operation baixarPdfMdfeWithHttpInfo
     *
     * Baixar PDF do DAMDFE
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarPdfMdfeWithHttpInfo($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfMdfe'][0])
    {
        $request = $this->baixarPdfMdfeRequest($id, $logotipo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarPdfMdfeAsync
     *
     * Baixar PDF do DAMDFE
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfMdfeAsync($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfMdfe'][0])
    {
        return $this->baixarPdfMdfeAsyncWithHttpInfo($id, $logotipo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarPdfMdfeAsyncWithHttpInfo
     *
     * Baixar PDF do DAMDFE
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarPdfMdfeAsyncWithHttpInfo($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarPdfMdfeRequest($id, $logotipo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarPdfMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  bool $logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarPdfMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarPdfMdfeRequest($id, $logotipo = false, string $contentType = self::contentTypes['baixarPdfMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarPdfMdfe'
            );
        }



        $resourcePath = '/mdfe/{id}/pdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $logotipo,
            'logotipo', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlCancelamentoMdfe
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlCancelamentoMdfe($id, string $contentType = self::contentTypes['baixarXmlCancelamentoMdfe'][0])
    {
        list($response) = $this->baixarXmlCancelamentoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlCancelamentoMdfeWithHttpInfo
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlCancelamentoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCancelamentoMdfe'][0])
    {
        $request = $this->baixarXmlCancelamentoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlCancelamentoMdfeAsync
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCancelamentoMdfeAsync($id, string $contentType = self::contentTypes['baixarXmlCancelamentoMdfe'][0])
    {
        return $this->baixarXmlCancelamentoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlCancelamentoMdfeAsyncWithHttpInfo
     *
     * Baixar XML do cancelamento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlCancelamentoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlCancelamentoMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlCancelamentoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlCancelamentoMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlCancelamentoMdfeRequest($id, string $contentType = self::contentTypes['baixarXmlCancelamentoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlCancelamentoMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/cancelamento/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlEncerramentoMdfe
     *
     * Baixar XML do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlEncerramentoMdfe($id, string $contentType = self::contentTypes['baixarXmlEncerramentoMdfe'][0])
    {
        list($response) = $this->baixarXmlEncerramentoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlEncerramentoMdfeWithHttpInfo
     *
     * Baixar XML do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlEncerramentoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlEncerramentoMdfe'][0])
    {
        $request = $this->baixarXmlEncerramentoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlEncerramentoMdfeAsync
     *
     * Baixar XML do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlEncerramentoMdfeAsync($id, string $contentType = self::contentTypes['baixarXmlEncerramentoMdfe'][0])
    {
        return $this->baixarXmlEncerramentoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlEncerramentoMdfeAsyncWithHttpInfo
     *
     * Baixar XML do encerramento
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlEncerramentoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlEncerramentoMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlEncerramentoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlEncerramentoMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlEncerramentoMdfeRequest($id, string $contentType = self::contentTypes['baixarXmlEncerramentoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlEncerramentoMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/encerramento/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlEventoMdfe
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlEventoMdfe($id, string $contentType = self::contentTypes['baixarXmlEventoMdfe'][0])
    {
        list($response) = $this->baixarXmlEventoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlEventoMdfeWithHttpInfo
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlEventoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlEventoMdfe'][0])
    {
        $request = $this->baixarXmlEventoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlEventoMdfeAsync
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlEventoMdfeAsync($id, string $contentType = self::contentTypes['baixarXmlEventoMdfe'][0])
    {
        return $this->baixarXmlEventoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlEventoMdfeAsyncWithHttpInfo
     *
     * Baixar XML do evento
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlEventoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlEventoMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlEventoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlEventoMdfe'
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlEventoMdfeRequest($id, string $contentType = self::contentTypes['baixarXmlEventoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlEventoMdfe'
            );
        }


        $resourcePath = '/mdfe/eventos/{id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlMdfe
     *
     * Baixar XML do MDF-e processado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlMdfe($id, string $contentType = self::contentTypes['baixarXmlMdfe'][0])
    {
        list($response) = $this->baixarXmlMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlMdfeWithHttpInfo
     *
     * Baixar XML do MDF-e processado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlMdfeWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlMdfe'][0])
    {
        $request = $this->baixarXmlMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlMdfeAsync
     *
     * Baixar XML do MDF-e processado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlMdfeAsync($id, string $contentType = self::contentTypes['baixarXmlMdfe'][0])
    {
        return $this->baixarXmlMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlMdfeAsyncWithHttpInfo
     *
     * Baixar XML do MDF-e processado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlMdfe'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlMdfeRequest($id, string $contentType = self::contentTypes['baixarXmlMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlMdfeManifesto
     *
     * Baixar XML do MDF-e
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeManifesto'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlMdfeManifesto($id, string $contentType = self::contentTypes['baixarXmlMdfeManifesto'][0])
    {
        list($response) = $this->baixarXmlMdfeManifestoWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlMdfeManifestoWithHttpInfo
     *
     * Baixar XML do MDF-e
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeManifesto'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlMdfeManifestoWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlMdfeManifesto'][0])
    {
        $request = $this->baixarXmlMdfeManifestoRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlMdfeManifestoAsync
     *
     * Baixar XML do MDF-e
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeManifesto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlMdfeManifestoAsync($id, string $contentType = self::contentTypes['baixarXmlMdfeManifesto'][0])
    {
        return $this->baixarXmlMdfeManifestoAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlMdfeManifestoAsyncWithHttpInfo
     *
     * Baixar XML do MDF-e
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeManifesto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlMdfeManifestoAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlMdfeManifesto'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlMdfeManifestoRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlMdfeManifesto'
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeManifesto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlMdfeManifestoRequest($id, string $contentType = self::contentTypes['baixarXmlMdfeManifesto'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlMdfeManifesto'
            );
        }


        $resourcePath = '/mdfe/{id}/xml/manifesto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation baixarXmlMdfeProtocolo
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeProtocolo'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function baixarXmlMdfeProtocolo($id, string $contentType = self::contentTypes['baixarXmlMdfeProtocolo'][0])
    {
        list($response) = $this->baixarXmlMdfeProtocoloWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation baixarXmlMdfeProtocoloWithHttpInfo
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeProtocolo'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function baixarXmlMdfeProtocoloWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlMdfeProtocolo'][0])
    {
        $request = $this->baixarXmlMdfeProtocoloRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation baixarXmlMdfeProtocoloAsync
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeProtocolo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlMdfeProtocoloAsync($id, string $contentType = self::contentTypes['baixarXmlMdfeProtocolo'][0])
    {
        return $this->baixarXmlMdfeProtocoloAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation baixarXmlMdfeProtocoloAsyncWithHttpInfo
     *
     * Baixar XML do Protocolo da SEFAZ
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeProtocolo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function baixarXmlMdfeProtocoloAsyncWithHttpInfo($id, string $contentType = self::contentTypes['baixarXmlMdfeProtocolo'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->baixarXmlMdfeProtocoloRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'baixarXmlMdfeProtocolo'
     *
     * @param  string $id ID único da MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['baixarXmlMdfeProtocolo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function baixarXmlMdfeProtocoloRequest($id, string $contentType = self::contentTypes['baixarXmlMdfeProtocolo'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling baixarXmlMdfeProtocolo'
            );
        }


        $resourcePath = '/mdfe/{id}/xml/protocolo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelarMdfe
     *
     * Cancelar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoCancelamento $body Dados do cancelamento. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeCancelamento
     */
    public function cancelarMdfe($id, $body = null, string $contentType = self::contentTypes['cancelarMdfe'][0])
    {
        list($response) = $this->cancelarMdfeWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation cancelarMdfeWithHttpInfo
     *
     * Cancelar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoCancelamento $body Dados do cancelamento. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeCancelamento, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelarMdfeWithHttpInfo($id, $body = null, string $contentType = self::contentTypes['cancelarMdfe'][0])
    {
        $request = $this->cancelarMdfeRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeCancelamento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeCancelamento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeCancelamento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeCancelamento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeCancelamento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelarMdfeAsync
     *
     * Cancelar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoCancelamento $body Dados do cancelamento. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelarMdfeAsync($id, $body = null, string $contentType = self::contentTypes['cancelarMdfe'][0])
    {
        return $this->cancelarMdfeAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelarMdfeAsyncWithHttpInfo
     *
     * Cancelar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoCancelamento $body Dados do cancelamento. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelarMdfeAsyncWithHttpInfo($id, $body = null, string $contentType = self::contentTypes['cancelarMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeCancelamento';
        $request = $this->cancelarMdfeRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelarMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoCancelamento $body Dados do cancelamento. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelarMdfeRequest($id, $body = null, string $contentType = self::contentTypes['cancelarMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelarMdfe'
            );
        }



        $resourcePath = '/mdfe/{id}/cancelamento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarCancelamentoMdfe
     *
     * Consultar o cancelamento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeCancelamento
     */
    public function consultarCancelamentoMdfe($id, string $contentType = self::contentTypes['consultarCancelamentoMdfe'][0])
    {
        list($response) = $this->consultarCancelamentoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarCancelamentoMdfeWithHttpInfo
     *
     * Consultar o cancelamento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeCancelamento, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarCancelamentoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['consultarCancelamentoMdfe'][0])
    {
        $request = $this->consultarCancelamentoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeCancelamento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeCancelamento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeCancelamento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeCancelamento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeCancelamento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarCancelamentoMdfeAsync
     *
     * Consultar o cancelamento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCancelamentoMdfeAsync($id, string $contentType = self::contentTypes['consultarCancelamentoMdfe'][0])
    {
        return $this->consultarCancelamentoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarCancelamentoMdfeAsyncWithHttpInfo
     *
     * Consultar o cancelamento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCancelamentoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarCancelamentoMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeCancelamento';
        $request = $this->consultarCancelamentoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarCancelamentoMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCancelamentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarCancelamentoMdfeRequest($id, string $contentType = self::contentTypes['consultarCancelamentoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarCancelamentoMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/cancelamento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarEncerramentoMdfe
     *
     * Consultar encerramento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\MdfeEncerramento
     */
    public function consultarEncerramentoMdfe($id, string $contentType = self::contentTypes['consultarEncerramentoMdfe'][0])
    {
        list($response) = $this->consultarEncerramentoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarEncerramentoMdfeWithHttpInfo
     *
     * Consultar encerramento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\MdfeEncerramento, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarEncerramentoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['consultarEncerramentoMdfe'][0])
    {
        $request = $this->consultarEncerramentoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\MdfeEncerramento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\MdfeEncerramento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\MdfeEncerramento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\MdfeEncerramento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\MdfeEncerramento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarEncerramentoMdfeAsync
     *
     * Consultar encerramento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEncerramentoMdfeAsync($id, string $contentType = self::contentTypes['consultarEncerramentoMdfe'][0])
    {
        return $this->consultarEncerramentoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarEncerramentoMdfeAsyncWithHttpInfo
     *
     * Consultar encerramento do MDF-e
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEncerramentoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarEncerramentoMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\MdfeEncerramento';
        $request = $this->consultarEncerramentoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarEncerramentoMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEncerramentoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarEncerramentoMdfeRequest($id, string $contentType = self::contentTypes['consultarEncerramentoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarEncerramentoMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/encerramento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarEventoMdfe
     *
     * Consultar evento do MDF-e
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeEvento
     */
    public function consultarEventoMdfe($id, string $contentType = self::contentTypes['consultarEventoMdfe'][0])
    {
        list($response) = $this->consultarEventoMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarEventoMdfeWithHttpInfo
     *
     * Consultar evento do MDF-e
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeEvento, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarEventoMdfeWithHttpInfo($id, string $contentType = self::contentTypes['consultarEventoMdfe'][0])
    {
        $request = $this->consultarEventoMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeEvento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeEvento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeEvento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeEvento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeEvento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarEventoMdfeAsync
     *
     * Consultar evento do MDF-e
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEventoMdfeAsync($id, string $contentType = self::contentTypes['consultarEventoMdfe'][0])
    {
        return $this->consultarEventoMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarEventoMdfeAsyncWithHttpInfo
     *
     * Consultar evento do MDF-e
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarEventoMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarEventoMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeEvento';
        $request = $this->consultarEventoMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarEventoMdfe'
     *
     * @param  string $id ID único do evento gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarEventoMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarEventoMdfeRequest($id, string $contentType = self::contentTypes['consultarEventoMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarEventoMdfe'
            );
        }


        $resourcePath = '/mdfe/eventos/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarLoteMdfe
     *
     * Consultar lote de MDF-e
     *
     * @param  string $id ID único do lote gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarLoteMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeLote
     */
    public function consultarLoteMdfe($id, string $contentType = self::contentTypes['consultarLoteMdfe'][0])
    {
        list($response) = $this->consultarLoteMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarLoteMdfeWithHttpInfo
     *
     * Consultar lote de MDF-e
     *
     * @param  string $id ID único do lote gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarLoteMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeLote, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarLoteMdfeWithHttpInfo($id, string $contentType = self::contentTypes['consultarLoteMdfe'][0])
    {
        $request = $this->consultarLoteMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeLote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeLote' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeLote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeLote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeLote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarLoteMdfeAsync
     *
     * Consultar lote de MDF-e
     *
     * @param  string $id ID único do lote gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarLoteMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarLoteMdfeAsync($id, string $contentType = self::contentTypes['consultarLoteMdfe'][0])
    {
        return $this->consultarLoteMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarLoteMdfeAsyncWithHttpInfo
     *
     * Consultar lote de MDF-e
     *
     * @param  string $id ID único do lote gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarLoteMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarLoteMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarLoteMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeLote';
        $request = $this->consultarLoteMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarLoteMdfe'
     *
     * @param  string $id ID único do lote gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarLoteMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarLoteMdfeRequest($id, string $contentType = self::contentTypes['consultarLoteMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarLoteMdfe'
            );
        }


        $resourcePath = '/mdfe/lotes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarMdfe
     *
     * Consultar manifesto
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\Dfe
     */
    public function consultarMdfe($id, string $contentType = self::contentTypes['consultarMdfe'][0])
    {
        list($response) = $this->consultarMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation consultarMdfeWithHttpInfo
     *
     * Consultar manifesto
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\Dfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarMdfeWithHttpInfo($id, string $contentType = self::contentTypes['consultarMdfe'][0])
    {
        $request = $this->consultarMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\Dfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\Dfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\Dfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\Dfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\Dfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarMdfeAsync
     *
     * Consultar manifesto
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarMdfeAsync($id, string $contentType = self::contentTypes['consultarMdfe'][0])
    {
        return $this->consultarMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarMdfeAsyncWithHttpInfo
     *
     * Consultar manifesto
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['consultarMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\Dfe';
        $request = $this->consultarMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarMdfeRequest($id, string $contentType = self::contentTypes['consultarMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling consultarMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarMdfeNaoEncerrados
     *
     * Consulta MDF-e não encerrados
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfeNaoEncerrados'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\MdfeNaoEncerrados
     */
    public function consultarMdfeNaoEncerrados($cpf_cnpj, string $contentType = self::contentTypes['consultarMdfeNaoEncerrados'][0])
    {
        list($response) = $this->consultarMdfeNaoEncerradosWithHttpInfo($cpf_cnpj, $contentType);
        return $response;
    }

    /**
     * Operation consultarMdfeNaoEncerradosWithHttpInfo
     *
     * Consulta MDF-e não encerrados
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfeNaoEncerrados'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\MdfeNaoEncerrados, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarMdfeNaoEncerradosWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarMdfeNaoEncerrados'][0])
    {
        $request = $this->consultarMdfeNaoEncerradosRequest($cpf_cnpj, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\MdfeNaoEncerrados' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\MdfeNaoEncerrados' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\MdfeNaoEncerrados', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\MdfeNaoEncerrados';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\MdfeNaoEncerrados',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarMdfeNaoEncerradosAsync
     *
     * Consulta MDF-e não encerrados
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfeNaoEncerrados'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarMdfeNaoEncerradosAsync($cpf_cnpj, string $contentType = self::contentTypes['consultarMdfeNaoEncerrados'][0])
    {
        return $this->consultarMdfeNaoEncerradosAsyncWithHttpInfo($cpf_cnpj, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarMdfeNaoEncerradosAsyncWithHttpInfo
     *
     * Consulta MDF-e não encerrados
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfeNaoEncerrados'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarMdfeNaoEncerradosAsyncWithHttpInfo($cpf_cnpj, string $contentType = self::contentTypes['consultarMdfeNaoEncerrados'][0])
    {
        $returnType = '\NuvemFiscal\Model\MdfeNaoEncerrados';
        $request = $this->consultarMdfeNaoEncerradosRequest($cpf_cnpj, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarMdfeNaoEncerrados'
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarMdfeNaoEncerrados'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarMdfeNaoEncerradosRequest($cpf_cnpj, string $contentType = self::contentTypes['consultarMdfeNaoEncerrados'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarMdfeNaoEncerrados'
            );
        }


        $resourcePath = '/mdfe/nao-encerrados';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpf_cnpj,
            'cpf_cnpj', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarStatusSefazMdfe
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeSefazStatus
     */
    public function consultarStatusSefazMdfe($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazMdfe'][0])
    {
        list($response) = $this->consultarStatusSefazMdfeWithHttpInfo($cpf_cnpj, $autorizador, $contentType);
        return $response;
    }

    /**
     * Operation consultarStatusSefazMdfeWithHttpInfo
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeSefazStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarStatusSefazMdfeWithHttpInfo($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazMdfe'][0])
    {
        $request = $this->consultarStatusSefazMdfeRequest($cpf_cnpj, $autorizador, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeSefazStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeSefazStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeSefazStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeSefazStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeSefazStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarStatusSefazMdfeAsync
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarStatusSefazMdfeAsync($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazMdfe'][0])
    {
        return $this->consultarStatusSefazMdfeAsyncWithHttpInfo($cpf_cnpj, $autorizador, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarStatusSefazMdfeAsyncWithHttpInfo
     *
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarStatusSefazMdfeAsyncWithHttpInfo($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeSefazStatus';
        $request = $this->consultarStatusSefazMdfeRequest($cpf_cnpj, $autorizador, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarStatusSefazMdfe'
     *
     * @param  string $cpf_cnpj CPF/CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $autorizador Ambiente Autorizador.    Autorizadores disponíveis:  * NF-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;;  * NFC-e: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;;  * MDF-e: &#x60;SVRS&#x60;;  * CT-e: &#x60;MT&#x60;, &#x60;MS&#x60;, &#x60;MG&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;, &#x60;SVSP&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.* (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarStatusSefazMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarStatusSefazMdfeRequest($cpf_cnpj, $autorizador = null, string $contentType = self::contentTypes['consultarStatusSefazMdfe'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling consultarStatusSefazMdfe'
            );
        }



        $resourcePath = '/mdfe/sefaz/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpf_cnpj,
            'cpf_cnpj', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $autorizador,
            'autorizador', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emitirLoteMdfe
     *
     * Emitir lote de MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissaoLote $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirLoteMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeLote
     */
    public function emitirLoteMdfe($body, string $contentType = self::contentTypes['emitirLoteMdfe'][0])
    {
        list($response) = $this->emitirLoteMdfeWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation emitirLoteMdfeWithHttpInfo
     *
     * Emitir lote de MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissaoLote $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirLoteMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeLote, HTTP status code, HTTP response headers (array of strings)
     */
    public function emitirLoteMdfeWithHttpInfo($body, string $contentType = self::contentTypes['emitirLoteMdfe'][0])
    {
        $request = $this->emitirLoteMdfeRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeLote' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeLote' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeLote', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeLote';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeLote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emitirLoteMdfeAsync
     *
     * Emitir lote de MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissaoLote $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirLoteMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emitirLoteMdfeAsync($body, string $contentType = self::contentTypes['emitirLoteMdfe'][0])
    {
        return $this->emitirLoteMdfeAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emitirLoteMdfeAsyncWithHttpInfo
     *
     * Emitir lote de MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissaoLote $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirLoteMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emitirLoteMdfeAsyncWithHttpInfo($body, string $contentType = self::contentTypes['emitirLoteMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeLote';
        $request = $this->emitirLoteMdfeRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emitirLoteMdfe'
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissaoLote $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirLoteMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emitirLoteMdfeRequest($body, string $contentType = self::contentTypes['emitirLoteMdfe'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling emitirLoteMdfe'
            );
        }


        $resourcePath = '/mdfe/lotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emitirMdfe
     *
     * Emitir MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissao $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\Dfe
     */
    public function emitirMdfe($body, string $contentType = self::contentTypes['emitirMdfe'][0])
    {
        list($response) = $this->emitirMdfeWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation emitirMdfeWithHttpInfo
     *
     * Emitir MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\Dfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function emitirMdfeWithHttpInfo($body, string $contentType = self::contentTypes['emitirMdfe'][0])
    {
        $request = $this->emitirMdfeRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\Dfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\Dfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\Dfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\Dfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\Dfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emitirMdfeAsync
     *
     * Emitir MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emitirMdfeAsync($body, string $contentType = self::contentTypes['emitirMdfe'][0])
    {
        return $this->emitirMdfeAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emitirMdfeAsyncWithHttpInfo
     *
     * Emitir MDF-e
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emitirMdfeAsyncWithHttpInfo($body, string $contentType = self::contentTypes['emitirMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\Dfe';
        $request = $this->emitirMdfeRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emitirMdfe'
     *
     * @param  \NuvemFiscal\Model\MdfePedidoEmissao $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emitirMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emitirMdfeRequest($body, string $contentType = self::contentTypes['emitirMdfe'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling emitirMdfe'
            );
        }


        $resourcePath = '/mdfe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation encerrarMdfe
     *
     * Encerrar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoEncerramento $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encerrarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\MdfeEncerramento
     */
    public function encerrarMdfe($id, $body, string $contentType = self::contentTypes['encerrarMdfe'][0])
    {
        list($response) = $this->encerrarMdfeWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation encerrarMdfeWithHttpInfo
     *
     * Encerrar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoEncerramento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encerrarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\MdfeEncerramento, HTTP status code, HTTP response headers (array of strings)
     */
    public function encerrarMdfeWithHttpInfo($id, $body, string $contentType = self::contentTypes['encerrarMdfe'][0])
    {
        $request = $this->encerrarMdfeRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\MdfeEncerramento' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\MdfeEncerramento' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\MdfeEncerramento', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\MdfeEncerramento';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\MdfeEncerramento',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation encerrarMdfeAsync
     *
     * Encerrar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoEncerramento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encerrarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function encerrarMdfeAsync($id, $body, string $contentType = self::contentTypes['encerrarMdfe'][0])
    {
        return $this->encerrarMdfeAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation encerrarMdfeAsyncWithHttpInfo
     *
     * Encerrar um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoEncerramento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encerrarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function encerrarMdfeAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['encerrarMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\MdfeEncerramento';
        $request = $this->encerrarMdfeRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'encerrarMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoEncerramento $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['encerrarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function encerrarMdfeRequest($id, $body, string $contentType = self::contentTypes['encerrarMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling encerrarMdfe'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling encerrarMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/encerramento';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluirCondutorMdfe
     *
     * Incluir um condutor em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoCondutor $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCondutorMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\MdfeInclusaoCondutor
     */
    public function incluirCondutorMdfe($id, $body, string $contentType = self::contentTypes['incluirCondutorMdfe'][0])
    {
        list($response) = $this->incluirCondutorMdfeWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation incluirCondutorMdfeWithHttpInfo
     *
     * Incluir um condutor em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoCondutor $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCondutorMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\MdfeInclusaoCondutor, HTTP status code, HTTP response headers (array of strings)
     */
    public function incluirCondutorMdfeWithHttpInfo($id, $body, string $contentType = self::contentTypes['incluirCondutorMdfe'][0])
    {
        $request = $this->incluirCondutorMdfeRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\MdfeInclusaoCondutor' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\MdfeInclusaoCondutor' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\MdfeInclusaoCondutor', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\MdfeInclusaoCondutor';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\MdfeInclusaoCondutor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluirCondutorMdfeAsync
     *
     * Incluir um condutor em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoCondutor $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCondutorMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCondutorMdfeAsync($id, $body, string $contentType = self::contentTypes['incluirCondutorMdfe'][0])
    {
        return $this->incluirCondutorMdfeAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluirCondutorMdfeAsyncWithHttpInfo
     *
     * Incluir um condutor em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoCondutor $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCondutorMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCondutorMdfeAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['incluirCondutorMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\MdfeInclusaoCondutor';
        $request = $this->incluirCondutorMdfeRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluirCondutorMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoCondutor $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCondutorMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function incluirCondutorMdfeRequest($id, $body, string $contentType = self::contentTypes['incluirCondutorMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling incluirCondutorMdfe'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling incluirCondutorMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/inclusao-condutor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluirDfeMdfe
     *
     * Incluir um DF-e em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoDfe $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirDfeMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\MdfeInclusaoDfe
     */
    public function incluirDfeMdfe($id, $body, string $contentType = self::contentTypes['incluirDfeMdfe'][0])
    {
        list($response) = $this->incluirDfeMdfeWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation incluirDfeMdfeWithHttpInfo
     *
     * Incluir um DF-e em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoDfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirDfeMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\MdfeInclusaoDfe, HTTP status code, HTTP response headers (array of strings)
     */
    public function incluirDfeMdfeWithHttpInfo($id, $body, string $contentType = self::contentTypes['incluirDfeMdfe'][0])
    {
        $request = $this->incluirDfeMdfeRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\MdfeInclusaoDfe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\MdfeInclusaoDfe' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\MdfeInclusaoDfe', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\MdfeInclusaoDfe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\MdfeInclusaoDfe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluirDfeMdfeAsync
     *
     * Incluir um DF-e em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoDfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirDfeMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirDfeMdfeAsync($id, $body, string $contentType = self::contentTypes['incluirDfeMdfe'][0])
    {
        return $this->incluirDfeMdfeAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluirDfeMdfeAsyncWithHttpInfo
     *
     * Incluir um DF-e em um MDF-e autorizado
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoDfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirDfeMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirDfeMdfeAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['incluirDfeMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\MdfeInclusaoDfe';
        $request = $this->incluirDfeMdfeRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluirDfeMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  \NuvemFiscal\Model\MdfePedidoInclusaoDfe $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirDfeMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function incluirDfeMdfeRequest($id, $body, string $contentType = self::contentTypes['incluirDfeMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling incluirDfeMdfe'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling incluirDfeMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/inclusao-dfe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listarLotesMdfe
     *
     * Listar lotes de MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia referencia (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarLotesMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeLoteListagem
     */
    public function listarLotesMdfe($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, string $contentType = self::contentTypes['listarLotesMdfe'][0])
    {
        list($response) = $this->listarLotesMdfeWithHttpInfo($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $contentType);
        return $response;
    }

    /**
     * Operation listarLotesMdfeWithHttpInfo
     *
     * Listar lotes de MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarLotesMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeLoteListagem, HTTP status code, HTTP response headers (array of strings)
     */
    public function listarLotesMdfeWithHttpInfo($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, string $contentType = self::contentTypes['listarLotesMdfe'][0])
    {
        $request = $this->listarLotesMdfeRequest($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeLoteListagem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeLoteListagem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeLoteListagem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeLoteListagem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeLoteListagem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listarLotesMdfeAsync
     *
     * Listar lotes de MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarLotesMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarLotesMdfeAsync($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, string $contentType = self::contentTypes['listarLotesMdfe'][0])
    {
        return $this->listarLotesMdfeAsyncWithHttpInfo($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listarLotesMdfeAsyncWithHttpInfo
     *
     * Listar lotes de MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarLotesMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarLotesMdfeAsyncWithHttpInfo($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, string $contentType = self::contentTypes['listarLotesMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeLoteListagem';
        $request = $this->listarLotesMdfeRequest($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listarLotesMdfe'
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarLotesMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listarLotesMdfeRequest($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, string $contentType = self::contentTypes['listarLotesMdfe'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling listarLotesMdfe'
            );
        }

        // verify the required parameter 'ambiente' is set
        if ($ambiente === null || (is_array($ambiente) && count($ambiente) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ambiente when calling listarLotesMdfe'
            );
        }






        $resourcePath = '/mdfe/lotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpf_cnpj,
            'cpf_cnpj', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $referencia,
            'referencia', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ambiente,
            'ambiente', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listarMdfe
     *
     * Listar MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeListagem
     */
    public function listarMdfe($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarMdfe'][0])
    {
        list($response) = $this->listarMdfeWithHttpInfo($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType);
        return $response;
    }

    /**
     * Operation listarMdfeWithHttpInfo
     *
     * Listar MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeListagem, HTTP status code, HTTP response headers (array of strings)
     */
    public function listarMdfeWithHttpInfo($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarMdfe'][0])
    {
        $request = $this->listarMdfeRequest($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeListagem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeListagem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeListagem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeListagem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeListagem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listarMdfeAsync
     *
     * Listar MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarMdfeAsync($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarMdfe'][0])
    {
        return $this->listarMdfeAsyncWithHttpInfo($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listarMdfeAsyncWithHttpInfo
     *
     * Listar MDF-e
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listarMdfeAsyncWithHttpInfo($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeListagem';
        $request = $this->listarMdfeRequest($cpf_cnpj, $ambiente, $top, $skip, $inlinecount, $referencia, $chave, $serie, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listarMdfe'
     *
     * @param  string $cpf_cnpj Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara. (required)
     * @param  string $ambiente Identificação do Ambiente.    Valores aceitos: homologacao, producao (required)
     * @param  int $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param  int $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param  bool $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param  string $referencia Seu identificador único para o documento. (optional)
     * @param  string $chave Chave de acesso do DF-e. (optional)
     * @param  string $serie Série do DF-e. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listarMdfeRequest($cpf_cnpj, $ambiente, $top = 10, $skip = 0, $inlinecount = false, $referencia = null, $chave = null, $serie = null, string $contentType = self::contentTypes['listarMdfe'][0])
    {

        // verify the required parameter 'cpf_cnpj' is set
        if ($cpf_cnpj === null || (is_array($cpf_cnpj) && count($cpf_cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cpf_cnpj when calling listarMdfe'
            );
        }

        // verify the required parameter 'ambiente' is set
        if ($ambiente === null || (is_array($ambiente) && count($ambiente) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ambiente when calling listarMdfe'
            );
        }








        $resourcePath = '/mdfe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpf_cnpj,
            'cpf_cnpj', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $referencia,
            'referencia', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ambiente,
            'ambiente', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $chave,
            'chave', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serie,
            'serie', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sincronizarMdfe
     *
     * Sincroniza dados no MDF-e a partir da SEFAZ
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NuvemFiscal\Model\DfeSincronizacao
     */
    public function sincronizarMdfe($id, string $contentType = self::contentTypes['sincronizarMdfe'][0])
    {
        list($response) = $this->sincronizarMdfeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation sincronizarMdfeWithHttpInfo
     *
     * Sincroniza dados no MDF-e a partir da SEFAZ
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarMdfe'] to see the possible values for this operation
     *
     * @throws \NuvemFiscal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NuvemFiscal\Model\DfeSincronizacao, HTTP status code, HTTP response headers (array of strings)
     */
    public function sincronizarMdfeWithHttpInfo($id, string $contentType = self::contentTypes['sincronizarMdfe'][0])
    {
        $request = $this->sincronizarMdfeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\NuvemFiscal\Model\DfeSincronizacao' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\NuvemFiscal\Model\DfeSincronizacao' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NuvemFiscal\Model\DfeSincronizacao', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NuvemFiscal\Model\DfeSincronizacao';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NuvemFiscal\Model\DfeSincronizacao',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sincronizarMdfeAsync
     *
     * Sincroniza dados no MDF-e a partir da SEFAZ
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sincronizarMdfeAsync($id, string $contentType = self::contentTypes['sincronizarMdfe'][0])
    {
        return $this->sincronizarMdfeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sincronizarMdfeAsyncWithHttpInfo
     *
     * Sincroniza dados no MDF-e a partir da SEFAZ
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sincronizarMdfeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['sincronizarMdfe'][0])
    {
        $returnType = '\NuvemFiscal\Model\DfeSincronizacao';
        $request = $this->sincronizarMdfeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sincronizarMdfe'
     *
     * @param  string $id ID único do MDF-e gerado pela Nuvem Fiscal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sincronizarMdfe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sincronizarMdfeRequest($id, string $contentType = self::contentTypes['sincronizarMdfe'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling sincronizarMdfe'
            );
        }


        $resourcePath = '/mdfe/{id}/sincronizar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
