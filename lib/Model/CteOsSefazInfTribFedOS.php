<?php
/**
 * CteOsSefazInfTribFedOS
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * CteOsSefazInfTribFedOS Class Doc Comment
 *
 * @category Class
 * @description Informações dos tributos federais.  Grupo a ser informado nas prestações interestaduais para consumidor final, não contribuinte do ICMS.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CteOsSefazInfTribFedOS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CteOsSefazInfTribFedOS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'v_pis' => 'float',
        'v_cofins' => 'float',
        'v_ir' => 'float',
        'v_inss' => 'float',
        'v_csll' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'v_pis' => null,
        'v_cofins' => null,
        'v_ir' => null,
        'v_inss' => null,
        'v_csll' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'v_pis' => true,
        'v_cofins' => true,
        'v_ir' => true,
        'v_inss' => true,
        'v_csll' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v_pis' => 'vPIS',
        'v_cofins' => 'vCOFINS',
        'v_ir' => 'vIR',
        'v_inss' => 'vINSS',
        'v_csll' => 'vCSLL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v_pis' => 'setVPis',
        'v_cofins' => 'setVCofins',
        'v_ir' => 'setVIr',
        'v_inss' => 'setVInss',
        'v_csll' => 'setVCsll'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v_pis' => 'getVPis',
        'v_cofins' => 'getVCofins',
        'v_ir' => 'getVIr',
        'v_inss' => 'getVInss',
        'v_csll' => 'getVCsll'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('v_pis', $data ?? [], null);
        $this->setIfExists('v_cofins', $data ?? [], null);
        $this->setIfExists('v_ir', $data ?? [], null);
        $this->setIfExists('v_inss', $data ?? [], null);
        $this->setIfExists('v_csll', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['v_pis']) && ($this->container['v_pis'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_pis', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_cofins']) && ($this->container['v_cofins'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_cofins', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_ir']) && ($this->container['v_ir'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_ir', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_inss']) && ($this->container['v_inss'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_inss', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_csll']) && ($this->container['v_csll'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_csll', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v_pis
     *
     * @return float|null
     */
    public function getVPis()
    {
        return $this->container['v_pis'];
    }

    /**
     * Sets v_pis
     *
     * @param float|null $v_pis Valor do PIS.
     *
     * @return self
     */
    public function setVPis($v_pis)
    {
        if (is_null($v_pis)) {
            array_push($this->openAPINullablesSetToNull, 'v_pis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_pis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_pis) && ($v_pis < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_pis when calling CteOsSefazInfTribFedOS., must be bigger than or equal to 0.');
        }

        $this->container['v_pis'] = $v_pis;

        return $this;
    }

    /**
     * Gets v_cofins
     *
     * @return float|null
     */
    public function getVCofins()
    {
        return $this->container['v_cofins'];
    }

    /**
     * Sets v_cofins
     *
     * @param float|null $v_cofins Valor COFINS.
     *
     * @return self
     */
    public function setVCofins($v_cofins)
    {
        if (is_null($v_cofins)) {
            array_push($this->openAPINullablesSetToNull, 'v_cofins');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_cofins', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_cofins) && ($v_cofins < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_cofins when calling CteOsSefazInfTribFedOS., must be bigger than or equal to 0.');
        }

        $this->container['v_cofins'] = $v_cofins;

        return $this;
    }

    /**
     * Gets v_ir
     *
     * @return float|null
     */
    public function getVIr()
    {
        return $this->container['v_ir'];
    }

    /**
     * Sets v_ir
     *
     * @param float|null $v_ir Valor de Imposto de Renda.
     *
     * @return self
     */
    public function setVIr($v_ir)
    {
        if (is_null($v_ir)) {
            array_push($this->openAPINullablesSetToNull, 'v_ir');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_ir', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_ir) && ($v_ir < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_ir when calling CteOsSefazInfTribFedOS., must be bigger than or equal to 0.');
        }

        $this->container['v_ir'] = $v_ir;

        return $this;
    }

    /**
     * Gets v_inss
     *
     * @return float|null
     */
    public function getVInss()
    {
        return $this->container['v_inss'];
    }

    /**
     * Sets v_inss
     *
     * @param float|null $v_inss Valor do INSS.
     *
     * @return self
     */
    public function setVInss($v_inss)
    {
        if (is_null($v_inss)) {
            array_push($this->openAPINullablesSetToNull, 'v_inss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_inss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_inss) && ($v_inss < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_inss when calling CteOsSefazInfTribFedOS., must be bigger than or equal to 0.');
        }

        $this->container['v_inss'] = $v_inss;

        return $this;
    }

    /**
     * Gets v_csll
     *
     * @return float|null
     */
    public function getVCsll()
    {
        return $this->container['v_csll'];
    }

    /**
     * Sets v_csll
     *
     * @param float|null $v_csll Valor do CSLL.
     *
     * @return self
     */
    public function setVCsll($v_csll)
    {
        if (is_null($v_csll)) {
            array_push($this->openAPINullablesSetToNull, 'v_csll');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_csll', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_csll) && ($v_csll < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_csll when calling CteOsSefazInfTribFedOS., must be bigger than or equal to 0.');
        }

        $this->container['v_csll'] = $v_csll;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


