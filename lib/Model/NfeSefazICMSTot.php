<?php
/**
 * NfeSefazICMSTot
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazICMSTot Class Doc Comment
 *
 * @category Class
 * @description Totais referentes ao ICMS.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazICMSTot implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazICMSTot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'v_bc' => 'float',
        'v_icms' => 'float',
        'v_icms_deson' => 'float',
        'v_fcpuf_dest' => 'float',
        'v_icmsuf_dest' => 'float',
        'v_icmsuf_remet' => 'float',
        'v_fcp' => 'float',
        'v_bcst' => 'float',
        'v_st' => 'float',
        'v_fcpst' => 'float',
        'v_fcpst_ret' => 'float',
        'v_icms_mono' => 'float',
        'v_icms_mono_reten' => 'float',
        'v_icms_mono_ret' => 'float',
        'v_prod' => 'float',
        'v_frete' => 'float',
        'v_seg' => 'float',
        'v_desc' => 'float',
        'v_ii' => 'float',
        'v_ipi' => 'float',
        'v_ipi_devol' => 'float',
        'v_pis' => 'float',
        'v_cofins' => 'float',
        'v_outro' => 'float',
        'v_nf' => 'float',
        'v_tot_trib' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'v_bc' => null,
        'v_icms' => null,
        'v_icms_deson' => null,
        'v_fcpuf_dest' => null,
        'v_icmsuf_dest' => null,
        'v_icmsuf_remet' => null,
        'v_fcp' => null,
        'v_bcst' => null,
        'v_st' => null,
        'v_fcpst' => null,
        'v_fcpst_ret' => null,
        'v_icms_mono' => null,
        'v_icms_mono_reten' => null,
        'v_icms_mono_ret' => null,
        'v_prod' => null,
        'v_frete' => null,
        'v_seg' => null,
        'v_desc' => null,
        'v_ii' => null,
        'v_ipi' => null,
        'v_ipi_devol' => null,
        'v_pis' => null,
        'v_cofins' => null,
        'v_outro' => null,
        'v_nf' => null,
        'v_tot_trib' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'v_bc' => false,
		'v_icms' => false,
		'v_icms_deson' => false,
		'v_fcpuf_dest' => false,
		'v_icmsuf_dest' => false,
		'v_icmsuf_remet' => false,
		'v_fcp' => false,
		'v_bcst' => false,
		'v_st' => false,
		'v_fcpst' => false,
		'v_fcpst_ret' => false,
		'v_icms_mono' => false,
		'v_icms_mono_reten' => false,
		'v_icms_mono_ret' => false,
		'v_prod' => false,
		'v_frete' => false,
		'v_seg' => false,
		'v_desc' => false,
		'v_ii' => false,
		'v_ipi' => false,
		'v_ipi_devol' => false,
		'v_pis' => false,
		'v_cofins' => false,
		'v_outro' => false,
		'v_nf' => false,
		'v_tot_trib' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v_bc' => 'vBC',
        'v_icms' => 'vICMS',
        'v_icms_deson' => 'vICMSDeson',
        'v_fcpuf_dest' => 'vFCPUFDest',
        'v_icmsuf_dest' => 'vICMSUFDest',
        'v_icmsuf_remet' => 'vICMSUFRemet',
        'v_fcp' => 'vFCP',
        'v_bcst' => 'vBCST',
        'v_st' => 'vST',
        'v_fcpst' => 'vFCPST',
        'v_fcpst_ret' => 'vFCPSTRet',
        'v_icms_mono' => 'vICMSMono',
        'v_icms_mono_reten' => 'vICMSMonoReten',
        'v_icms_mono_ret' => 'vICMSMonoRet',
        'v_prod' => 'vProd',
        'v_frete' => 'vFrete',
        'v_seg' => 'vSeg',
        'v_desc' => 'vDesc',
        'v_ii' => 'vII',
        'v_ipi' => 'vIPI',
        'v_ipi_devol' => 'vIPIDevol',
        'v_pis' => 'vPIS',
        'v_cofins' => 'vCOFINS',
        'v_outro' => 'vOutro',
        'v_nf' => 'vNF',
        'v_tot_trib' => 'vTotTrib'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v_bc' => 'setVBc',
        'v_icms' => 'setVIcms',
        'v_icms_deson' => 'setVIcmsDeson',
        'v_fcpuf_dest' => 'setVFcpufDest',
        'v_icmsuf_dest' => 'setVIcmsufDest',
        'v_icmsuf_remet' => 'setVIcmsufRemet',
        'v_fcp' => 'setVFcp',
        'v_bcst' => 'setVBcst',
        'v_st' => 'setVSt',
        'v_fcpst' => 'setVFcpst',
        'v_fcpst_ret' => 'setVFcpstRet',
        'v_icms_mono' => 'setVIcmsMono',
        'v_icms_mono_reten' => 'setVIcmsMonoReten',
        'v_icms_mono_ret' => 'setVIcmsMonoRet',
        'v_prod' => 'setVProd',
        'v_frete' => 'setVFrete',
        'v_seg' => 'setVSeg',
        'v_desc' => 'setVDesc',
        'v_ii' => 'setVIi',
        'v_ipi' => 'setVIpi',
        'v_ipi_devol' => 'setVIpiDevol',
        'v_pis' => 'setVPis',
        'v_cofins' => 'setVCofins',
        'v_outro' => 'setVOutro',
        'v_nf' => 'setVNf',
        'v_tot_trib' => 'setVTotTrib'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v_bc' => 'getVBc',
        'v_icms' => 'getVIcms',
        'v_icms_deson' => 'getVIcmsDeson',
        'v_fcpuf_dest' => 'getVFcpufDest',
        'v_icmsuf_dest' => 'getVIcmsufDest',
        'v_icmsuf_remet' => 'getVIcmsufRemet',
        'v_fcp' => 'getVFcp',
        'v_bcst' => 'getVBcst',
        'v_st' => 'getVSt',
        'v_fcpst' => 'getVFcpst',
        'v_fcpst_ret' => 'getVFcpstRet',
        'v_icms_mono' => 'getVIcmsMono',
        'v_icms_mono_reten' => 'getVIcmsMonoReten',
        'v_icms_mono_ret' => 'getVIcmsMonoRet',
        'v_prod' => 'getVProd',
        'v_frete' => 'getVFrete',
        'v_seg' => 'getVSeg',
        'v_desc' => 'getVDesc',
        'v_ii' => 'getVIi',
        'v_ipi' => 'getVIpi',
        'v_ipi_devol' => 'getVIpiDevol',
        'v_pis' => 'getVPis',
        'v_cofins' => 'getVCofins',
        'v_outro' => 'getVOutro',
        'v_nf' => 'getVNf',
        'v_tot_trib' => 'getVTotTrib'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('v_bc', $data ?? [], null);
        $this->setIfExists('v_icms', $data ?? [], null);
        $this->setIfExists('v_icms_deson', $data ?? [], null);
        $this->setIfExists('v_fcpuf_dest', $data ?? [], null);
        $this->setIfExists('v_icmsuf_dest', $data ?? [], null);
        $this->setIfExists('v_icmsuf_remet', $data ?? [], null);
        $this->setIfExists('v_fcp', $data ?? [], null);
        $this->setIfExists('v_bcst', $data ?? [], null);
        $this->setIfExists('v_st', $data ?? [], null);
        $this->setIfExists('v_fcpst', $data ?? [], null);
        $this->setIfExists('v_fcpst_ret', $data ?? [], null);
        $this->setIfExists('v_icms_mono', $data ?? [], null);
        $this->setIfExists('v_icms_mono_reten', $data ?? [], null);
        $this->setIfExists('v_icms_mono_ret', $data ?? [], null);
        $this->setIfExists('v_prod', $data ?? [], null);
        $this->setIfExists('v_frete', $data ?? [], null);
        $this->setIfExists('v_seg', $data ?? [], null);
        $this->setIfExists('v_desc', $data ?? [], null);
        $this->setIfExists('v_ii', $data ?? [], null);
        $this->setIfExists('v_ipi', $data ?? [], null);
        $this->setIfExists('v_ipi_devol', $data ?? [], null);
        $this->setIfExists('v_pis', $data ?? [], null);
        $this->setIfExists('v_cofins', $data ?? [], null);
        $this->setIfExists('v_outro', $data ?? [], null);
        $this->setIfExists('v_nf', $data ?? [], null);
        $this->setIfExists('v_tot_trib', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['v_bc'] === null) {
            $invalidProperties[] = "'v_bc' can't be null";
        }
        if ($this->container['v_icms'] === null) {
            $invalidProperties[] = "'v_icms' can't be null";
        }
        if ($this->container['v_icms_deson'] === null) {
            $invalidProperties[] = "'v_icms_deson' can't be null";
        }
        if ($this->container['v_fcp'] === null) {
            $invalidProperties[] = "'v_fcp' can't be null";
        }
        if ($this->container['v_bcst'] === null) {
            $invalidProperties[] = "'v_bcst' can't be null";
        }
        if ($this->container['v_st'] === null) {
            $invalidProperties[] = "'v_st' can't be null";
        }
        if ($this->container['v_fcpst'] === null) {
            $invalidProperties[] = "'v_fcpst' can't be null";
        }
        if ($this->container['v_fcpst_ret'] === null) {
            $invalidProperties[] = "'v_fcpst_ret' can't be null";
        }
        if ($this->container['v_prod'] === null) {
            $invalidProperties[] = "'v_prod' can't be null";
        }
        if ($this->container['v_frete'] === null) {
            $invalidProperties[] = "'v_frete' can't be null";
        }
        if ($this->container['v_seg'] === null) {
            $invalidProperties[] = "'v_seg' can't be null";
        }
        if ($this->container['v_desc'] === null) {
            $invalidProperties[] = "'v_desc' can't be null";
        }
        if ($this->container['v_ii'] === null) {
            $invalidProperties[] = "'v_ii' can't be null";
        }
        if ($this->container['v_ipi'] === null) {
            $invalidProperties[] = "'v_ipi' can't be null";
        }
        if ($this->container['v_ipi_devol'] === null) {
            $invalidProperties[] = "'v_ipi_devol' can't be null";
        }
        if ($this->container['v_pis'] === null) {
            $invalidProperties[] = "'v_pis' can't be null";
        }
        if ($this->container['v_cofins'] === null) {
            $invalidProperties[] = "'v_cofins' can't be null";
        }
        if ($this->container['v_outro'] === null) {
            $invalidProperties[] = "'v_outro' can't be null";
        }
        if ($this->container['v_nf'] === null) {
            $invalidProperties[] = "'v_nf' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v_bc
     *
     * @return float
     */
    public function getVBc()
    {
        return $this->container['v_bc'];
    }

    /**
     * Sets v_bc
     *
     * @param float $v_bc BC do ICMS.
     *
     * @return self
     */
    public function setVBc($v_bc)
    {
        if (is_null($v_bc)) {
            throw new \InvalidArgumentException('non-nullable v_bc cannot be null');
        }
        $this->container['v_bc'] = $v_bc;

        return $this;
    }

    /**
     * Gets v_icms
     *
     * @return float
     */
    public function getVIcms()
    {
        return $this->container['v_icms'];
    }

    /**
     * Sets v_icms
     *
     * @param float $v_icms Valor Total do ICMS.
     *
     * @return self
     */
    public function setVIcms($v_icms)
    {
        if (is_null($v_icms)) {
            throw new \InvalidArgumentException('non-nullable v_icms cannot be null');
        }
        $this->container['v_icms'] = $v_icms;

        return $this;
    }

    /**
     * Gets v_icms_deson
     *
     * @return float
     */
    public function getVIcmsDeson()
    {
        return $this->container['v_icms_deson'];
    }

    /**
     * Sets v_icms_deson
     *
     * @param float $v_icms_deson Valor Total do ICMS desonerado.
     *
     * @return self
     */
    public function setVIcmsDeson($v_icms_deson)
    {
        if (is_null($v_icms_deson)) {
            throw new \InvalidArgumentException('non-nullable v_icms_deson cannot be null');
        }
        $this->container['v_icms_deson'] = $v_icms_deson;

        return $this;
    }

    /**
     * Gets v_fcpuf_dest
     *
     * @return float|null
     */
    public function getVFcpufDest()
    {
        return $this->container['v_fcpuf_dest'];
    }

    /**
     * Sets v_fcpuf_dest
     *
     * @param float|null $v_fcpuf_dest Valor total do ICMS relativo ao Fundo de Combate à Pobreza (FCP) para a UF de destino.
     *
     * @return self
     */
    public function setVFcpufDest($v_fcpuf_dest)
    {
        if (is_null($v_fcpuf_dest)) {
            throw new \InvalidArgumentException('non-nullable v_fcpuf_dest cannot be null');
        }
        $this->container['v_fcpuf_dest'] = $v_fcpuf_dest;

        return $this;
    }

    /**
     * Gets v_icmsuf_dest
     *
     * @return float|null
     */
    public function getVIcmsufDest()
    {
        return $this->container['v_icmsuf_dest'];
    }

    /**
     * Sets v_icmsuf_dest
     *
     * @param float|null $v_icmsuf_dest Valor total do ICMS de partilha para a UF do destinatário.
     *
     * @return self
     */
    public function setVIcmsufDest($v_icmsuf_dest)
    {
        if (is_null($v_icmsuf_dest)) {
            throw new \InvalidArgumentException('non-nullable v_icmsuf_dest cannot be null');
        }
        $this->container['v_icmsuf_dest'] = $v_icmsuf_dest;

        return $this;
    }

    /**
     * Gets v_icmsuf_remet
     *
     * @return float|null
     */
    public function getVIcmsufRemet()
    {
        return $this->container['v_icmsuf_remet'];
    }

    /**
     * Sets v_icmsuf_remet
     *
     * @param float|null $v_icmsuf_remet Valor total do ICMS de partilha para a UF do remetente.
     *
     * @return self
     */
    public function setVIcmsufRemet($v_icmsuf_remet)
    {
        if (is_null($v_icmsuf_remet)) {
            throw new \InvalidArgumentException('non-nullable v_icmsuf_remet cannot be null');
        }
        $this->container['v_icmsuf_remet'] = $v_icmsuf_remet;

        return $this;
    }

    /**
     * Gets v_fcp
     *
     * @return float
     */
    public function getVFcp()
    {
        return $this->container['v_fcp'];
    }

    /**
     * Sets v_fcp
     *
     * @param float $v_fcp Valor Total do FCP (Fundo de Combate à Pobreza).
     *
     * @return self
     */
    public function setVFcp($v_fcp)
    {
        if (is_null($v_fcp)) {
            throw new \InvalidArgumentException('non-nullable v_fcp cannot be null');
        }
        $this->container['v_fcp'] = $v_fcp;

        return $this;
    }

    /**
     * Gets v_bcst
     *
     * @return float
     */
    public function getVBcst()
    {
        return $this->container['v_bcst'];
    }

    /**
     * Sets v_bcst
     *
     * @param float $v_bcst BC do ICMS ST.
     *
     * @return self
     */
    public function setVBcst($v_bcst)
    {
        if (is_null($v_bcst)) {
            throw new \InvalidArgumentException('non-nullable v_bcst cannot be null');
        }
        $this->container['v_bcst'] = $v_bcst;

        return $this;
    }

    /**
     * Gets v_st
     *
     * @return float
     */
    public function getVSt()
    {
        return $this->container['v_st'];
    }

    /**
     * Sets v_st
     *
     * @param float $v_st Valor Total do ICMS ST.
     *
     * @return self
     */
    public function setVSt($v_st)
    {
        if (is_null($v_st)) {
            throw new \InvalidArgumentException('non-nullable v_st cannot be null');
        }
        $this->container['v_st'] = $v_st;

        return $this;
    }

    /**
     * Gets v_fcpst
     *
     * @return float
     */
    public function getVFcpst()
    {
        return $this->container['v_fcpst'];
    }

    /**
     * Sets v_fcpst
     *
     * @param float $v_fcpst Valor Total do FCP (Fundo de Combate à Pobreza) retido por substituição tributária.
     *
     * @return self
     */
    public function setVFcpst($v_fcpst)
    {
        if (is_null($v_fcpst)) {
            throw new \InvalidArgumentException('non-nullable v_fcpst cannot be null');
        }
        $this->container['v_fcpst'] = $v_fcpst;

        return $this;
    }

    /**
     * Gets v_fcpst_ret
     *
     * @return float
     */
    public function getVFcpstRet()
    {
        return $this->container['v_fcpst_ret'];
    }

    /**
     * Sets v_fcpst_ret
     *
     * @param float $v_fcpst_ret Valor Total do FCP (Fundo de Combate à Pobreza) retido anteriormente por substituição tributária.
     *
     * @return self
     */
    public function setVFcpstRet($v_fcpst_ret)
    {
        if (is_null($v_fcpst_ret)) {
            throw new \InvalidArgumentException('non-nullable v_fcpst_ret cannot be null');
        }
        $this->container['v_fcpst_ret'] = $v_fcpst_ret;

        return $this;
    }

    /**
     * Gets v_icms_mono
     *
     * @return float|null
     */
    public function getVIcmsMono()
    {
        return $this->container['v_icms_mono'];
    }

    /**
     * Sets v_icms_mono
     *
     * @param float|null $v_icms_mono Valor total do ICMS monofásico próprio.
     *
     * @return self
     */
    public function setVIcmsMono($v_icms_mono)
    {
        if (is_null($v_icms_mono)) {
            throw new \InvalidArgumentException('non-nullable v_icms_mono cannot be null');
        }
        $this->container['v_icms_mono'] = $v_icms_mono;

        return $this;
    }

    /**
     * Gets v_icms_mono_reten
     *
     * @return float|null
     */
    public function getVIcmsMonoReten()
    {
        return $this->container['v_icms_mono_reten'];
    }

    /**
     * Sets v_icms_mono_reten
     *
     * @param float|null $v_icms_mono_reten Valor total do ICMS monofásico sujeito a retenção.
     *
     * @return self
     */
    public function setVIcmsMonoReten($v_icms_mono_reten)
    {
        if (is_null($v_icms_mono_reten)) {
            throw new \InvalidArgumentException('non-nullable v_icms_mono_reten cannot be null');
        }
        $this->container['v_icms_mono_reten'] = $v_icms_mono_reten;

        return $this;
    }

    /**
     * Gets v_icms_mono_ret
     *
     * @return float|null
     */
    public function getVIcmsMonoRet()
    {
        return $this->container['v_icms_mono_ret'];
    }

    /**
     * Sets v_icms_mono_ret
     *
     * @param float|null $v_icms_mono_ret Valor do ICMS monofásico retido anteriormente.
     *
     * @return self
     */
    public function setVIcmsMonoRet($v_icms_mono_ret)
    {
        if (is_null($v_icms_mono_ret)) {
            throw new \InvalidArgumentException('non-nullable v_icms_mono_ret cannot be null');
        }
        $this->container['v_icms_mono_ret'] = $v_icms_mono_ret;

        return $this;
    }

    /**
     * Gets v_prod
     *
     * @return float
     */
    public function getVProd()
    {
        return $this->container['v_prod'];
    }

    /**
     * Sets v_prod
     *
     * @param float $v_prod Valor Total dos produtos e serviços.
     *
     * @return self
     */
    public function setVProd($v_prod)
    {
        if (is_null($v_prod)) {
            throw new \InvalidArgumentException('non-nullable v_prod cannot be null');
        }
        $this->container['v_prod'] = $v_prod;

        return $this;
    }

    /**
     * Gets v_frete
     *
     * @return float
     */
    public function getVFrete()
    {
        return $this->container['v_frete'];
    }

    /**
     * Sets v_frete
     *
     * @param float $v_frete Valor Total do Frete.
     *
     * @return self
     */
    public function setVFrete($v_frete)
    {
        if (is_null($v_frete)) {
            throw new \InvalidArgumentException('non-nullable v_frete cannot be null');
        }
        $this->container['v_frete'] = $v_frete;

        return $this;
    }

    /**
     * Gets v_seg
     *
     * @return float
     */
    public function getVSeg()
    {
        return $this->container['v_seg'];
    }

    /**
     * Sets v_seg
     *
     * @param float $v_seg Valor Total do Seguro.
     *
     * @return self
     */
    public function setVSeg($v_seg)
    {
        if (is_null($v_seg)) {
            throw new \InvalidArgumentException('non-nullable v_seg cannot be null');
        }
        $this->container['v_seg'] = $v_seg;

        return $this;
    }

    /**
     * Gets v_desc
     *
     * @return float
     */
    public function getVDesc()
    {
        return $this->container['v_desc'];
    }

    /**
     * Sets v_desc
     *
     * @param float $v_desc Valor Total do Desconto.
     *
     * @return self
     */
    public function setVDesc($v_desc)
    {
        if (is_null($v_desc)) {
            throw new \InvalidArgumentException('non-nullable v_desc cannot be null');
        }
        $this->container['v_desc'] = $v_desc;

        return $this;
    }

    /**
     * Gets v_ii
     *
     * @return float
     */
    public function getVIi()
    {
        return $this->container['v_ii'];
    }

    /**
     * Sets v_ii
     *
     * @param float $v_ii Valor Total do II.
     *
     * @return self
     */
    public function setVIi($v_ii)
    {
        if (is_null($v_ii)) {
            throw new \InvalidArgumentException('non-nullable v_ii cannot be null');
        }
        $this->container['v_ii'] = $v_ii;

        return $this;
    }

    /**
     * Gets v_ipi
     *
     * @return float
     */
    public function getVIpi()
    {
        return $this->container['v_ipi'];
    }

    /**
     * Sets v_ipi
     *
     * @param float $v_ipi Valor Total do IPI.
     *
     * @return self
     */
    public function setVIpi($v_ipi)
    {
        if (is_null($v_ipi)) {
            throw new \InvalidArgumentException('non-nullable v_ipi cannot be null');
        }
        $this->container['v_ipi'] = $v_ipi;

        return $this;
    }

    /**
     * Gets v_ipi_devol
     *
     * @return float
     */
    public function getVIpiDevol()
    {
        return $this->container['v_ipi_devol'];
    }

    /**
     * Sets v_ipi_devol
     *
     * @param float $v_ipi_devol Valor Total do IPI devolvido. Deve ser informado quando preenchido o Grupo Tributos Devolvidos na emissão de nota finNFe=4 (devolução) nas operações com não contribuintes do IPI. Corresponde ao total da soma dos campos id: UA04.
     *
     * @return self
     */
    public function setVIpiDevol($v_ipi_devol)
    {
        if (is_null($v_ipi_devol)) {
            throw new \InvalidArgumentException('non-nullable v_ipi_devol cannot be null');
        }
        $this->container['v_ipi_devol'] = $v_ipi_devol;

        return $this;
    }

    /**
     * Gets v_pis
     *
     * @return float
     */
    public function getVPis()
    {
        return $this->container['v_pis'];
    }

    /**
     * Sets v_pis
     *
     * @param float $v_pis Valor do PIS.
     *
     * @return self
     */
    public function setVPis($v_pis)
    {
        if (is_null($v_pis)) {
            throw new \InvalidArgumentException('non-nullable v_pis cannot be null');
        }
        $this->container['v_pis'] = $v_pis;

        return $this;
    }

    /**
     * Gets v_cofins
     *
     * @return float
     */
    public function getVCofins()
    {
        return $this->container['v_cofins'];
    }

    /**
     * Sets v_cofins
     *
     * @param float $v_cofins Valor do COFINS.
     *
     * @return self
     */
    public function setVCofins($v_cofins)
    {
        if (is_null($v_cofins)) {
            throw new \InvalidArgumentException('non-nullable v_cofins cannot be null');
        }
        $this->container['v_cofins'] = $v_cofins;

        return $this;
    }

    /**
     * Gets v_outro
     *
     * @return float
     */
    public function getVOutro()
    {
        return $this->container['v_outro'];
    }

    /**
     * Sets v_outro
     *
     * @param float $v_outro Outras Despesas acessórias.
     *
     * @return self
     */
    public function setVOutro($v_outro)
    {
        if (is_null($v_outro)) {
            throw new \InvalidArgumentException('non-nullable v_outro cannot be null');
        }
        $this->container['v_outro'] = $v_outro;

        return $this;
    }

    /**
     * Gets v_nf
     *
     * @return float
     */
    public function getVNf()
    {
        return $this->container['v_nf'];
    }

    /**
     * Sets v_nf
     *
     * @param float $v_nf Valor Total da NF-e.
     *
     * @return self
     */
    public function setVNf($v_nf)
    {
        if (is_null($v_nf)) {
            throw new \InvalidArgumentException('non-nullable v_nf cannot be null');
        }
        $this->container['v_nf'] = $v_nf;

        return $this;
    }

    /**
     * Gets v_tot_trib
     *
     * @return float|null
     */
    public function getVTotTrib()
    {
        return $this->container['v_tot_trib'];
    }

    /**
     * Sets v_tot_trib
     *
     * @param float|null $v_tot_trib Valor estimado total de impostos federais, estaduais e municipais.
     *
     * @return self
     */
    public function setVTotTrib($v_tot_trib)
    {
        if (is_null($v_tot_trib)) {
            throw new \InvalidArgumentException('non-nullable v_tot_trib cannot be null');
        }
        $this->container['v_tot_trib'] = $v_tot_trib;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


