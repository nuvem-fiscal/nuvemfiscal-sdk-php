<?php
/**
 * NfeSefazVeicProd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazVeicProd Class Doc Comment
 *
 * @category Class
 * @description Veículos novos.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazVeicProd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazVeicProd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tp_op' => 'int',
        'chassi' => 'string',
        'c_cor' => 'string',
        'x_cor' => 'string',
        'pot' => 'string',
        'cilin' => 'string',
        'peso_l' => 'string',
        'peso_b' => 'string',
        'n_serie' => 'string',
        'tp_comb' => 'string',
        'n_motor' => 'string',
        'cmt' => 'string',
        'dist' => 'string',
        'ano_mod' => 'int',
        'ano_fab' => 'int',
        'tp_pint' => 'string',
        'tp_veic' => 'int',
        'esp_veic' => 'int',
        'vin' => 'string',
        'cond_veic' => 'int',
        'c_mod' => 'string',
        'c_cor_denatran' => 'string',
        'lota' => 'int',
        'tp_rest' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tp_op' => null,
        'chassi' => null,
        'c_cor' => null,
        'x_cor' => null,
        'pot' => null,
        'cilin' => null,
        'peso_l' => null,
        'peso_b' => null,
        'n_serie' => null,
        'tp_comb' => null,
        'n_motor' => null,
        'cmt' => null,
        'dist' => null,
        'ano_mod' => null,
        'ano_fab' => null,
        'tp_pint' => null,
        'tp_veic' => null,
        'esp_veic' => null,
        'vin' => null,
        'cond_veic' => null,
        'c_mod' => null,
        'c_cor_denatran' => null,
        'lota' => null,
        'tp_rest' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tp_op' => true,
		'chassi' => true,
		'c_cor' => true,
		'x_cor' => true,
		'pot' => true,
		'cilin' => true,
		'peso_l' => true,
		'peso_b' => true,
		'n_serie' => true,
		'tp_comb' => true,
		'n_motor' => true,
		'cmt' => true,
		'dist' => true,
		'ano_mod' => true,
		'ano_fab' => true,
		'tp_pint' => true,
		'tp_veic' => true,
		'esp_veic' => true,
		'vin' => true,
		'cond_veic' => true,
		'c_mod' => true,
		'c_cor_denatran' => true,
		'lota' => true,
		'tp_rest' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tp_op' => 'tpOp',
        'chassi' => 'chassi',
        'c_cor' => 'cCor',
        'x_cor' => 'xCor',
        'pot' => 'pot',
        'cilin' => 'cilin',
        'peso_l' => 'pesoL',
        'peso_b' => 'pesoB',
        'n_serie' => 'nSerie',
        'tp_comb' => 'tpComb',
        'n_motor' => 'nMotor',
        'cmt' => 'CMT',
        'dist' => 'dist',
        'ano_mod' => 'anoMod',
        'ano_fab' => 'anoFab',
        'tp_pint' => 'tpPint',
        'tp_veic' => 'tpVeic',
        'esp_veic' => 'espVeic',
        'vin' => 'VIN',
        'cond_veic' => 'condVeic',
        'c_mod' => 'cMod',
        'c_cor_denatran' => 'cCorDENATRAN',
        'lota' => 'lota',
        'tp_rest' => 'tpRest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tp_op' => 'setTpOp',
        'chassi' => 'setChassi',
        'c_cor' => 'setCCor',
        'x_cor' => 'setXCor',
        'pot' => 'setPot',
        'cilin' => 'setCilin',
        'peso_l' => 'setPesoL',
        'peso_b' => 'setPesoB',
        'n_serie' => 'setNSerie',
        'tp_comb' => 'setTpComb',
        'n_motor' => 'setNMotor',
        'cmt' => 'setCmt',
        'dist' => 'setDist',
        'ano_mod' => 'setAnoMod',
        'ano_fab' => 'setAnoFab',
        'tp_pint' => 'setTpPint',
        'tp_veic' => 'setTpVeic',
        'esp_veic' => 'setEspVeic',
        'vin' => 'setVin',
        'cond_veic' => 'setCondVeic',
        'c_mod' => 'setCMod',
        'c_cor_denatran' => 'setCCorDenatran',
        'lota' => 'setLota',
        'tp_rest' => 'setTpRest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tp_op' => 'getTpOp',
        'chassi' => 'getChassi',
        'c_cor' => 'getCCor',
        'x_cor' => 'getXCor',
        'pot' => 'getPot',
        'cilin' => 'getCilin',
        'peso_l' => 'getPesoL',
        'peso_b' => 'getPesoB',
        'n_serie' => 'getNSerie',
        'tp_comb' => 'getTpComb',
        'n_motor' => 'getNMotor',
        'cmt' => 'getCmt',
        'dist' => 'getDist',
        'ano_mod' => 'getAnoMod',
        'ano_fab' => 'getAnoFab',
        'tp_pint' => 'getTpPint',
        'tp_veic' => 'getTpVeic',
        'esp_veic' => 'getEspVeic',
        'vin' => 'getVin',
        'cond_veic' => 'getCondVeic',
        'c_mod' => 'getCMod',
        'c_cor_denatran' => 'getCCorDenatran',
        'lota' => 'getLota',
        'tp_rest' => 'getTpRest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tp_op', $data ?? [], null);
        $this->setIfExists('chassi', $data ?? [], null);
        $this->setIfExists('c_cor', $data ?? [], null);
        $this->setIfExists('x_cor', $data ?? [], null);
        $this->setIfExists('pot', $data ?? [], null);
        $this->setIfExists('cilin', $data ?? [], null);
        $this->setIfExists('peso_l', $data ?? [], null);
        $this->setIfExists('peso_b', $data ?? [], null);
        $this->setIfExists('n_serie', $data ?? [], null);
        $this->setIfExists('tp_comb', $data ?? [], null);
        $this->setIfExists('n_motor', $data ?? [], null);
        $this->setIfExists('cmt', $data ?? [], null);
        $this->setIfExists('dist', $data ?? [], null);
        $this->setIfExists('ano_mod', $data ?? [], null);
        $this->setIfExists('ano_fab', $data ?? [], null);
        $this->setIfExists('tp_pint', $data ?? [], null);
        $this->setIfExists('tp_veic', $data ?? [], null);
        $this->setIfExists('esp_veic', $data ?? [], null);
        $this->setIfExists('vin', $data ?? [], null);
        $this->setIfExists('cond_veic', $data ?? [], null);
        $this->setIfExists('c_mod', $data ?? [], null);
        $this->setIfExists('c_cor_denatran', $data ?? [], null);
        $this->setIfExists('lota', $data ?? [], null);
        $this->setIfExists('tp_rest', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tp_op'] === null) {
            $invalidProperties[] = "'tp_op' can't be null";
        }
        if ($this->container['chassi'] === null) {
            $invalidProperties[] = "'chassi' can't be null";
        }
        if ((mb_strlen($this->container['chassi']) > 17)) {
            $invalidProperties[] = "invalid value for 'chassi', the character length must be smaller than or equal to 17.";
        }

        if ($this->container['c_cor'] === null) {
            $invalidProperties[] = "'c_cor' can't be null";
        }
        if ((mb_strlen($this->container['c_cor']) > 4)) {
            $invalidProperties[] = "invalid value for 'c_cor', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['c_cor']) < 1)) {
            $invalidProperties[] = "invalid value for 'c_cor', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['x_cor'] === null) {
            $invalidProperties[] = "'x_cor' can't be null";
        }
        if ((mb_strlen($this->container['x_cor']) > 40)) {
            $invalidProperties[] = "invalid value for 'x_cor', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['x_cor']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_cor', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['pot'] === null) {
            $invalidProperties[] = "'pot' can't be null";
        }
        if ((mb_strlen($this->container['pot']) > 4)) {
            $invalidProperties[] = "invalid value for 'pot', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['pot']) < 1)) {
            $invalidProperties[] = "invalid value for 'pot', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cilin'] === null) {
            $invalidProperties[] = "'cilin' can't be null";
        }
        if ((mb_strlen($this->container['cilin']) > 4)) {
            $invalidProperties[] = "invalid value for 'cilin', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['cilin']) < 1)) {
            $invalidProperties[] = "invalid value for 'cilin', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['peso_l'] === null) {
            $invalidProperties[] = "'peso_l' can't be null";
        }
        if ((mb_strlen($this->container['peso_l']) > 9)) {
            $invalidProperties[] = "invalid value for 'peso_l', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['peso_l']) < 1)) {
            $invalidProperties[] = "invalid value for 'peso_l', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['peso_b'] === null) {
            $invalidProperties[] = "'peso_b' can't be null";
        }
        if ((mb_strlen($this->container['peso_b']) > 9)) {
            $invalidProperties[] = "invalid value for 'peso_b', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['peso_b']) < 1)) {
            $invalidProperties[] = "invalid value for 'peso_b', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['n_serie'] === null) {
            $invalidProperties[] = "'n_serie' can't be null";
        }
        if ((mb_strlen($this->container['n_serie']) > 9)) {
            $invalidProperties[] = "invalid value for 'n_serie', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['n_serie']) < 1)) {
            $invalidProperties[] = "invalid value for 'n_serie', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tp_comb'] === null) {
            $invalidProperties[] = "'tp_comb' can't be null";
        }
        if ((mb_strlen($this->container['tp_comb']) > 2)) {
            $invalidProperties[] = "invalid value for 'tp_comb', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['tp_comb']) < 1)) {
            $invalidProperties[] = "invalid value for 'tp_comb', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['n_motor'] === null) {
            $invalidProperties[] = "'n_motor' can't be null";
        }
        if ((mb_strlen($this->container['n_motor']) > 21)) {
            $invalidProperties[] = "invalid value for 'n_motor', the character length must be smaller than or equal to 21.";
        }

        if ((mb_strlen($this->container['n_motor']) < 1)) {
            $invalidProperties[] = "invalid value for 'n_motor', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['cmt'] === null) {
            $invalidProperties[] = "'cmt' can't be null";
        }
        if ((mb_strlen($this->container['cmt']) > 9)) {
            $invalidProperties[] = "invalid value for 'cmt', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['cmt']) < 1)) {
            $invalidProperties[] = "invalid value for 'cmt', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['dist'] === null) {
            $invalidProperties[] = "'dist' can't be null";
        }
        if ((mb_strlen($this->container['dist']) > 4)) {
            $invalidProperties[] = "invalid value for 'dist', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['dist']) < 1)) {
            $invalidProperties[] = "invalid value for 'dist', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ano_mod'] === null) {
            $invalidProperties[] = "'ano_mod' can't be null";
        }
        if (($this->container['ano_mod'] > 9999)) {
            $invalidProperties[] = "invalid value for 'ano_mod', must be smaller than or equal to 9999.";
        }

        if (($this->container['ano_mod'] < 0)) {
            $invalidProperties[] = "invalid value for 'ano_mod', must be bigger than or equal to 0.";
        }

        if ($this->container['ano_fab'] === null) {
            $invalidProperties[] = "'ano_fab' can't be null";
        }
        if (($this->container['ano_fab'] > 9999)) {
            $invalidProperties[] = "invalid value for 'ano_fab', must be smaller than or equal to 9999.";
        }

        if (($this->container['ano_fab'] < 0)) {
            $invalidProperties[] = "invalid value for 'ano_fab', must be bigger than or equal to 0.";
        }

        if ($this->container['tp_pint'] === null) {
            $invalidProperties[] = "'tp_pint' can't be null";
        }
        if ((mb_strlen($this->container['tp_pint']) > 1)) {
            $invalidProperties[] = "invalid value for 'tp_pint', the character length must be smaller than or equal to 1.";
        }

        if ($this->container['tp_veic'] === null) {
            $invalidProperties[] = "'tp_veic' can't be null";
        }
        if (($this->container['tp_veic'] > 99)) {
            $invalidProperties[] = "invalid value for 'tp_veic', must be smaller than or equal to 99.";
        }

        if (($this->container['tp_veic'] < 0)) {
            $invalidProperties[] = "invalid value for 'tp_veic', must be bigger than or equal to 0.";
        }

        if ($this->container['esp_veic'] === null) {
            $invalidProperties[] = "'esp_veic' can't be null";
        }
        if (($this->container['esp_veic'] > 9)) {
            $invalidProperties[] = "invalid value for 'esp_veic', must be smaller than or equal to 9.";
        }

        if (($this->container['esp_veic'] < 0)) {
            $invalidProperties[] = "invalid value for 'esp_veic', must be bigger than or equal to 0.";
        }

        if ($this->container['vin'] === null) {
            $invalidProperties[] = "'vin' can't be null";
        }
        if ((mb_strlen($this->container['vin']) > 1)) {
            $invalidProperties[] = "invalid value for 'vin', the character length must be smaller than or equal to 1.";
        }

        if ($this->container['cond_veic'] === null) {
            $invalidProperties[] = "'cond_veic' can't be null";
        }
        if ($this->container['c_mod'] === null) {
            $invalidProperties[] = "'c_mod' can't be null";
        }
        if ($this->container['c_cor_denatran'] === null) {
            $invalidProperties[] = "'c_cor_denatran' can't be null";
        }
        if ((mb_strlen($this->container['c_cor_denatran']) > 2)) {
            $invalidProperties[] = "invalid value for 'c_cor_denatran', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['c_cor_denatran']) < 1)) {
            $invalidProperties[] = "invalid value for 'c_cor_denatran', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['lota'] === null) {
            $invalidProperties[] = "'lota' can't be null";
        }
        if (($this->container['lota'] > 999)) {
            $invalidProperties[] = "invalid value for 'lota', must be smaller than or equal to 999.";
        }

        if (($this->container['lota'] < 0)) {
            $invalidProperties[] = "invalid value for 'lota', must be bigger than or equal to 0.";
        }

        if ($this->container['tp_rest'] === null) {
            $invalidProperties[] = "'tp_rest' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tp_op
     *
     * @return int
     */
    public function getTpOp()
    {
        return $this->container['tp_op'];
    }

    /**
     * Sets tp_op
     *
     * @param int $tp_op Tipo da Operação (1 - Venda concessionária; 2 - Faturamento direto; 3 - Venda direta; 0 - Outros).
     *
     * @return self
     */
    public function setTpOp($tp_op)
    {
        if (is_null($tp_op)) {
            array_push($this->openAPINullablesSetToNull, 'tp_op');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_op', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_op'] = $tp_op;

        return $this;
    }

    /**
     * Gets chassi
     *
     * @return string
     */
    public function getChassi()
    {
        return $this->container['chassi'];
    }

    /**
     * Sets chassi
     *
     * @param string $chassi Chassi do veículo - VIN (código-identificação-veículo).
     *
     * @return self
     */
    public function setChassi($chassi)
    {
        if (is_null($chassi)) {
            array_push($this->openAPINullablesSetToNull, 'chassi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chassi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chassi) && (mb_strlen($chassi) > 17)) {
            throw new \InvalidArgumentException('invalid length for $chassi when calling NfeSefazVeicProd., must be smaller than or equal to 17.');
        }

        $this->container['chassi'] = $chassi;

        return $this;
    }

    /**
     * Gets c_cor
     *
     * @return string
     */
    public function getCCor()
    {
        return $this->container['c_cor'];
    }

    /**
     * Sets c_cor
     *
     * @param string $c_cor Cor do veículo (código de cada montadora).
     *
     * @return self
     */
    public function setCCor($c_cor)
    {
        if (is_null($c_cor)) {
            array_push($this->openAPINullablesSetToNull, 'c_cor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_cor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($c_cor) && (mb_strlen($c_cor) > 4)) {
            throw new \InvalidArgumentException('invalid length for $c_cor when calling NfeSefazVeicProd., must be smaller than or equal to 4.');
        }
        if (!is_null($c_cor) && (mb_strlen($c_cor) < 1)) {
            throw new \InvalidArgumentException('invalid length for $c_cor when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['c_cor'] = $c_cor;

        return $this;
    }

    /**
     * Gets x_cor
     *
     * @return string
     */
    public function getXCor()
    {
        return $this->container['x_cor'];
    }

    /**
     * Sets x_cor
     *
     * @param string $x_cor Descrição da cor.
     *
     * @return self
     */
    public function setXCor($x_cor)
    {
        if (is_null($x_cor)) {
            array_push($this->openAPINullablesSetToNull, 'x_cor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_cor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_cor) && (mb_strlen($x_cor) > 40)) {
            throw new \InvalidArgumentException('invalid length for $x_cor when calling NfeSefazVeicProd., must be smaller than or equal to 40.');
        }
        if (!is_null($x_cor) && (mb_strlen($x_cor) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_cor when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['x_cor'] = $x_cor;

        return $this;
    }

    /**
     * Gets pot
     *
     * @return string
     */
    public function getPot()
    {
        return $this->container['pot'];
    }

    /**
     * Sets pot
     *
     * @param string $pot Potência máxima do motor do veículo em cavalo vapor (CV). (potência-veículo).
     *
     * @return self
     */
    public function setPot($pot)
    {
        if (is_null($pot)) {
            array_push($this->openAPINullablesSetToNull, 'pot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pot) && (mb_strlen($pot) > 4)) {
            throw new \InvalidArgumentException('invalid length for $pot when calling NfeSefazVeicProd., must be smaller than or equal to 4.');
        }
        if (!is_null($pot) && (mb_strlen($pot) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pot when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['pot'] = $pot;

        return $this;
    }

    /**
     * Gets cilin
     *
     * @return string
     */
    public function getCilin()
    {
        return $this->container['cilin'];
    }

    /**
     * Sets cilin
     *
     * @param string $cilin Capacidade voluntária do motor expressa em centímetros cúbicos (CC). (cilindradas).
     *
     * @return self
     */
    public function setCilin($cilin)
    {
        if (is_null($cilin)) {
            array_push($this->openAPINullablesSetToNull, 'cilin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cilin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cilin) && (mb_strlen($cilin) > 4)) {
            throw new \InvalidArgumentException('invalid length for $cilin when calling NfeSefazVeicProd., must be smaller than or equal to 4.');
        }
        if (!is_null($cilin) && (mb_strlen($cilin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cilin when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['cilin'] = $cilin;

        return $this;
    }

    /**
     * Gets peso_l
     *
     * @return string
     */
    public function getPesoL()
    {
        return $this->container['peso_l'];
    }

    /**
     * Sets peso_l
     *
     * @param string $peso_l Peso líquido.
     *
     * @return self
     */
    public function setPesoL($peso_l)
    {
        if (is_null($peso_l)) {
            array_push($this->openAPINullablesSetToNull, 'peso_l');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('peso_l', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($peso_l) && (mb_strlen($peso_l) > 9)) {
            throw new \InvalidArgumentException('invalid length for $peso_l when calling NfeSefazVeicProd., must be smaller than or equal to 9.');
        }
        if (!is_null($peso_l) && (mb_strlen($peso_l) < 1)) {
            throw new \InvalidArgumentException('invalid length for $peso_l when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['peso_l'] = $peso_l;

        return $this;
    }

    /**
     * Gets peso_b
     *
     * @return string
     */
    public function getPesoB()
    {
        return $this->container['peso_b'];
    }

    /**
     * Sets peso_b
     *
     * @param string $peso_b Peso bruto.
     *
     * @return self
     */
    public function setPesoB($peso_b)
    {
        if (is_null($peso_b)) {
            array_push($this->openAPINullablesSetToNull, 'peso_b');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('peso_b', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($peso_b) && (mb_strlen($peso_b) > 9)) {
            throw new \InvalidArgumentException('invalid length for $peso_b when calling NfeSefazVeicProd., must be smaller than or equal to 9.');
        }
        if (!is_null($peso_b) && (mb_strlen($peso_b) < 1)) {
            throw new \InvalidArgumentException('invalid length for $peso_b when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['peso_b'] = $peso_b;

        return $this;
    }

    /**
     * Gets n_serie
     *
     * @return string
     */
    public function getNSerie()
    {
        return $this->container['n_serie'];
    }

    /**
     * Sets n_serie
     *
     * @param string $n_serie Serial (série).
     *
     * @return self
     */
    public function setNSerie($n_serie)
    {
        if (is_null($n_serie)) {
            array_push($this->openAPINullablesSetToNull, 'n_serie');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_serie', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_serie) && (mb_strlen($n_serie) > 9)) {
            throw new \InvalidArgumentException('invalid length for $n_serie when calling NfeSefazVeicProd., must be smaller than or equal to 9.');
        }
        if (!is_null($n_serie) && (mb_strlen($n_serie) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_serie when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['n_serie'] = $n_serie;

        return $this;
    }

    /**
     * Gets tp_comb
     *
     * @return string
     */
    public function getTpComb()
    {
        return $this->container['tp_comb'];
    }

    /**
     * Sets tp_comb
     *
     * @param string $tp_comb Tipo de combustível-Tabela RENAVAM: 01-Álcool  * 02 - Gasolina  * 03 - Diesel  * 16 - Álcool/Gas  * 17 - Gas./Álcool/GNV  * 18 - Gasolina/Elétrico
     *
     * @return self
     */
    public function setTpComb($tp_comb)
    {
        if (is_null($tp_comb)) {
            array_push($this->openAPINullablesSetToNull, 'tp_comb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_comb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tp_comb) && (mb_strlen($tp_comb) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tp_comb when calling NfeSefazVeicProd., must be smaller than or equal to 2.');
        }
        if (!is_null($tp_comb) && (mb_strlen($tp_comb) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tp_comb when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['tp_comb'] = $tp_comb;

        return $this;
    }

    /**
     * Gets n_motor
     *
     * @return string
     */
    public function getNMotor()
    {
        return $this->container['n_motor'];
    }

    /**
     * Sets n_motor
     *
     * @param string $n_motor Número do motor.
     *
     * @return self
     */
    public function setNMotor($n_motor)
    {
        if (is_null($n_motor)) {
            array_push($this->openAPINullablesSetToNull, 'n_motor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_motor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_motor) && (mb_strlen($n_motor) > 21)) {
            throw new \InvalidArgumentException('invalid length for $n_motor when calling NfeSefazVeicProd., must be smaller than or equal to 21.');
        }
        if (!is_null($n_motor) && (mb_strlen($n_motor) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_motor when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['n_motor'] = $n_motor;

        return $this;
    }

    /**
     * Gets cmt
     *
     * @return string
     */
    public function getCmt()
    {
        return $this->container['cmt'];
    }

    /**
     * Sets cmt
     *
     * @param string $cmt CMT-Capacidade Máxima de Tração - em Toneladas 4 casas decimais.
     *
     * @return self
     */
    public function setCmt($cmt)
    {
        if (is_null($cmt)) {
            array_push($this->openAPINullablesSetToNull, 'cmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cmt) && (mb_strlen($cmt) > 9)) {
            throw new \InvalidArgumentException('invalid length for $cmt when calling NfeSefazVeicProd., must be smaller than or equal to 9.');
        }
        if (!is_null($cmt) && (mb_strlen($cmt) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cmt when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['cmt'] = $cmt;

        return $this;
    }

    /**
     * Gets dist
     *
     * @return string
     */
    public function getDist()
    {
        return $this->container['dist'];
    }

    /**
     * Sets dist
     *
     * @param string $dist Distância entre eixos.
     *
     * @return self
     */
    public function setDist($dist)
    {
        if (is_null($dist)) {
            array_push($this->openAPINullablesSetToNull, 'dist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($dist) && (mb_strlen($dist) > 4)) {
            throw new \InvalidArgumentException('invalid length for $dist when calling NfeSefazVeicProd., must be smaller than or equal to 4.');
        }
        if (!is_null($dist) && (mb_strlen($dist) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dist when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['dist'] = $dist;

        return $this;
    }

    /**
     * Gets ano_mod
     *
     * @return int
     */
    public function getAnoMod()
    {
        return $this->container['ano_mod'];
    }

    /**
     * Sets ano_mod
     *
     * @param int $ano_mod Ano Modelo de Fabricação.
     *
     * @return self
     */
    public function setAnoMod($ano_mod)
    {
        if (is_null($ano_mod)) {
            array_push($this->openAPINullablesSetToNull, 'ano_mod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ano_mod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($ano_mod) && ($ano_mod > 9999)) {
            throw new \InvalidArgumentException('invalid value for $ano_mod when calling NfeSefazVeicProd., must be smaller than or equal to 9999.');
        }
        if (!is_null($ano_mod) && ($ano_mod < 0)) {
            throw new \InvalidArgumentException('invalid value for $ano_mod when calling NfeSefazVeicProd., must be bigger than or equal to 0.');
        }

        $this->container['ano_mod'] = $ano_mod;

        return $this;
    }

    /**
     * Gets ano_fab
     *
     * @return int
     */
    public function getAnoFab()
    {
        return $this->container['ano_fab'];
    }

    /**
     * Sets ano_fab
     *
     * @param int $ano_fab Ano de Fabricação.
     *
     * @return self
     */
    public function setAnoFab($ano_fab)
    {
        if (is_null($ano_fab)) {
            array_push($this->openAPINullablesSetToNull, 'ano_fab');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ano_fab', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($ano_fab) && ($ano_fab > 9999)) {
            throw new \InvalidArgumentException('invalid value for $ano_fab when calling NfeSefazVeicProd., must be smaller than or equal to 9999.');
        }
        if (!is_null($ano_fab) && ($ano_fab < 0)) {
            throw new \InvalidArgumentException('invalid value for $ano_fab when calling NfeSefazVeicProd., must be bigger than or equal to 0.');
        }

        $this->container['ano_fab'] = $ano_fab;

        return $this;
    }

    /**
     * Gets tp_pint
     *
     * @return string
     */
    public function getTpPint()
    {
        return $this->container['tp_pint'];
    }

    /**
     * Sets tp_pint
     *
     * @param string $tp_pint Tipo de pintura.
     *
     * @return self
     */
    public function setTpPint($tp_pint)
    {
        if (is_null($tp_pint)) {
            array_push($this->openAPINullablesSetToNull, 'tp_pint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_pint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tp_pint) && (mb_strlen($tp_pint) > 1)) {
            throw new \InvalidArgumentException('invalid length for $tp_pint when calling NfeSefazVeicProd., must be smaller than or equal to 1.');
        }

        $this->container['tp_pint'] = $tp_pint;

        return $this;
    }

    /**
     * Gets tp_veic
     *
     * @return int
     */
    public function getTpVeic()
    {
        return $this->container['tp_veic'];
    }

    /**
     * Sets tp_veic
     *
     * @param int $tp_veic Tipo de veículo (utilizar tabela RENAVAM).
     *
     * @return self
     */
    public function setTpVeic($tp_veic)
    {
        if (is_null($tp_veic)) {
            array_push($this->openAPINullablesSetToNull, 'tp_veic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_veic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($tp_veic) && ($tp_veic > 99)) {
            throw new \InvalidArgumentException('invalid value for $tp_veic when calling NfeSefazVeicProd., must be smaller than or equal to 99.');
        }
        if (!is_null($tp_veic) && ($tp_veic < 0)) {
            throw new \InvalidArgumentException('invalid value for $tp_veic when calling NfeSefazVeicProd., must be bigger than or equal to 0.');
        }

        $this->container['tp_veic'] = $tp_veic;

        return $this;
    }

    /**
     * Gets esp_veic
     *
     * @return int
     */
    public function getEspVeic()
    {
        return $this->container['esp_veic'];
    }

    /**
     * Sets esp_veic
     *
     * @param int $esp_veic Espécie de veículo (utilizar tabela RENAVAM).
     *
     * @return self
     */
    public function setEspVeic($esp_veic)
    {
        if (is_null($esp_veic)) {
            array_push($this->openAPINullablesSetToNull, 'esp_veic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esp_veic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($esp_veic) && ($esp_veic > 9)) {
            throw new \InvalidArgumentException('invalid value for $esp_veic when calling NfeSefazVeicProd., must be smaller than or equal to 9.');
        }
        if (!is_null($esp_veic) && ($esp_veic < 0)) {
            throw new \InvalidArgumentException('invalid value for $esp_veic when calling NfeSefazVeicProd., must be bigger than or equal to 0.');
        }

        $this->container['esp_veic'] = $esp_veic;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin Informa-se o veículo tem VIN (chassi) remarcado.  * R-Remarcado  * N-NormalVIN
     *
     * @return self
     */
    public function setVin($vin)
    {
        if (is_null($vin)) {
            array_push($this->openAPINullablesSetToNull, 'vin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vin) && (mb_strlen($vin) > 1)) {
            throw new \InvalidArgumentException('invalid length for $vin when calling NfeSefazVeicProd., must be smaller than or equal to 1.');
        }

        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets cond_veic
     *
     * @return int
     */
    public function getCondVeic()
    {
        return $this->container['cond_veic'];
    }

    /**
     * Sets cond_veic
     *
     * @param int $cond_veic Condição do veículo (1 - acabado; 2 - inacabado; 3 - semi-acabado).
     *
     * @return self
     */
    public function setCondVeic($cond_veic)
    {
        if (is_null($cond_veic)) {
            array_push($this->openAPINullablesSetToNull, 'cond_veic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cond_veic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cond_veic'] = $cond_veic;

        return $this;
    }

    /**
     * Gets c_mod
     *
     * @return string
     */
    public function getCMod()
    {
        return $this->container['c_mod'];
    }

    /**
     * Sets c_mod
     *
     * @param string $c_mod Código Marca Modelo (utilizar tabela RENAVAM).
     *
     * @return self
     */
    public function setCMod($c_mod)
    {
        if (is_null($c_mod)) {
            array_push($this->openAPINullablesSetToNull, 'c_mod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mod'] = $c_mod;

        return $this;
    }

    /**
     * Gets c_cor_denatran
     *
     * @return string
     */
    public function getCCorDenatran()
    {
        return $this->container['c_cor_denatran'];
    }

    /**
     * Sets c_cor_denatran
     *
     * @param string $c_cor_denatran Código da Cor Segundo as regras de pré-cadastro do DENATRAN: 01-AMARELO  * 02 - AZUL  * 03 - BEGE  * 04 - BRANCA  * 05 - CINZA  * 06 - DOURADA  * 07 - GRENA  * 08 - LARANJA  * 09 - MARROM  * 10 - PRATA  * 11 - PRETA  * 12 - ROSA  * 13 - ROXA  * 14 - VERDE  * 15 - VERMELHA  * 16 - FANTASIA
     *
     * @return self
     */
    public function setCCorDenatran($c_cor_denatran)
    {
        if (is_null($c_cor_denatran)) {
            array_push($this->openAPINullablesSetToNull, 'c_cor_denatran');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_cor_denatran', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($c_cor_denatran) && (mb_strlen($c_cor_denatran) > 2)) {
            throw new \InvalidArgumentException('invalid length for $c_cor_denatran when calling NfeSefazVeicProd., must be smaller than or equal to 2.');
        }
        if (!is_null($c_cor_denatran) && (mb_strlen($c_cor_denatran) < 1)) {
            throw new \InvalidArgumentException('invalid length for $c_cor_denatran when calling NfeSefazVeicProd., must be bigger than or equal to 1.');
        }

        $this->container['c_cor_denatran'] = $c_cor_denatran;

        return $this;
    }

    /**
     * Gets lota
     *
     * @return int
     */
    public function getLota()
    {
        return $this->container['lota'];
    }

    /**
     * Sets lota
     *
     * @param int $lota Quantidade máxima de permitida de passageiros sentados, inclusive motorista.
     *
     * @return self
     */
    public function setLota($lota)
    {
        if (is_null($lota)) {
            array_push($this->openAPINullablesSetToNull, 'lota');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lota', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($lota) && ($lota > 999)) {
            throw new \InvalidArgumentException('invalid value for $lota when calling NfeSefazVeicProd., must be smaller than or equal to 999.');
        }
        if (!is_null($lota) && ($lota < 0)) {
            throw new \InvalidArgumentException('invalid value for $lota when calling NfeSefazVeicProd., must be bigger than or equal to 0.');
        }

        $this->container['lota'] = $lota;

        return $this;
    }

    /**
     * Gets tp_rest
     *
     * @return int
     */
    public function getTpRest()
    {
        return $this->container['tp_rest'];
    }

    /**
     * Sets tp_rest
     *
     * @param int $tp_rest Restrição  * 0 - Não há  * 1 - Alienação Fiduciária  * 2 - Arrendamento Mercantil  * 3 - Reserva de Domínio  * 4 - Penhor de Veículos  * 9 - outras
     *
     * @return self
     */
    public function setTpRest($tp_rest)
    {
        if (is_null($tp_rest)) {
            array_push($this->openAPINullablesSetToNull, 'tp_rest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_rest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_rest'] = $tp_rest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


