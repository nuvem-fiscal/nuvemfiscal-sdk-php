<?php
/**
 * NfcomSefazAssinante
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfcomSefazAssinante Class Doc Comment
 *
 * @category Class
 * @description Dados do assinante.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfcomSefazAssinante implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfcomSefazAssinante';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'i_cod_assinante' => 'string',
        'tp_assinante' => 'int',
        'tp_serv_util' => 'int',
        'n_contrato' => 'string',
        'd_contrato_ini' => '\DateTime',
        'd_contrato_fim' => '\DateTime',
        'nro_term_princ' => 'string',
        'c_uf_princ' => 'int',
        'nro_term_adic' => 'string',
        'c_uf_adic' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'i_cod_assinante' => null,
        'tp_assinante' => null,
        'tp_serv_util' => null,
        'n_contrato' => null,
        'd_contrato_ini' => 'date',
        'd_contrato_fim' => 'date',
        'nro_term_princ' => null,
        'c_uf_princ' => null,
        'nro_term_adic' => null,
        'c_uf_adic' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'i_cod_assinante' => true,
        'tp_assinante' => true,
        'tp_serv_util' => true,
        'n_contrato' => true,
        'd_contrato_ini' => true,
        'd_contrato_fim' => true,
        'nro_term_princ' => true,
        'c_uf_princ' => true,
        'nro_term_adic' => true,
        'c_uf_adic' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'i_cod_assinante' => 'iCodAssinante',
        'tp_assinante' => 'tpAssinante',
        'tp_serv_util' => 'tpServUtil',
        'n_contrato' => 'nContrato',
        'd_contrato_ini' => 'dContratoIni',
        'd_contrato_fim' => 'dContratoFim',
        'nro_term_princ' => 'NroTermPrinc',
        'c_uf_princ' => 'cUFPrinc',
        'nro_term_adic' => 'NroTermAdic',
        'c_uf_adic' => 'cUFAdic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'i_cod_assinante' => 'setICodAssinante',
        'tp_assinante' => 'setTpAssinante',
        'tp_serv_util' => 'setTpServUtil',
        'n_contrato' => 'setNContrato',
        'd_contrato_ini' => 'setDContratoIni',
        'd_contrato_fim' => 'setDContratoFim',
        'nro_term_princ' => 'setNroTermPrinc',
        'c_uf_princ' => 'setCUfPrinc',
        'nro_term_adic' => 'setNroTermAdic',
        'c_uf_adic' => 'setCUfAdic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'i_cod_assinante' => 'getICodAssinante',
        'tp_assinante' => 'getTpAssinante',
        'tp_serv_util' => 'getTpServUtil',
        'n_contrato' => 'getNContrato',
        'd_contrato_ini' => 'getDContratoIni',
        'd_contrato_fim' => 'getDContratoFim',
        'nro_term_princ' => 'getNroTermPrinc',
        'c_uf_princ' => 'getCUfPrinc',
        'nro_term_adic' => 'getNroTermAdic',
        'c_uf_adic' => 'getCUfAdic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('i_cod_assinante', $data ?? [], null);
        $this->setIfExists('tp_assinante', $data ?? [], null);
        $this->setIfExists('tp_serv_util', $data ?? [], null);
        $this->setIfExists('n_contrato', $data ?? [], null);
        $this->setIfExists('d_contrato_ini', $data ?? [], null);
        $this->setIfExists('d_contrato_fim', $data ?? [], null);
        $this->setIfExists('nro_term_princ', $data ?? [], null);
        $this->setIfExists('c_uf_princ', $data ?? [], null);
        $this->setIfExists('nro_term_adic', $data ?? [], null);
        $this->setIfExists('c_uf_adic', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['i_cod_assinante'] === null) {
            $invalidProperties[] = "'i_cod_assinante' can't be null";
        }
        if ((mb_strlen($this->container['i_cod_assinante']) > 30)) {
            $invalidProperties[] = "invalid value for 'i_cod_assinante', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['i_cod_assinante']) < 1)) {
            $invalidProperties[] = "invalid value for 'i_cod_assinante', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tp_assinante'] === null) {
            $invalidProperties[] = "'tp_assinante' can't be null";
        }
        if ($this->container['tp_serv_util'] === null) {
            $invalidProperties[] = "'tp_serv_util' can't be null";
        }
        if (!is_null($this->container['n_contrato']) && (mb_strlen($this->container['n_contrato']) > 20)) {
            $invalidProperties[] = "invalid value for 'n_contrato', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['n_contrato']) && (mb_strlen($this->container['n_contrato']) < 1)) {
            $invalidProperties[] = "invalid value for 'n_contrato', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets i_cod_assinante
     *
     * @return string
     */
    public function getICodAssinante()
    {
        return $this->container['i_cod_assinante'];
    }

    /**
     * Sets i_cod_assinante
     *
     * @param string $i_cod_assinante Código único de Identificação do assinante.
     *
     * @return self
     */
    public function setICodAssinante($i_cod_assinante)
    {
        if (is_null($i_cod_assinante)) {
            array_push($this->openAPINullablesSetToNull, 'i_cod_assinante');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('i_cod_assinante', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($i_cod_assinante) && (mb_strlen($i_cod_assinante) > 30)) {
            throw new \InvalidArgumentException('invalid length for $i_cod_assinante when calling NfcomSefazAssinante., must be smaller than or equal to 30.');
        }
        if (!is_null($i_cod_assinante) && (mb_strlen($i_cod_assinante) < 1)) {
            throw new \InvalidArgumentException('invalid length for $i_cod_assinante when calling NfcomSefazAssinante., must be bigger than or equal to 1.');
        }

        $this->container['i_cod_assinante'] = $i_cod_assinante;

        return $this;
    }

    /**
     * Gets tp_assinante
     *
     * @return int
     */
    public function getTpAssinante()
    {
        return $this->container['tp_assinante'];
    }

    /**
     * Sets tp_assinante
     *
     * @param int $tp_assinante Tipo de assinante.  * 1 - Comercial  * 2 - Industrial  * 3 - Residencial/Pessoa Física  * 4 - Produtor Rural  * 5 - Órgão da administração pública estadual direta e suas fundações e autarquias, quando mantidas pelo poder público estadual e regidas por normas de direito público, nos termos do Convênio ICMS 107/95  * 6 - Prestador de serviço de telecomunicação responsável pelo recolhimento do imposto incidente sobre a cessão dos meios de rede do prestador do serviço ao usuário final, nos termos do Convênio ICMS 17/13  * 7 - Missões Diplomáticas, Repartições Consulares e Organismos Internacionais, nos termos do Convênio ICMS 158/94  * 8 - Igrejas e Templos de qualquer natureza  * 99 - Outros não especificados anteriormente
     *
     * @return self
     */
    public function setTpAssinante($tp_assinante)
    {
        if (is_null($tp_assinante)) {
            array_push($this->openAPINullablesSetToNull, 'tp_assinante');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_assinante', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_assinante'] = $tp_assinante;

        return $this;
    }

    /**
     * Gets tp_serv_util
     *
     * @return int
     */
    public function getTpServUtil()
    {
        return $this->container['tp_serv_util'];
    }

    /**
     * Sets tp_serv_util
     *
     * @param int $tp_serv_util Tipo de serviço utilizado.  * 1 - Telefonia  * 2 - Comunicação de dados  * 3 - TV por Assinatura  * 4 - Provimento de acesso à Internet  * 5 - Multimídia  * 6 - Outros  * 7 - Varios
     *
     * @return self
     */
    public function setTpServUtil($tp_serv_util)
    {
        if (is_null($tp_serv_util)) {
            array_push($this->openAPINullablesSetToNull, 'tp_serv_util');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_serv_util', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_serv_util'] = $tp_serv_util;

        return $this;
    }

    /**
     * Gets n_contrato
     *
     * @return string|null
     */
    public function getNContrato()
    {
        return $this->container['n_contrato'];
    }

    /**
     * Sets n_contrato
     *
     * @param string|null $n_contrato Número do Contrato do assinante.
     *
     * @return self
     */
    public function setNContrato($n_contrato)
    {
        if (is_null($n_contrato)) {
            array_push($this->openAPINullablesSetToNull, 'n_contrato');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_contrato', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_contrato) && (mb_strlen($n_contrato) > 20)) {
            throw new \InvalidArgumentException('invalid length for $n_contrato when calling NfcomSefazAssinante., must be smaller than or equal to 20.');
        }
        if (!is_null($n_contrato) && (mb_strlen($n_contrato) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_contrato when calling NfcomSefazAssinante., must be bigger than or equal to 1.');
        }

        $this->container['n_contrato'] = $n_contrato;

        return $this;
    }

    /**
     * Gets d_contrato_ini
     *
     * @return \DateTime|null
     */
    public function getDContratoIni()
    {
        return $this->container['d_contrato_ini'];
    }

    /**
     * Sets d_contrato_ini
     *
     * @param \DateTime|null $d_contrato_ini Data de início do contrato.  Formato AAAA-MM-DD.
     *
     * @return self
     */
    public function setDContratoIni($d_contrato_ini)
    {
        if (is_null($d_contrato_ini)) {
            array_push($this->openAPINullablesSetToNull, 'd_contrato_ini');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('d_contrato_ini', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['d_contrato_ini'] = $d_contrato_ini;

        return $this;
    }

    /**
     * Gets d_contrato_fim
     *
     * @return \DateTime|null
     */
    public function getDContratoFim()
    {
        return $this->container['d_contrato_fim'];
    }

    /**
     * Sets d_contrato_fim
     *
     * @param \DateTime|null $d_contrato_fim Data de término do contrato.  Formato AAAA-MM-DD.
     *
     * @return self
     */
    public function setDContratoFim($d_contrato_fim)
    {
        if (is_null($d_contrato_fim)) {
            array_push($this->openAPINullablesSetToNull, 'd_contrato_fim');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('d_contrato_fim', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['d_contrato_fim'] = $d_contrato_fim;

        return $this;
    }

    /**
     * Gets nro_term_princ
     *
     * @return string|null
     */
    public function getNroTermPrinc()
    {
        return $this->container['nro_term_princ'];
    }

    /**
     * Sets nro_term_princ
     *
     * @param string|null $nro_term_princ Número do Terminal Principal do serviço contratado.  Em se tratando de plano de prestação de serviço telefônico corporativo, familiar ou similares, informar o número do terminal telefônico principal do plano.
     *
     * @return self
     */
    public function setNroTermPrinc($nro_term_princ)
    {
        if (is_null($nro_term_princ)) {
            array_push($this->openAPINullablesSetToNull, 'nro_term_princ');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nro_term_princ', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nro_term_princ'] = $nro_term_princ;

        return $this;
    }

    /**
     * Gets c_uf_princ
     *
     * @return int|null
     */
    public function getCUfPrinc()
    {
        return $this->container['c_uf_princ'];
    }

    /**
     * Sets c_uf_princ
     *
     * @param int|null $c_uf_princ Código da UF de habilitação do terminal.  Utilizar a  Tabela do IBGE de código de unidades da federação.
     *
     * @return self
     */
    public function setCUfPrinc($c_uf_princ)
    {
        if (is_null($c_uf_princ)) {
            array_push($this->openAPINullablesSetToNull, 'c_uf_princ');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_uf_princ', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_uf_princ'] = $c_uf_princ;

        return $this;
    }

    /**
     * Gets nro_term_adic
     *
     * @return string|null
     */
    public function getNroTermAdic()
    {
        return $this->container['nro_term_adic'];
    }

    /**
     * Sets nro_term_adic
     *
     * @param string|null $nro_term_adic Número dos Terminais adicionais do serviço contratado.
     *
     * @return self
     */
    public function setNroTermAdic($nro_term_adic)
    {
        if (is_null($nro_term_adic)) {
            array_push($this->openAPINullablesSetToNull, 'nro_term_adic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nro_term_adic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nro_term_adic'] = $nro_term_adic;

        return $this;
    }

    /**
     * Gets c_uf_adic
     *
     * @return int|null
     */
    public function getCUfAdic()
    {
        return $this->container['c_uf_adic'];
    }

    /**
     * Sets c_uf_adic
     *
     * @param int|null $c_uf_adic Código da UF de habilitação do terminal.
     *
     * @return self
     */
    public function setCUfAdic($c_uf_adic)
    {
        if (is_null($c_uf_adic)) {
            array_push($this->openAPINullablesSetToNull, 'c_uf_adic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_uf_adic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_uf_adic'] = $c_uf_adic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


