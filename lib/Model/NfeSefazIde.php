<?php
/**
 * NfeSefazIde
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazIde Class Doc Comment
 *
 * @category Class
 * @description identificação da NF-e.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazIde implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazIde';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c_uf' => 'int',
        'c_nf' => 'string',
        'nat_op' => 'string',
        'mod' => 'int',
        'serie' => 'int',
        'n_nf' => 'int',
        'dh_emi' => '\DateTime',
        'dh_sai_ent' => '\DateTime',
        'tp_nf' => 'int',
        'id_dest' => 'int',
        'c_mun_fg' => 'string',
        'tp_imp' => 'int',
        'tp_emis' => 'int',
        'c_dv' => 'int',
        'tp_amb' => 'int',
        'fin_nfe' => 'int',
        'ind_final' => 'int',
        'ind_pres' => 'int',
        'ind_intermed' => 'int',
        'proc_emi' => 'int',
        'ver_proc' => 'string',
        'dh_cont' => '\DateTime',
        'x_just' => 'string',
        'n_fref' => '\NuvemFiscal\Model\NfeSefazNFref[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c_uf' => null,
        'c_nf' => null,
        'nat_op' => null,
        'mod' => null,
        'serie' => null,
        'n_nf' => null,
        'dh_emi' => 'date-time',
        'dh_sai_ent' => 'date-time',
        'tp_nf' => null,
        'id_dest' => null,
        'c_mun_fg' => null,
        'tp_imp' => null,
        'tp_emis' => null,
        'c_dv' => null,
        'tp_amb' => null,
        'fin_nfe' => null,
        'ind_final' => null,
        'ind_pres' => null,
        'ind_intermed' => null,
        'proc_emi' => null,
        'ver_proc' => null,
        'dh_cont' => 'date-time',
        'x_just' => null,
        'n_fref' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'c_uf' => true,
		'c_nf' => true,
		'nat_op' => true,
		'mod' => true,
		'serie' => true,
		'n_nf' => true,
		'dh_emi' => true,
		'dh_sai_ent' => true,
		'tp_nf' => true,
		'id_dest' => true,
		'c_mun_fg' => true,
		'tp_imp' => true,
		'tp_emis' => true,
		'c_dv' => true,
		'tp_amb' => true,
		'fin_nfe' => true,
		'ind_final' => true,
		'ind_pres' => true,
		'ind_intermed' => true,
		'proc_emi' => true,
		'ver_proc' => true,
		'dh_cont' => true,
		'x_just' => true,
		'n_fref' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_uf' => 'cUF',
        'c_nf' => 'cNF',
        'nat_op' => 'natOp',
        'mod' => 'mod',
        'serie' => 'serie',
        'n_nf' => 'nNF',
        'dh_emi' => 'dhEmi',
        'dh_sai_ent' => 'dhSaiEnt',
        'tp_nf' => 'tpNF',
        'id_dest' => 'idDest',
        'c_mun_fg' => 'cMunFG',
        'tp_imp' => 'tpImp',
        'tp_emis' => 'tpEmis',
        'c_dv' => 'cDV',
        'tp_amb' => 'tpAmb',
        'fin_nfe' => 'finNFe',
        'ind_final' => 'indFinal',
        'ind_pres' => 'indPres',
        'ind_intermed' => 'indIntermed',
        'proc_emi' => 'procEmi',
        'ver_proc' => 'verProc',
        'dh_cont' => 'dhCont',
        'x_just' => 'xJust',
        'n_fref' => 'NFref'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_uf' => 'setCUf',
        'c_nf' => 'setCNf',
        'nat_op' => 'setNatOp',
        'mod' => 'setMod',
        'serie' => 'setSerie',
        'n_nf' => 'setNNf',
        'dh_emi' => 'setDhEmi',
        'dh_sai_ent' => 'setDhSaiEnt',
        'tp_nf' => 'setTpNf',
        'id_dest' => 'setIdDest',
        'c_mun_fg' => 'setCMunFg',
        'tp_imp' => 'setTpImp',
        'tp_emis' => 'setTpEmis',
        'c_dv' => 'setCDv',
        'tp_amb' => 'setTpAmb',
        'fin_nfe' => 'setFinNfe',
        'ind_final' => 'setIndFinal',
        'ind_pres' => 'setIndPres',
        'ind_intermed' => 'setIndIntermed',
        'proc_emi' => 'setProcEmi',
        'ver_proc' => 'setVerProc',
        'dh_cont' => 'setDhCont',
        'x_just' => 'setXJust',
        'n_fref' => 'setNFref'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_uf' => 'getCUf',
        'c_nf' => 'getCNf',
        'nat_op' => 'getNatOp',
        'mod' => 'getMod',
        'serie' => 'getSerie',
        'n_nf' => 'getNNf',
        'dh_emi' => 'getDhEmi',
        'dh_sai_ent' => 'getDhSaiEnt',
        'tp_nf' => 'getTpNf',
        'id_dest' => 'getIdDest',
        'c_mun_fg' => 'getCMunFg',
        'tp_imp' => 'getTpImp',
        'tp_emis' => 'getTpEmis',
        'c_dv' => 'getCDv',
        'tp_amb' => 'getTpAmb',
        'fin_nfe' => 'getFinNfe',
        'ind_final' => 'getIndFinal',
        'ind_pres' => 'getIndPres',
        'ind_intermed' => 'getIndIntermed',
        'proc_emi' => 'getProcEmi',
        'ver_proc' => 'getVerProc',
        'dh_cont' => 'getDhCont',
        'x_just' => 'getXJust',
        'n_fref' => 'getNFref'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('c_uf', $data ?? [], null);
        $this->setIfExists('c_nf', $data ?? [], null);
        $this->setIfExists('nat_op', $data ?? [], null);
        $this->setIfExists('mod', $data ?? [], null);
        $this->setIfExists('serie', $data ?? [], null);
        $this->setIfExists('n_nf', $data ?? [], null);
        $this->setIfExists('dh_emi', $data ?? [], null);
        $this->setIfExists('dh_sai_ent', $data ?? [], null);
        $this->setIfExists('tp_nf', $data ?? [], null);
        $this->setIfExists('id_dest', $data ?? [], null);
        $this->setIfExists('c_mun_fg', $data ?? [], null);
        $this->setIfExists('tp_imp', $data ?? [], null);
        $this->setIfExists('tp_emis', $data ?? [], null);
        $this->setIfExists('c_dv', $data ?? [], null);
        $this->setIfExists('tp_amb', $data ?? [], null);
        $this->setIfExists('fin_nfe', $data ?? [], null);
        $this->setIfExists('ind_final', $data ?? [], null);
        $this->setIfExists('ind_pres', $data ?? [], null);
        $this->setIfExists('ind_intermed', $data ?? [], null);
        $this->setIfExists('proc_emi', $data ?? [], null);
        $this->setIfExists('ver_proc', $data ?? [], null);
        $this->setIfExists('dh_cont', $data ?? [], null);
        $this->setIfExists('x_just', $data ?? [], null);
        $this->setIfExists('n_fref', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['c_uf'] === null) {
            $invalidProperties[] = "'c_uf' can't be null";
        }
        if ($this->container['nat_op'] === null) {
            $invalidProperties[] = "'nat_op' can't be null";
        }
        if ((mb_strlen($this->container['nat_op']) > 60)) {
            $invalidProperties[] = "invalid value for 'nat_op', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['nat_op']) < 1)) {
            $invalidProperties[] = "invalid value for 'nat_op', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['serie'] === null) {
            $invalidProperties[] = "'serie' can't be null";
        }
        if (($this->container['serie'] > 999)) {
            $invalidProperties[] = "invalid value for 'serie', must be smaller than or equal to 999.";
        }

        if (($this->container['serie'] < 0)) {
            $invalidProperties[] = "invalid value for 'serie', must be bigger than or equal to 0.";
        }

        if ($this->container['n_nf'] === null) {
            $invalidProperties[] = "'n_nf' can't be null";
        }
        if (($this->container['n_nf'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'n_nf', must be smaller than or equal to 999999999.";
        }

        if (($this->container['n_nf'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_nf', must be bigger than or equal to 1.";
        }

        if ($this->container['dh_emi'] === null) {
            $invalidProperties[] = "'dh_emi' can't be null";
        }
        if ($this->container['tp_nf'] === null) {
            $invalidProperties[] = "'tp_nf' can't be null";
        }
        if ($this->container['id_dest'] === null) {
            $invalidProperties[] = "'id_dest' can't be null";
        }
        if ($this->container['c_mun_fg'] === null) {
            $invalidProperties[] = "'c_mun_fg' can't be null";
        }
        if ($this->container['tp_imp'] === null) {
            $invalidProperties[] = "'tp_imp' can't be null";
        }
        if ($this->container['tp_emis'] === null) {
            $invalidProperties[] = "'tp_emis' can't be null";
        }
        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] > 9)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] < 0)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be bigger than or equal to 0.";
        }

        if ($this->container['fin_nfe'] === null) {
            $invalidProperties[] = "'fin_nfe' can't be null";
        }
        if ($this->container['ind_final'] === null) {
            $invalidProperties[] = "'ind_final' can't be null";
        }
        if ($this->container['ind_pres'] === null) {
            $invalidProperties[] = "'ind_pres' can't be null";
        }
        if ($this->container['proc_emi'] === null) {
            $invalidProperties[] = "'proc_emi' can't be null";
        }
        if ($this->container['ver_proc'] === null) {
            $invalidProperties[] = "'ver_proc' can't be null";
        }
        if ((mb_strlen($this->container['ver_proc']) > 20)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['ver_proc']) < 1)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['x_just']) && (mb_strlen($this->container['x_just']) > 256)) {
            $invalidProperties[] = "invalid value for 'x_just', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['x_just']) && (mb_strlen($this->container['x_just']) < 15)) {
            $invalidProperties[] = "invalid value for 'x_just', the character length must be bigger than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_uf
     *
     * @return int
     */
    public function getCUf()
    {
        return $this->container['c_uf'];
    }

    /**
     * Sets c_uf
     *
     * @param int $c_uf Código da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.
     *
     * @return self
     */
    public function setCUf($c_uf)
    {
        if (is_null($c_uf)) {
            array_push($this->openAPINullablesSetToNull, 'c_uf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_uf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_uf'] = $c_uf;

        return $this;
    }

    /**
     * Gets c_nf
     *
     * @return string|null
     */
    public function getCNf()
    {
        return $this->container['c_nf'];
    }

    /**
     * Sets c_nf
     *
     * @param string|null $c_nf Código numérico que compõe a Chave de Acesso. Número aleatório gerado pelo emitente para cada NF-e.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCNf($c_nf)
    {
        if (is_null($c_nf)) {
            array_push($this->openAPINullablesSetToNull, 'c_nf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_nf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_nf'] = $c_nf;

        return $this;
    }

    /**
     * Gets nat_op
     *
     * @return string
     */
    public function getNatOp()
    {
        return $this->container['nat_op'];
    }

    /**
     * Sets nat_op
     *
     * @param string $nat_op Descrição da Natureza da Operação.
     *
     * @return self
     */
    public function setNatOp($nat_op)
    {
        if (is_null($nat_op)) {
            array_push($this->openAPINullablesSetToNull, 'nat_op');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nat_op', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nat_op) && (mb_strlen($nat_op) > 60)) {
            throw new \InvalidArgumentException('invalid length for $nat_op when calling NfeSefazIde., must be smaller than or equal to 60.');
        }
        if (!is_null($nat_op) && (mb_strlen($nat_op) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nat_op when calling NfeSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['nat_op'] = $nat_op;

        return $this;
    }

    /**
     * Gets mod
     *
     * @return int|null
     */
    public function getMod()
    {
        return $this->container['mod'];
    }

    /**
     * Sets mod
     *
     * @param int|null $mod Código do modelo do Documento Fiscal:  * 55 - NF-e  * 65 - NFC-e
     *
     * @return self
     */
    public function setMod($mod)
    {
        if (is_null($mod)) {
            array_push($this->openAPINullablesSetToNull, 'mod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod'] = $mod;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return int
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param int $serie Série do Documento Fiscal:  * Série normal 0-889  * Avulsa Fisco 890-899  * SCAN 900-999
     *
     * @return self
     */
    public function setSerie($serie)
    {
        if (is_null($serie)) {
            array_push($this->openAPINullablesSetToNull, 'serie');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serie', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($serie) && ($serie > 999)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling NfeSefazIde., must be smaller than or equal to 999.');
        }
        if (!is_null($serie) && ($serie < 0)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling NfeSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets n_nf
     *
     * @return int
     */
    public function getNNf()
    {
        return $this->container['n_nf'];
    }

    /**
     * Sets n_nf
     *
     * @param int $n_nf Número do Documento Fiscal.
     *
     * @return self
     */
    public function setNNf($n_nf)
    {
        if (is_null($n_nf)) {
            array_push($this->openAPINullablesSetToNull, 'n_nf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_nf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n_nf) && ($n_nf > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $n_nf when calling NfeSefazIde., must be smaller than or equal to 999999999.');
        }
        if (!is_null($n_nf) && ($n_nf < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_nf when calling NfeSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['n_nf'] = $n_nf;

        return $this;
    }

    /**
     * Gets dh_emi
     *
     * @return \DateTime
     */
    public function getDhEmi()
    {
        return $this->container['dh_emi'];
    }

    /**
     * Sets dh_emi
     *
     * @param \DateTime $dh_emi Data e Hora de emissão do Documento Fiscal (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00.
     *
     * @return self
     */
    public function setDhEmi($dh_emi)
    {
        if (is_null($dh_emi)) {
            array_push($this->openAPINullablesSetToNull, 'dh_emi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_emi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_emi'] = $dh_emi;

        return $this;
    }

    /**
     * Gets dh_sai_ent
     *
     * @return \DateTime|null
     */
    public function getDhSaiEnt()
    {
        return $this->container['dh_sai_ent'];
    }

    /**
     * Sets dh_sai_ent
     *
     * @param \DateTime|null $dh_sai_ent Data e Hora da saída ou de entrada da mercadoria / produto (AAAA-MM-DDTHH:mm:ssTZD).
     *
     * @return self
     */
    public function setDhSaiEnt($dh_sai_ent)
    {
        if (is_null($dh_sai_ent)) {
            array_push($this->openAPINullablesSetToNull, 'dh_sai_ent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_sai_ent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_sai_ent'] = $dh_sai_ent;

        return $this;
    }

    /**
     * Gets tp_nf
     *
     * @return int
     */
    public function getTpNf()
    {
        return $this->container['tp_nf'];
    }

    /**
     * Sets tp_nf
     *
     * @param int $tp_nf Tipo do Documento Fiscal:  * 0 - Entrada  * 1 - Saída
     *
     * @return self
     */
    public function setTpNf($tp_nf)
    {
        if (is_null($tp_nf)) {
            array_push($this->openAPINullablesSetToNull, 'tp_nf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_nf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_nf'] = $tp_nf;

        return $this;
    }

    /**
     * Gets id_dest
     *
     * @return int
     */
    public function getIdDest()
    {
        return $this->container['id_dest'];
    }

    /**
     * Sets id_dest
     *
     * @param int $id_dest Identificador de Local de destino da operação:  * 1 - Interna  * 2 - Interestadual  * 3 - Exterior
     *
     * @return self
     */
    public function setIdDest($id_dest)
    {
        if (is_null($id_dest)) {
            array_push($this->openAPINullablesSetToNull, 'id_dest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id_dest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id_dest'] = $id_dest;

        return $this;
    }

    /**
     * Gets c_mun_fg
     *
     * @return string
     */
    public function getCMunFg()
    {
        return $this->container['c_mun_fg'];
    }

    /**
     * Sets c_mun_fg
     *
     * @param string $c_mun_fg Código do Município de Ocorrência do Fato Gerador (utilizar a tabela do IBGE).
     *
     * @return self
     */
    public function setCMunFg($c_mun_fg)
    {
        if (is_null($c_mun_fg)) {
            array_push($this->openAPINullablesSetToNull, 'c_mun_fg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mun_fg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mun_fg'] = $c_mun_fg;

        return $this;
    }

    /**
     * Gets tp_imp
     *
     * @return int
     */
    public function getTpImp()
    {
        return $this->container['tp_imp'];
    }

    /**
     * Sets tp_imp
     *
     * @param int $tp_imp Formato de impressão do DANFE:  * 0 - Sem DANFE  * 1 - DANFe Retrato  * 2 - DANFe Paisagem  * 3 - DANFe Simplificado  * 4 - DANFe NFC-e  * 5 - DANFe NFC-e em mensagem eletrônica
     *
     * @return self
     */
    public function setTpImp($tp_imp)
    {
        if (is_null($tp_imp)) {
            array_push($this->openAPINullablesSetToNull, 'tp_imp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_imp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_imp'] = $tp_imp;

        return $this;
    }

    /**
     * Gets tp_emis
     *
     * @return int
     */
    public function getTpEmis()
    {
        return $this->container['tp_emis'];
    }

    /**
     * Sets tp_emis
     *
     * @param int $tp_emis Forma de emissão da NF-e  * 1 - Normal  * 2 - Contingência FS  * 3 - Regime Especial NFF (NT 2021.002)  * 4 - Contingência DPEC  * 5 - Contingência FSDA  * 6 - Contingência SVC - AN  * 7 - Contingência SVC - RS  * 9 - Contingência off-line NFC-e
     *
     * @return self
     */
    public function setTpEmis($tp_emis)
    {
        if (is_null($tp_emis)) {
            array_push($this->openAPINullablesSetToNull, 'tp_emis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_emis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_emis'] = $tp_emis;

        return $this;
    }

    /**
     * Gets c_dv
     *
     * @return int|null
     */
    public function getCDv()
    {
        return $this->container['c_dv'];
    }

    /**
     * Sets c_dv
     *
     * @param int|null $c_dv Digito Verificador da Chave de Acesso da NF-e.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCDv($c_dv)
    {
        if (is_null($c_dv)) {
            array_push($this->openAPINullablesSetToNull, 'c_dv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_dv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($c_dv) && ($c_dv > 9)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling NfeSefazIde., must be smaller than or equal to 9.');
        }
        if (!is_null($c_dv) && ($c_dv < 0)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling NfeSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['c_dv'] = $c_dv;

        return $this;
    }

    /**
     * Gets tp_amb
     *
     * @return int|null
     */
    public function getTpAmb()
    {
        return $this->container['tp_amb'];
    }

    /**
     * Sets tp_amb
     *
     * @param int|null $tp_amb Identificação do Ambiente:  * 1 - Produção  * 2 - Homologação
     *
     * @return self
     */
    public function setTpAmb($tp_amb)
    {
        if (is_null($tp_amb)) {
            array_push($this->openAPINullablesSetToNull, 'tp_amb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_amb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_amb'] = $tp_amb;

        return $this;
    }

    /**
     * Gets fin_nfe
     *
     * @return int
     */
    public function getFinNfe()
    {
        return $this->container['fin_nfe'];
    }

    /**
     * Sets fin_nfe
     *
     * @param int $fin_nfe Finalidade da emissão da NF-e:  * 1 - NFe normal  * 2 - NFe complementar  * 3 - NFe de ajuste  * 4 - Devolução/Retorno
     *
     * @return self
     */
    public function setFinNfe($fin_nfe)
    {
        if (is_null($fin_nfe)) {
            array_push($this->openAPINullablesSetToNull, 'fin_nfe');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fin_nfe', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fin_nfe'] = $fin_nfe;

        return $this;
    }

    /**
     * Gets ind_final
     *
     * @return int
     */
    public function getIndFinal()
    {
        return $this->container['ind_final'];
    }

    /**
     * Sets ind_final
     *
     * @param int $ind_final Indica operação com consumidor final:  * 0 - Não  * 1 - Consumidor Final
     *
     * @return self
     */
    public function setIndFinal($ind_final)
    {
        if (is_null($ind_final)) {
            array_push($this->openAPINullablesSetToNull, 'ind_final');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_final', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_final'] = $ind_final;

        return $this;
    }

    /**
     * Gets ind_pres
     *
     * @return int
     */
    public function getIndPres()
    {
        return $this->container['ind_pres'];
    }

    /**
     * Sets ind_pres
     *
     * @param int $ind_pres Indicador de presença do comprador no estabelecimento comercial no momento da operação:  * 0 - Não se aplica (ex.: Nota Fiscal complementar ou de ajuste)  * 1 - Operação presencial  * 2 - Não presencial, internet  * 3 - Não presencial, teleatendimento  * 4 - NFC-e entrega em domicílio  * 5 - Operação presencial, fora do estabelecimento  * 9 - Não presencial, outros
     *
     * @return self
     */
    public function setIndPres($ind_pres)
    {
        if (is_null($ind_pres)) {
            array_push($this->openAPINullablesSetToNull, 'ind_pres');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_pres', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_pres'] = $ind_pres;

        return $this;
    }

    /**
     * Gets ind_intermed
     *
     * @return int|null
     */
    public function getIndIntermed()
    {
        return $this->container['ind_intermed'];
    }

    /**
     * Sets ind_intermed
     *
     * @param int|null $ind_intermed Indicador de intermediador/marketplace  * 0 - Operação sem intermediador (em site ou plataforma própria)  * 1 - Operação em site ou plataforma de terceiros (intermediadores/marketplace)
     *
     * @return self
     */
    public function setIndIntermed($ind_intermed)
    {
        if (is_null($ind_intermed)) {
            array_push($this->openAPINullablesSetToNull, 'ind_intermed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_intermed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_intermed'] = $ind_intermed;

        return $this;
    }

    /**
     * Gets proc_emi
     *
     * @return int
     */
    public function getProcEmi()
    {
        return $this->container['proc_emi'];
    }

    /**
     * Sets proc_emi
     *
     * @param int $proc_emi Processo de emissão utilizado com a seguinte codificação:  * 0 - emissão de NF-e com aplicativo do contribuinte  * 1 - emissão de NF-e avulsa pelo Fisco  * 2 - emissão de NF-e avulsa, pelo contribuinte com seu certificado digital, através do site  do Fisco  * 3 - emissão de NF-e pelo contribuinte com aplicativo fornecido pelo Fisco
     *
     * @return self
     */
    public function setProcEmi($proc_emi)
    {
        if (is_null($proc_emi)) {
            array_push($this->openAPINullablesSetToNull, 'proc_emi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proc_emi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['proc_emi'] = $proc_emi;

        return $this;
    }

    /**
     * Gets ver_proc
     *
     * @return string
     */
    public function getVerProc()
    {
        return $this->container['ver_proc'];
    }

    /**
     * Sets ver_proc
     *
     * @param string $ver_proc versão do aplicativo utilizado no processo de  emissão.
     *
     * @return self
     */
    public function setVerProc($ver_proc)
    {
        if (is_null($ver_proc)) {
            array_push($this->openAPINullablesSetToNull, 'ver_proc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ver_proc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling NfeSefazIde., must be smaller than or equal to 20.');
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling NfeSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['ver_proc'] = $ver_proc;

        return $this;
    }

    /**
     * Gets dh_cont
     *
     * @return \DateTime|null
     */
    public function getDhCont()
    {
        return $this->container['dh_cont'];
    }

    /**
     * Sets dh_cont
     *
     * @param \DateTime|null $dh_cont Informar a data e hora de entrada em contingência contingência no formato  (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00.
     *
     * @return self
     */
    public function setDhCont($dh_cont)
    {
        if (is_null($dh_cont)) {
            array_push($this->openAPINullablesSetToNull, 'dh_cont');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_cont', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_cont'] = $dh_cont;

        return $this;
    }

    /**
     * Gets x_just
     *
     * @return string|null
     */
    public function getXJust()
    {
        return $this->container['x_just'];
    }

    /**
     * Sets x_just
     *
     * @param string|null $x_just Informar a Justificativa da entrada.
     *
     * @return self
     */
    public function setXJust($x_just)
    {
        if (is_null($x_just)) {
            array_push($this->openAPINullablesSetToNull, 'x_just');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_just', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_just) && (mb_strlen($x_just) > 256)) {
            throw new \InvalidArgumentException('invalid length for $x_just when calling NfeSefazIde., must be smaller than or equal to 256.');
        }
        if (!is_null($x_just) && (mb_strlen($x_just) < 15)) {
            throw new \InvalidArgumentException('invalid length for $x_just when calling NfeSefazIde., must be bigger than or equal to 15.');
        }

        $this->container['x_just'] = $x_just;

        return $this;
    }

    /**
     * Gets n_fref
     *
     * @return \NuvemFiscal\Model\NfeSefazNFref[]|null
     */
    public function getNFref()
    {
        return $this->container['n_fref'];
    }

    /**
     * Sets n_fref
     *
     * @param \NuvemFiscal\Model\NfeSefazNFref[]|null $n_fref n_fref
     *
     * @return self
     */
    public function setNFref($n_fref)
    {
        if (is_null($n_fref)) {
            throw new \InvalidArgumentException('non-nullable n_fref cannot be null');
        }
        $this->container['n_fref'] = $n_fref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


