<?php
/**
 * NfeSefazISSQN
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazISSQN Class Doc Comment
 *
 * @category Class
 * @description ISSQN.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazISSQN implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazISSQN';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'v_bc' => 'float',
        'v_aliq' => 'float',
        'v_issqn' => 'float',
        'c_mun_fg' => 'string',
        'c_list_serv' => 'string',
        'v_deducao' => 'float',
        'v_outro' => 'float',
        'v_desc_incond' => 'float',
        'v_desc_cond' => 'float',
        'v_iss_ret' => 'float',
        'ind_iss' => 'int',
        'c_servico' => 'string',
        'c_mun' => 'string',
        'c_pais' => 'string',
        'n_processo' => 'string',
        'ind_incentivo' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'v_bc' => null,
        'v_aliq' => null,
        'v_issqn' => null,
        'c_mun_fg' => null,
        'c_list_serv' => null,
        'v_deducao' => null,
        'v_outro' => null,
        'v_desc_incond' => null,
        'v_desc_cond' => null,
        'v_iss_ret' => null,
        'ind_iss' => null,
        'c_servico' => null,
        'c_mun' => null,
        'c_pais' => null,
        'n_processo' => null,
        'ind_incentivo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'v_bc' => true,
		'v_aliq' => true,
		'v_issqn' => true,
		'c_mun_fg' => true,
		'c_list_serv' => true,
		'v_deducao' => true,
		'v_outro' => true,
		'v_desc_incond' => true,
		'v_desc_cond' => true,
		'v_iss_ret' => true,
		'ind_iss' => true,
		'c_servico' => true,
		'c_mun' => true,
		'c_pais' => true,
		'n_processo' => true,
		'ind_incentivo' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v_bc' => 'vBC',
        'v_aliq' => 'vAliq',
        'v_issqn' => 'vISSQN',
        'c_mun_fg' => 'cMunFG',
        'c_list_serv' => 'cListServ',
        'v_deducao' => 'vDeducao',
        'v_outro' => 'vOutro',
        'v_desc_incond' => 'vDescIncond',
        'v_desc_cond' => 'vDescCond',
        'v_iss_ret' => 'vISSRet',
        'ind_iss' => 'indISS',
        'c_servico' => 'cServico',
        'c_mun' => 'cMun',
        'c_pais' => 'cPais',
        'n_processo' => 'nProcesso',
        'ind_incentivo' => 'indIncentivo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v_bc' => 'setVBc',
        'v_aliq' => 'setVAliq',
        'v_issqn' => 'setVIssqn',
        'c_mun_fg' => 'setCMunFg',
        'c_list_serv' => 'setCListServ',
        'v_deducao' => 'setVDeducao',
        'v_outro' => 'setVOutro',
        'v_desc_incond' => 'setVDescIncond',
        'v_desc_cond' => 'setVDescCond',
        'v_iss_ret' => 'setVIssRet',
        'ind_iss' => 'setIndIss',
        'c_servico' => 'setCServico',
        'c_mun' => 'setCMun',
        'c_pais' => 'setCPais',
        'n_processo' => 'setNProcesso',
        'ind_incentivo' => 'setIndIncentivo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v_bc' => 'getVBc',
        'v_aliq' => 'getVAliq',
        'v_issqn' => 'getVIssqn',
        'c_mun_fg' => 'getCMunFg',
        'c_list_serv' => 'getCListServ',
        'v_deducao' => 'getVDeducao',
        'v_outro' => 'getVOutro',
        'v_desc_incond' => 'getVDescIncond',
        'v_desc_cond' => 'getVDescCond',
        'v_iss_ret' => 'getVIssRet',
        'ind_iss' => 'getIndIss',
        'c_servico' => 'getCServico',
        'c_mun' => 'getCMun',
        'c_pais' => 'getCPais',
        'n_processo' => 'getNProcesso',
        'ind_incentivo' => 'getIndIncentivo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('v_bc', $data ?? [], null);
        $this->setIfExists('v_aliq', $data ?? [], null);
        $this->setIfExists('v_issqn', $data ?? [], null);
        $this->setIfExists('c_mun_fg', $data ?? [], null);
        $this->setIfExists('c_list_serv', $data ?? [], null);
        $this->setIfExists('v_deducao', $data ?? [], null);
        $this->setIfExists('v_outro', $data ?? [], null);
        $this->setIfExists('v_desc_incond', $data ?? [], null);
        $this->setIfExists('v_desc_cond', $data ?? [], null);
        $this->setIfExists('v_iss_ret', $data ?? [], null);
        $this->setIfExists('ind_iss', $data ?? [], null);
        $this->setIfExists('c_servico', $data ?? [], null);
        $this->setIfExists('c_mun', $data ?? [], null);
        $this->setIfExists('c_pais', $data ?? [], null);
        $this->setIfExists('n_processo', $data ?? [], null);
        $this->setIfExists('ind_incentivo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['v_bc'] === null) {
            $invalidProperties[] = "'v_bc' can't be null";
        }
        if ($this->container['v_aliq'] === null) {
            $invalidProperties[] = "'v_aliq' can't be null";
        }
        if ($this->container['v_issqn'] === null) {
            $invalidProperties[] = "'v_issqn' can't be null";
        }
        if ($this->container['c_mun_fg'] === null) {
            $invalidProperties[] = "'c_mun_fg' can't be null";
        }
        if ($this->container['c_list_serv'] === null) {
            $invalidProperties[] = "'c_list_serv' can't be null";
        }
        if ($this->container['ind_iss'] === null) {
            $invalidProperties[] = "'ind_iss' can't be null";
        }
        if (!is_null($this->container['c_servico']) && (mb_strlen($this->container['c_servico']) > 20)) {
            $invalidProperties[] = "invalid value for 'c_servico', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['c_servico']) && (mb_strlen($this->container['c_servico']) < 1)) {
            $invalidProperties[] = "invalid value for 'c_servico', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['n_processo']) && (mb_strlen($this->container['n_processo']) > 30)) {
            $invalidProperties[] = "invalid value for 'n_processo', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['n_processo']) && (mb_strlen($this->container['n_processo']) < 1)) {
            $invalidProperties[] = "invalid value for 'n_processo', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ind_incentivo'] === null) {
            $invalidProperties[] = "'ind_incentivo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v_bc
     *
     * @return float
     */
    public function getVBc()
    {
        return $this->container['v_bc'];
    }

    /**
     * Sets v_bc
     *
     * @param float $v_bc Valor da BC do ISSQN.
     *
     * @return self
     */
    public function setVBc($v_bc)
    {
        if (is_null($v_bc)) {
            array_push($this->openAPINullablesSetToNull, 'v_bc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_bc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_bc'] = $v_bc;

        return $this;
    }

    /**
     * Gets v_aliq
     *
     * @return float
     */
    public function getVAliq()
    {
        return $this->container['v_aliq'];
    }

    /**
     * Sets v_aliq
     *
     * @param float $v_aliq Alíquota do ISSQN.
     *
     * @return self
     */
    public function setVAliq($v_aliq)
    {
        if (is_null($v_aliq)) {
            array_push($this->openAPINullablesSetToNull, 'v_aliq');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_aliq', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_aliq'] = $v_aliq;

        return $this;
    }

    /**
     * Gets v_issqn
     *
     * @return float
     */
    public function getVIssqn()
    {
        return $this->container['v_issqn'];
    }

    /**
     * Sets v_issqn
     *
     * @param float $v_issqn Valor da do ISSQN.
     *
     * @return self
     */
    public function setVIssqn($v_issqn)
    {
        if (is_null($v_issqn)) {
            array_push($this->openAPINullablesSetToNull, 'v_issqn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_issqn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_issqn'] = $v_issqn;

        return $this;
    }

    /**
     * Gets c_mun_fg
     *
     * @return string
     */
    public function getCMunFg()
    {
        return $this->container['c_mun_fg'];
    }

    /**
     * Sets c_mun_fg
     *
     * @param string $c_mun_fg Informar o município de ocorrência do fato gerador do ISSQN. Utilizar a Tabela do IBGE (Anexo VII - Tabela de UF, Município e País). “Atenção, não vincular com os campos B12, C10 ou E10” v2.0.
     *
     * @return self
     */
    public function setCMunFg($c_mun_fg)
    {
        if (is_null($c_mun_fg)) {
            array_push($this->openAPINullablesSetToNull, 'c_mun_fg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mun_fg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mun_fg'] = $c_mun_fg;

        return $this;
    }

    /**
     * Gets c_list_serv
     *
     * @return string
     */
    public function getCListServ()
    {
        return $this->container['c_list_serv'];
    }

    /**
     * Sets c_list_serv
     *
     * @param string $c_list_serv Informar o Item da lista de serviços da LC 116/03 em que se classifica o serviço.
     *
     * @return self
     */
    public function setCListServ($c_list_serv)
    {
        if (is_null($c_list_serv)) {
            array_push($this->openAPINullablesSetToNull, 'c_list_serv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_list_serv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_list_serv'] = $c_list_serv;

        return $this;
    }

    /**
     * Gets v_deducao
     *
     * @return float|null
     */
    public function getVDeducao()
    {
        return $this->container['v_deducao'];
    }

    /**
     * Sets v_deducao
     *
     * @param float|null $v_deducao Valor dedução para redução da base de cálculo.
     *
     * @return self
     */
    public function setVDeducao($v_deducao)
    {
        if (is_null($v_deducao)) {
            array_push($this->openAPINullablesSetToNull, 'v_deducao');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_deducao', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_deducao'] = $v_deducao;

        return $this;
    }

    /**
     * Gets v_outro
     *
     * @return float|null
     */
    public function getVOutro()
    {
        return $this->container['v_outro'];
    }

    /**
     * Sets v_outro
     *
     * @param float|null $v_outro Valor outras retenções.
     *
     * @return self
     */
    public function setVOutro($v_outro)
    {
        if (is_null($v_outro)) {
            array_push($this->openAPINullablesSetToNull, 'v_outro');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_outro', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_outro'] = $v_outro;

        return $this;
    }

    /**
     * Gets v_desc_incond
     *
     * @return float|null
     */
    public function getVDescIncond()
    {
        return $this->container['v_desc_incond'];
    }

    /**
     * Sets v_desc_incond
     *
     * @param float|null $v_desc_incond Valor desconto incondicionado.
     *
     * @return self
     */
    public function setVDescIncond($v_desc_incond)
    {
        if (is_null($v_desc_incond)) {
            array_push($this->openAPINullablesSetToNull, 'v_desc_incond');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_desc_incond', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_desc_incond'] = $v_desc_incond;

        return $this;
    }

    /**
     * Gets v_desc_cond
     *
     * @return float|null
     */
    public function getVDescCond()
    {
        return $this->container['v_desc_cond'];
    }

    /**
     * Sets v_desc_cond
     *
     * @param float|null $v_desc_cond Valor desconto condicionado.
     *
     * @return self
     */
    public function setVDescCond($v_desc_cond)
    {
        if (is_null($v_desc_cond)) {
            array_push($this->openAPINullablesSetToNull, 'v_desc_cond');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_desc_cond', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_desc_cond'] = $v_desc_cond;

        return $this;
    }

    /**
     * Gets v_iss_ret
     *
     * @return float|null
     */
    public function getVIssRet()
    {
        return $this->container['v_iss_ret'];
    }

    /**
     * Sets v_iss_ret
     *
     * @param float|null $v_iss_ret Valor Retenção ISS.
     *
     * @return self
     */
    public function setVIssRet($v_iss_ret)
    {
        if (is_null($v_iss_ret)) {
            array_push($this->openAPINullablesSetToNull, 'v_iss_ret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_iss_ret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_iss_ret'] = $v_iss_ret;

        return $this;
    }

    /**
     * Gets ind_iss
     *
     * @return int
     */
    public function getIndIss()
    {
        return $this->container['ind_iss'];
    }

    /**
     * Sets ind_iss
     *
     * @param int $ind_iss Exibilidade do ISS:1-Exigível  * 2 - Não incidente  * 3 - Isenção  * 4 - Exportação  * 5 - Imunidade  * 6 - Exig.Susp. Judicial  * 7 - Exig.Susp. ADM
     *
     * @return self
     */
    public function setIndIss($ind_iss)
    {
        if (is_null($ind_iss)) {
            array_push($this->openAPINullablesSetToNull, 'ind_iss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_iss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_iss'] = $ind_iss;

        return $this;
    }

    /**
     * Gets c_servico
     *
     * @return string|null
     */
    public function getCServico()
    {
        return $this->container['c_servico'];
    }

    /**
     * Sets c_servico
     *
     * @param string|null $c_servico Código do serviço prestado dentro do município.
     *
     * @return self
     */
    public function setCServico($c_servico)
    {
        if (is_null($c_servico)) {
            array_push($this->openAPINullablesSetToNull, 'c_servico');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_servico', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($c_servico) && (mb_strlen($c_servico) > 20)) {
            throw new \InvalidArgumentException('invalid length for $c_servico when calling NfeSefazISSQN., must be smaller than or equal to 20.');
        }
        if (!is_null($c_servico) && (mb_strlen($c_servico) < 1)) {
            throw new \InvalidArgumentException('invalid length for $c_servico when calling NfeSefazISSQN., must be bigger than or equal to 1.');
        }

        $this->container['c_servico'] = $c_servico;

        return $this;
    }

    /**
     * Gets c_mun
     *
     * @return string|null
     */
    public function getCMun()
    {
        return $this->container['c_mun'];
    }

    /**
     * Sets c_mun
     *
     * @param string|null $c_mun Código do Município de Incidência do Imposto.
     *
     * @return self
     */
    public function setCMun($c_mun)
    {
        if (is_null($c_mun)) {
            array_push($this->openAPINullablesSetToNull, 'c_mun');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mun', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mun'] = $c_mun;

        return $this;
    }

    /**
     * Gets c_pais
     *
     * @return string|null
     */
    public function getCPais()
    {
        return $this->container['c_pais'];
    }

    /**
     * Sets c_pais
     *
     * @param string|null $c_pais Código de Pais.
     *
     * @return self
     */
    public function setCPais($c_pais)
    {
        if (is_null($c_pais)) {
            array_push($this->openAPINullablesSetToNull, 'c_pais');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_pais', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_pais'] = $c_pais;

        return $this;
    }

    /**
     * Gets n_processo
     *
     * @return string|null
     */
    public function getNProcesso()
    {
        return $this->container['n_processo'];
    }

    /**
     * Sets n_processo
     *
     * @param string|null $n_processo Número do Processo administrativo ou judicial de suspenção do processo.
     *
     * @return self
     */
    public function setNProcesso($n_processo)
    {
        if (is_null($n_processo)) {
            array_push($this->openAPINullablesSetToNull, 'n_processo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_processo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_processo) && (mb_strlen($n_processo) > 30)) {
            throw new \InvalidArgumentException('invalid length for $n_processo when calling NfeSefazISSQN., must be smaller than or equal to 30.');
        }
        if (!is_null($n_processo) && (mb_strlen($n_processo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_processo when calling NfeSefazISSQN., must be bigger than or equal to 1.');
        }

        $this->container['n_processo'] = $n_processo;

        return $this;
    }

    /**
     * Gets ind_incentivo
     *
     * @return int
     */
    public function getIndIncentivo()
    {
        return $this->container['ind_incentivo'];
    }

    /**
     * Sets ind_incentivo
     *
     * @param int $ind_incentivo Indicador de Incentivo Fiscal. 1=Sim  * 2 - Não
     *
     * @return self
     */
    public function setIndIncentivo($ind_incentivo)
    {
        if (is_null($ind_incentivo)) {
            array_push($this->openAPINullablesSetToNull, 'ind_incentivo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_incentivo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_incentivo'] = $ind_incentivo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


