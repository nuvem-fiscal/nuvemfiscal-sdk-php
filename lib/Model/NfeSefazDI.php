<?php
/**
 * NfeSefazDI
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazDI Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazDI implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazDI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'n_di' => 'string',
        'd_di' => '\DateTime',
        'x_loc_desemb' => 'string',
        'uf_desemb' => 'string',
        'd_desemb' => '\DateTime',
        'tp_via_transp' => 'int',
        'v_afrmm' => 'float',
        'tp_intermedio' => 'int',
        'cnpj' => 'string',
        'uf_terceiro' => 'string',
        'c_exportador' => 'string',
        'adi' => '\NuvemFiscal\Model\NfeSefazAdi[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'n_di' => null,
        'd_di' => 'date',
        'x_loc_desemb' => null,
        'uf_desemb' => null,
        'd_desemb' => 'date',
        'tp_via_transp' => null,
        'v_afrmm' => null,
        'tp_intermedio' => null,
        'cnpj' => null,
        'uf_terceiro' => null,
        'c_exportador' => null,
        'adi' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'n_di' => false,
		'd_di' => false,
		'x_loc_desemb' => false,
		'uf_desemb' => false,
		'd_desemb' => false,
		'tp_via_transp' => false,
		'v_afrmm' => false,
		'tp_intermedio' => false,
		'cnpj' => false,
		'uf_terceiro' => false,
		'c_exportador' => false,
		'adi' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'n_di' => 'nDI',
        'd_di' => 'dDI',
        'x_loc_desemb' => 'xLocDesemb',
        'uf_desemb' => 'UFDesemb',
        'd_desemb' => 'dDesemb',
        'tp_via_transp' => 'tpViaTransp',
        'v_afrmm' => 'vAFRMM',
        'tp_intermedio' => 'tpIntermedio',
        'cnpj' => 'CNPJ',
        'uf_terceiro' => 'UFTerceiro',
        'c_exportador' => 'cExportador',
        'adi' => 'adi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'n_di' => 'setNDi',
        'd_di' => 'setDDi',
        'x_loc_desemb' => 'setXLocDesemb',
        'uf_desemb' => 'setUfDesemb',
        'd_desemb' => 'setDDesemb',
        'tp_via_transp' => 'setTpViaTransp',
        'v_afrmm' => 'setVAfrmm',
        'tp_intermedio' => 'setTpIntermedio',
        'cnpj' => 'setCnpj',
        'uf_terceiro' => 'setUfTerceiro',
        'c_exportador' => 'setCExportador',
        'adi' => 'setAdi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'n_di' => 'getNDi',
        'd_di' => 'getDDi',
        'x_loc_desemb' => 'getXLocDesemb',
        'uf_desemb' => 'getUfDesemb',
        'd_desemb' => 'getDDesemb',
        'tp_via_transp' => 'getTpViaTransp',
        'v_afrmm' => 'getVAfrmm',
        'tp_intermedio' => 'getTpIntermedio',
        'cnpj' => 'getCnpj',
        'uf_terceiro' => 'getUfTerceiro',
        'c_exportador' => 'getCExportador',
        'adi' => 'getAdi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('n_di', $data ?? [], null);
        $this->setIfExists('d_di', $data ?? [], null);
        $this->setIfExists('x_loc_desemb', $data ?? [], null);
        $this->setIfExists('uf_desemb', $data ?? [], null);
        $this->setIfExists('d_desemb', $data ?? [], null);
        $this->setIfExists('tp_via_transp', $data ?? [], null);
        $this->setIfExists('v_afrmm', $data ?? [], null);
        $this->setIfExists('tp_intermedio', $data ?? [], null);
        $this->setIfExists('cnpj', $data ?? [], null);
        $this->setIfExists('uf_terceiro', $data ?? [], null);
        $this->setIfExists('c_exportador', $data ?? [], null);
        $this->setIfExists('adi', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['n_di'] === null) {
            $invalidProperties[] = "'n_di' can't be null";
        }
        if ($this->container['d_di'] === null) {
            $invalidProperties[] = "'d_di' can't be null";
        }
        if ($this->container['x_loc_desemb'] === null) {
            $invalidProperties[] = "'x_loc_desemb' can't be null";
        }
        if ($this->container['uf_desemb'] === null) {
            $invalidProperties[] = "'uf_desemb' can't be null";
        }
        if ($this->container['d_desemb'] === null) {
            $invalidProperties[] = "'d_desemb' can't be null";
        }
        if ($this->container['tp_via_transp'] === null) {
            $invalidProperties[] = "'tp_via_transp' can't be null";
        }
        if ($this->container['tp_intermedio'] === null) {
            $invalidProperties[] = "'tp_intermedio' can't be null";
        }
        if ($this->container['c_exportador'] === null) {
            $invalidProperties[] = "'c_exportador' can't be null";
        }
        if ($this->container['adi'] === null) {
            $invalidProperties[] = "'adi' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets n_di
     *
     * @return string
     */
    public function getNDi()
    {
        return $this->container['n_di'];
    }

    /**
     * Sets n_di
     *
     * @param string $n_di Numero do Documento de Importação DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E) (NT2011/004).
     *
     * @return self
     */
    public function setNDi($n_di)
    {

        if (is_null($n_di)) {
            throw new \InvalidArgumentException('non-nullable n_di cannot be null');
        }

        $this->container['n_di'] = $n_di;

        return $this;
    }

    /**
     * Gets d_di
     *
     * @return \DateTime
     */
    public function getDDi()
    {
        return $this->container['d_di'];
    }

    /**
     * Sets d_di
     *
     * @param \DateTime $d_di Data de registro da DI/DSI/DA (AAAA-MM-DD).
     *
     * @return self
     */
    public function setDDi($d_di)
    {

        if (is_null($d_di)) {
            throw new \InvalidArgumentException('non-nullable d_di cannot be null');
        }

        $this->container['d_di'] = $d_di;

        return $this;
    }

    /**
     * Gets x_loc_desemb
     *
     * @return string
     */
    public function getXLocDesemb()
    {
        return $this->container['x_loc_desemb'];
    }

    /**
     * Sets x_loc_desemb
     *
     * @param string $x_loc_desemb Local do desembaraço aduaneiro.
     *
     * @return self
     */
    public function setXLocDesemb($x_loc_desemb)
    {

        if (is_null($x_loc_desemb)) {
            throw new \InvalidArgumentException('non-nullable x_loc_desemb cannot be null');
        }

        $this->container['x_loc_desemb'] = $x_loc_desemb;

        return $this;
    }

    /**
     * Gets uf_desemb
     *
     * @return string
     */
    public function getUfDesemb()
    {
        return $this->container['uf_desemb'];
    }

    /**
     * Sets uf_desemb
     *
     * @param string $uf_desemb UF onde ocorreu o desembaraço aduaneiro.
     *
     * @return self
     */
    public function setUfDesemb($uf_desemb)
    {

        if (is_null($uf_desemb)) {
            throw new \InvalidArgumentException('non-nullable uf_desemb cannot be null');
        }

        $this->container['uf_desemb'] = $uf_desemb;

        return $this;
    }

    /**
     * Gets d_desemb
     *
     * @return \DateTime
     */
    public function getDDesemb()
    {
        return $this->container['d_desemb'];
    }

    /**
     * Sets d_desemb
     *
     * @param \DateTime $d_desemb Data do desembaraço aduaneiro (AAAA-MM-DD).
     *
     * @return self
     */
    public function setDDesemb($d_desemb)
    {

        if (is_null($d_desemb)) {
            throw new \InvalidArgumentException('non-nullable d_desemb cannot be null');
        }

        $this->container['d_desemb'] = $d_desemb;

        return $this;
    }

    /**
     * Gets tp_via_transp
     *
     * @return int
     */
    public function getTpViaTransp()
    {
        return $this->container['tp_via_transp'];
    }

    /**
     * Sets tp_via_transp
     *
     * @param int $tp_via_transp Via de transporte internacional informada na DI                   1-Maritima;2-Fluvial;3-Lacustre;4-Aerea;5-Postal;6-Ferroviaria;7-Rodoviaria;8-Conduto;9-Meios Proprios;10-Entrada/Saida Ficta;                   11-Courier;12-Em maos;13-Por reboque.
     *
     * @return self
     */
    public function setTpViaTransp($tp_via_transp)
    {

        if (is_null($tp_via_transp)) {
            throw new \InvalidArgumentException('non-nullable tp_via_transp cannot be null');
        }

        $this->container['tp_via_transp'] = $tp_via_transp;

        return $this;
    }

    /**
     * Gets v_afrmm
     *
     * @return float|null
     */
    public function getVAfrmm()
    {
        return $this->container['v_afrmm'];
    }

    /**
     * Sets v_afrmm
     *
     * @param float|null $v_afrmm Valor Adicional ao frete para renovação de marinha mercante.
     *
     * @return self
     */
    public function setVAfrmm($v_afrmm)
    {

        if (is_null($v_afrmm)) {
            throw new \InvalidArgumentException('non-nullable v_afrmm cannot be null');
        }

        $this->container['v_afrmm'] = $v_afrmm;

        return $this;
    }

    /**
     * Gets tp_intermedio
     *
     * @return int
     */
    public function getTpIntermedio()
    {
        return $this->container['tp_intermedio'];
    }

    /**
     * Sets tp_intermedio
     *
     * @param int $tp_intermedio Forma de Importação quanto a intermediação                    1-por conta propria;2-por conta e ordem;3-encomenda.
     *
     * @return self
     */
    public function setTpIntermedio($tp_intermedio)
    {

        if (is_null($tp_intermedio)) {
            throw new \InvalidArgumentException('non-nullable tp_intermedio cannot be null');
        }

        $this->container['tp_intermedio'] = $tp_intermedio;

        return $this;
    }

    /**
     * Gets cnpj
     *
     * @return string|null
     */
    public function getCnpj()
    {
        return $this->container['cnpj'];
    }

    /**
     * Sets cnpj
     *
     * @param string|null $cnpj CNPJ do adquirente ou do encomendante.
     *
     * @return self
     */
    public function setCnpj($cnpj)
    {

        if (is_null($cnpj)) {
            throw new \InvalidArgumentException('non-nullable cnpj cannot be null');
        }

        $this->container['cnpj'] = $cnpj;

        return $this;
    }

    /**
     * Gets uf_terceiro
     *
     * @return string|null
     */
    public function getUfTerceiro()
    {
        return $this->container['uf_terceiro'];
    }

    /**
     * Sets uf_terceiro
     *
     * @param string|null $uf_terceiro Sigla da UF do adquirente ou do encomendante.
     *
     * @return self
     */
    public function setUfTerceiro($uf_terceiro)
    {

        if (is_null($uf_terceiro)) {
            throw new \InvalidArgumentException('non-nullable uf_terceiro cannot be null');
        }

        $this->container['uf_terceiro'] = $uf_terceiro;

        return $this;
    }

    /**
     * Gets c_exportador
     *
     * @return string
     */
    public function getCExportador()
    {
        return $this->container['c_exportador'];
    }

    /**
     * Sets c_exportador
     *
     * @param string $c_exportador Código do exportador (usado nos sistemas internos de informação do emitente da NF-e).
     *
     * @return self
     */
    public function setCExportador($c_exportador)
    {

        if (is_null($c_exportador)) {
            throw new \InvalidArgumentException('non-nullable c_exportador cannot be null');
        }

        $this->container['c_exportador'] = $c_exportador;

        return $this;
    }

    /**
     * Gets adi
     *
     * @return \NuvemFiscal\Model\NfeSefazAdi[]
     */
    public function getAdi()
    {
        return $this->container['adi'];
    }

    /**
     * Sets adi
     *
     * @param \NuvemFiscal\Model\NfeSefazAdi[] $adi Adições (NT 2011/004).
     *
     * @return self
     */
    public function setAdi($adi)
    {

        if (is_null($adi)) {
            throw new \InvalidArgumentException('non-nullable adi cannot be null');
        }

        $this->container['adi'] = $adi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


