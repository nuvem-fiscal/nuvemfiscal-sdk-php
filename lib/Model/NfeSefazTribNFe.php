<?php
/**
 * NfeSefazTribNFe
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazTribNFe Class Doc Comment
 *
 * @category Class
 * @description Grupo de informações dos tributos IBS, CBS e Imposto Seletivo.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazTribNFe implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazTribNFe';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cst' => 'string',
        'c_class_trib' => 'string',
        'g_ibscbs' => '\NuvemFiscal\Model\NfeSefazCIBS',
        'g_ibscbs_mono' => '\NuvemFiscal\Model\NfeSefazMonofasia',
        'g_transf_cred' => '\NuvemFiscal\Model\NfeSefazTransfCred',
        'g_cred_pres_ibszfm' => '\NuvemFiscal\Model\NfeSefazCredPresIBSZFM'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cst' => null,
        'c_class_trib' => null,
        'g_ibscbs' => null,
        'g_ibscbs_mono' => null,
        'g_transf_cred' => null,
        'g_cred_pres_ibszfm' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cst' => true,
        'c_class_trib' => true,
        'g_ibscbs' => false,
        'g_ibscbs_mono' => false,
        'g_transf_cred' => false,
        'g_cred_pres_ibszfm' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cst' => 'CST',
        'c_class_trib' => 'cClassTrib',
        'g_ibscbs' => 'gIBSCBS',
        'g_ibscbs_mono' => 'gIBSCBSMono',
        'g_transf_cred' => 'gTransfCred',
        'g_cred_pres_ibszfm' => 'gCredPresIBSZFM'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cst' => 'setCst',
        'c_class_trib' => 'setCClassTrib',
        'g_ibscbs' => 'setGIbscbs',
        'g_ibscbs_mono' => 'setGIbscbsMono',
        'g_transf_cred' => 'setGTransfCred',
        'g_cred_pres_ibszfm' => 'setGCredPresIbszfm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cst' => 'getCst',
        'c_class_trib' => 'getCClassTrib',
        'g_ibscbs' => 'getGIbscbs',
        'g_ibscbs_mono' => 'getGIbscbsMono',
        'g_transf_cred' => 'getGTransfCred',
        'g_cred_pres_ibszfm' => 'getGCredPresIbszfm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cst', $data ?? [], null);
        $this->setIfExists('c_class_trib', $data ?? [], null);
        $this->setIfExists('g_ibscbs', $data ?? [], null);
        $this->setIfExists('g_ibscbs_mono', $data ?? [], null);
        $this->setIfExists('g_transf_cred', $data ?? [], null);
        $this->setIfExists('g_cred_pres_ibszfm', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cst'] === null) {
            $invalidProperties[] = "'cst' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cst
     *
     * @return string
     */
    public function getCst()
    {
        return $this->container['cst'];
    }

    /**
     * Sets cst
     *
     * @param string $cst Código Situação Tributária do IBS/CBS.
     *
     * @return self
     */
    public function setCst($cst)
    {
        if (is_null($cst)) {
            array_push($this->openAPINullablesSetToNull, 'cst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cst'] = $cst;

        return $this;
    }

    /**
     * Gets c_class_trib
     *
     * @return string|null
     */
    public function getCClassTrib()
    {
        return $this->container['c_class_trib'];
    }

    /**
     * Sets c_class_trib
     *
     * @param string|null $c_class_trib c_class_trib
     *
     * @return self
     */
    public function setCClassTrib($c_class_trib)
    {
        if (is_null($c_class_trib)) {
            array_push($this->openAPINullablesSetToNull, 'c_class_trib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_class_trib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_class_trib'] = $c_class_trib;

        return $this;
    }

    /**
     * Gets g_ibscbs
     *
     * @return \NuvemFiscal\Model\NfeSefazCIBS|null
     */
    public function getGIbscbs()
    {
        return $this->container['g_ibscbs'];
    }

    /**
     * Sets g_ibscbs
     *
     * @param \NuvemFiscal\Model\NfeSefazCIBS|null $g_ibscbs g_ibscbs
     *
     * @return self
     */
    public function setGIbscbs($g_ibscbs)
    {
        if (is_null($g_ibscbs)) {
            throw new \InvalidArgumentException('non-nullable g_ibscbs cannot be null');
        }
        $this->container['g_ibscbs'] = $g_ibscbs;

        return $this;
    }

    /**
     * Gets g_ibscbs_mono
     *
     * @return \NuvemFiscal\Model\NfeSefazMonofasia|null
     */
    public function getGIbscbsMono()
    {
        return $this->container['g_ibscbs_mono'];
    }

    /**
     * Sets g_ibscbs_mono
     *
     * @param \NuvemFiscal\Model\NfeSefazMonofasia|null $g_ibscbs_mono g_ibscbs_mono
     *
     * @return self
     */
    public function setGIbscbsMono($g_ibscbs_mono)
    {
        if (is_null($g_ibscbs_mono)) {
            throw new \InvalidArgumentException('non-nullable g_ibscbs_mono cannot be null');
        }
        $this->container['g_ibscbs_mono'] = $g_ibscbs_mono;

        return $this;
    }

    /**
     * Gets g_transf_cred
     *
     * @return \NuvemFiscal\Model\NfeSefazTransfCred|null
     */
    public function getGTransfCred()
    {
        return $this->container['g_transf_cred'];
    }

    /**
     * Sets g_transf_cred
     *
     * @param \NuvemFiscal\Model\NfeSefazTransfCred|null $g_transf_cred g_transf_cred
     *
     * @return self
     */
    public function setGTransfCred($g_transf_cred)
    {
        if (is_null($g_transf_cred)) {
            throw new \InvalidArgumentException('non-nullable g_transf_cred cannot be null');
        }
        $this->container['g_transf_cred'] = $g_transf_cred;

        return $this;
    }

    /**
     * Gets g_cred_pres_ibszfm
     *
     * @return \NuvemFiscal\Model\NfeSefazCredPresIBSZFM|null
     */
    public function getGCredPresIbszfm()
    {
        return $this->container['g_cred_pres_ibszfm'];
    }

    /**
     * Sets g_cred_pres_ibszfm
     *
     * @param \NuvemFiscal\Model\NfeSefazCredPresIBSZFM|null $g_cred_pres_ibszfm g_cred_pres_ibszfm
     *
     * @return self
     */
    public function setGCredPresIbszfm($g_cred_pres_ibszfm)
    {
        if (is_null($g_cred_pres_ibszfm)) {
            throw new \InvalidArgumentException('non-nullable g_cred_pres_ibszfm cannot be null');
        }
        $this->container['g_cred_pres_ibszfm'] = $g_cred_pres_ibszfm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


