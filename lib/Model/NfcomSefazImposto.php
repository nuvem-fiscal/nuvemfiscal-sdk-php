<?php
/**
 * NfcomSefazImposto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfcomSefazImposto Class Doc Comment
 *
 * @category Class
 * @description Tributos incidentes no Produto ou Serviço.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfcomSefazImposto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfcomSefazImposto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'icms00' => '\NuvemFiscal\Model\NfcomSefazICMS00',
        'icms20' => '\NuvemFiscal\Model\NfcomSefazICMS20',
        'icms40' => '\NuvemFiscal\Model\NfcomSefazICMS40',
        'icms51' => '\NuvemFiscal\Model\NfcomSefazICMS51',
        'icms90' => '\NuvemFiscal\Model\NfcomSefazICMS90',
        'icmssn' => '\NuvemFiscal\Model\NfcomSefazICMSSN',
        'icmsuf_dest' => '\NuvemFiscal\Model\NfcomSefazICMSUFDest[]',
        'ind_sem_cst' => 'int',
        'pis' => '\NuvemFiscal\Model\NfcomSefazPIS',
        'cofins' => '\NuvemFiscal\Model\NfcomSefazCOFINS',
        'fust' => '\NuvemFiscal\Model\NfcomSefazFUST',
        'funttel' => '\NuvemFiscal\Model\NfcomSefazFUNTTEL',
        'ret_trib' => '\NuvemFiscal\Model\NfcomSefazRetTrib'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'icms00' => null,
        'icms20' => null,
        'icms40' => null,
        'icms51' => null,
        'icms90' => null,
        'icmssn' => null,
        'icmsuf_dest' => null,
        'ind_sem_cst' => null,
        'pis' => null,
        'cofins' => null,
        'fust' => null,
        'funttel' => null,
        'ret_trib' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'icms00' => false,
        'icms20' => false,
        'icms40' => false,
        'icms51' => false,
        'icms90' => false,
        'icmssn' => false,
        'icmsuf_dest' => false,
        'ind_sem_cst' => true,
        'pis' => false,
        'cofins' => false,
        'fust' => false,
        'funttel' => false,
        'ret_trib' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icms00' => 'ICMS00',
        'icms20' => 'ICMS20',
        'icms40' => 'ICMS40',
        'icms51' => 'ICMS51',
        'icms90' => 'ICMS90',
        'icmssn' => 'ICMSSN',
        'icmsuf_dest' => 'ICMSUFDest',
        'ind_sem_cst' => 'indSemCST',
        'pis' => 'PIS',
        'cofins' => 'COFINS',
        'fust' => 'FUST',
        'funttel' => 'FUNTTEL',
        'ret_trib' => 'retTrib'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icms00' => 'setIcms00',
        'icms20' => 'setIcms20',
        'icms40' => 'setIcms40',
        'icms51' => 'setIcms51',
        'icms90' => 'setIcms90',
        'icmssn' => 'setIcmssn',
        'icmsuf_dest' => 'setIcmsufDest',
        'ind_sem_cst' => 'setIndSemCst',
        'pis' => 'setPis',
        'cofins' => 'setCofins',
        'fust' => 'setFust',
        'funttel' => 'setFunttel',
        'ret_trib' => 'setRetTrib'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icms00' => 'getIcms00',
        'icms20' => 'getIcms20',
        'icms40' => 'getIcms40',
        'icms51' => 'getIcms51',
        'icms90' => 'getIcms90',
        'icmssn' => 'getIcmssn',
        'icmsuf_dest' => 'getIcmsufDest',
        'ind_sem_cst' => 'getIndSemCst',
        'pis' => 'getPis',
        'cofins' => 'getCofins',
        'fust' => 'getFust',
        'funttel' => 'getFunttel',
        'ret_trib' => 'getRetTrib'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('icms00', $data ?? [], null);
        $this->setIfExists('icms20', $data ?? [], null);
        $this->setIfExists('icms40', $data ?? [], null);
        $this->setIfExists('icms51', $data ?? [], null);
        $this->setIfExists('icms90', $data ?? [], null);
        $this->setIfExists('icmssn', $data ?? [], null);
        $this->setIfExists('icmsuf_dest', $data ?? [], null);
        $this->setIfExists('ind_sem_cst', $data ?? [], null);
        $this->setIfExists('pis', $data ?? [], null);
        $this->setIfExists('cofins', $data ?? [], null);
        $this->setIfExists('fust', $data ?? [], null);
        $this->setIfExists('funttel', $data ?? [], null);
        $this->setIfExists('ret_trib', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icms00
     *
     * @return \NuvemFiscal\Model\NfcomSefazICMS00|null
     */
    public function getIcms00()
    {
        return $this->container['icms00'];
    }

    /**
     * Sets icms00
     *
     * @param \NuvemFiscal\Model\NfcomSefazICMS00|null $icms00 icms00
     *
     * @return self
     */
    public function setIcms00($icms00)
    {
        if (is_null($icms00)) {
            throw new \InvalidArgumentException('non-nullable icms00 cannot be null');
        }
        $this->container['icms00'] = $icms00;

        return $this;
    }

    /**
     * Gets icms20
     *
     * @return \NuvemFiscal\Model\NfcomSefazICMS20|null
     */
    public function getIcms20()
    {
        return $this->container['icms20'];
    }

    /**
     * Sets icms20
     *
     * @param \NuvemFiscal\Model\NfcomSefazICMS20|null $icms20 icms20
     *
     * @return self
     */
    public function setIcms20($icms20)
    {
        if (is_null($icms20)) {
            throw new \InvalidArgumentException('non-nullable icms20 cannot be null');
        }
        $this->container['icms20'] = $icms20;

        return $this;
    }

    /**
     * Gets icms40
     *
     * @return \NuvemFiscal\Model\NfcomSefazICMS40|null
     */
    public function getIcms40()
    {
        return $this->container['icms40'];
    }

    /**
     * Sets icms40
     *
     * @param \NuvemFiscal\Model\NfcomSefazICMS40|null $icms40 icms40
     *
     * @return self
     */
    public function setIcms40($icms40)
    {
        if (is_null($icms40)) {
            throw new \InvalidArgumentException('non-nullable icms40 cannot be null');
        }
        $this->container['icms40'] = $icms40;

        return $this;
    }

    /**
     * Gets icms51
     *
     * @return \NuvemFiscal\Model\NfcomSefazICMS51|null
     */
    public function getIcms51()
    {
        return $this->container['icms51'];
    }

    /**
     * Sets icms51
     *
     * @param \NuvemFiscal\Model\NfcomSefazICMS51|null $icms51 icms51
     *
     * @return self
     */
    public function setIcms51($icms51)
    {
        if (is_null($icms51)) {
            throw new \InvalidArgumentException('non-nullable icms51 cannot be null');
        }
        $this->container['icms51'] = $icms51;

        return $this;
    }

    /**
     * Gets icms90
     *
     * @return \NuvemFiscal\Model\NfcomSefazICMS90|null
     */
    public function getIcms90()
    {
        return $this->container['icms90'];
    }

    /**
     * Sets icms90
     *
     * @param \NuvemFiscal\Model\NfcomSefazICMS90|null $icms90 icms90
     *
     * @return self
     */
    public function setIcms90($icms90)
    {
        if (is_null($icms90)) {
            throw new \InvalidArgumentException('non-nullable icms90 cannot be null');
        }
        $this->container['icms90'] = $icms90;

        return $this;
    }

    /**
     * Gets icmssn
     *
     * @return \NuvemFiscal\Model\NfcomSefazICMSSN|null
     */
    public function getIcmssn()
    {
        return $this->container['icmssn'];
    }

    /**
     * Sets icmssn
     *
     * @param \NuvemFiscal\Model\NfcomSefazICMSSN|null $icmssn icmssn
     *
     * @return self
     */
    public function setIcmssn($icmssn)
    {
        if (is_null($icmssn)) {
            throw new \InvalidArgumentException('non-nullable icmssn cannot be null');
        }
        $this->container['icmssn'] = $icmssn;

        return $this;
    }

    /**
     * Gets icmsuf_dest
     *
     * @return \NuvemFiscal\Model\NfcomSefazICMSUFDest[]|null
     */
    public function getIcmsufDest()
    {
        return $this->container['icmsuf_dest'];
    }

    /**
     * Sets icmsuf_dest
     *
     * @param \NuvemFiscal\Model\NfcomSefazICMSUFDest[]|null $icmsuf_dest icmsuf_dest
     *
     * @return self
     */
    public function setIcmsufDest($icmsuf_dest)
    {
        if (is_null($icmsuf_dest)) {
            throw new \InvalidArgumentException('non-nullable icmsuf_dest cannot be null');
        }
        $this->container['icmsuf_dest'] = $icmsuf_dest;

        return $this;
    }

    /**
     * Gets ind_sem_cst
     *
     * @return int|null
     */
    public function getIndSemCst()
    {
        return $this->container['ind_sem_cst'];
    }

    /**
     * Sets ind_sem_cst
     *
     * @param int|null $ind_sem_cst Sem Situação Tributária para o ICMS.  Informar para itens que não tenham nenhuma relação com o ICMS.  Quando informado o item NÃO PODE ter CFOP informado  Se informado esse grupo o schema não permite informar nenhum dos grupos de ICMSXX.
     *
     * @return self
     */
    public function setIndSemCst($ind_sem_cst)
    {
        if (is_null($ind_sem_cst)) {
            array_push($this->openAPINullablesSetToNull, 'ind_sem_cst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_sem_cst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_sem_cst'] = $ind_sem_cst;

        return $this;
    }

    /**
     * Gets pis
     *
     * @return \NuvemFiscal\Model\NfcomSefazPIS|null
     */
    public function getPis()
    {
        return $this->container['pis'];
    }

    /**
     * Sets pis
     *
     * @param \NuvemFiscal\Model\NfcomSefazPIS|null $pis pis
     *
     * @return self
     */
    public function setPis($pis)
    {
        if (is_null($pis)) {
            throw new \InvalidArgumentException('non-nullable pis cannot be null');
        }
        $this->container['pis'] = $pis;

        return $this;
    }

    /**
     * Gets cofins
     *
     * @return \NuvemFiscal\Model\NfcomSefazCOFINS|null
     */
    public function getCofins()
    {
        return $this->container['cofins'];
    }

    /**
     * Sets cofins
     *
     * @param \NuvemFiscal\Model\NfcomSefazCOFINS|null $cofins cofins
     *
     * @return self
     */
    public function setCofins($cofins)
    {
        if (is_null($cofins)) {
            throw new \InvalidArgumentException('non-nullable cofins cannot be null');
        }
        $this->container['cofins'] = $cofins;

        return $this;
    }

    /**
     * Gets fust
     *
     * @return \NuvemFiscal\Model\NfcomSefazFUST|null
     */
    public function getFust()
    {
        return $this->container['fust'];
    }

    /**
     * Sets fust
     *
     * @param \NuvemFiscal\Model\NfcomSefazFUST|null $fust fust
     *
     * @return self
     */
    public function setFust($fust)
    {
        if (is_null($fust)) {
            throw new \InvalidArgumentException('non-nullable fust cannot be null');
        }
        $this->container['fust'] = $fust;

        return $this;
    }

    /**
     * Gets funttel
     *
     * @return \NuvemFiscal\Model\NfcomSefazFUNTTEL|null
     */
    public function getFunttel()
    {
        return $this->container['funttel'];
    }

    /**
     * Sets funttel
     *
     * @param \NuvemFiscal\Model\NfcomSefazFUNTTEL|null $funttel funttel
     *
     * @return self
     */
    public function setFunttel($funttel)
    {
        if (is_null($funttel)) {
            throw new \InvalidArgumentException('non-nullable funttel cannot be null');
        }
        $this->container['funttel'] = $funttel;

        return $this;
    }

    /**
     * Gets ret_trib
     *
     * @return \NuvemFiscal\Model\NfcomSefazRetTrib|null
     */
    public function getRetTrib()
    {
        return $this->container['ret_trib'];
    }

    /**
     * Sets ret_trib
     *
     * @param \NuvemFiscal\Model\NfcomSefazRetTrib|null $ret_trib ret_trib
     *
     * @return self
     */
    public function setRetTrib($ret_trib)
    {
        if (is_null($ret_trib)) {
            throw new \InvalidArgumentException('non-nullable ret_trib cannot be null');
        }
        $this->container['ret_trib'] = $ret_trib;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


