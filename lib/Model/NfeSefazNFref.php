<?php
/**
 * NfeSefazNFref
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazNFref Class Doc Comment
 *
 * @category Class
 * @description Grupo de infromações da NF referenciada.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazNFref implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazNFref';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ref_nfe' => 'string',
        'ref_nfe_sig' => 'string',
        'ref_nf' => '\NuvemFiscal\Model\NfeSefazRefNF',
        'ref_nfp' => '\NuvemFiscal\Model\NfeSefazRefNFP',
        'ref_cte' => 'string',
        'ref_ecf' => '\NuvemFiscal\Model\NfeSefazRefECF'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ref_nfe' => null,
        'ref_nfe_sig' => null,
        'ref_nf' => null,
        'ref_nfp' => null,
        'ref_cte' => null,
        'ref_ecf' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ref_nfe' => true,
		'ref_nfe_sig' => true,
		'ref_nf' => false,
		'ref_nfp' => false,
		'ref_cte' => true,
		'ref_ecf' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_nfe' => 'refNFe',
        'ref_nfe_sig' => 'refNFeSig',
        'ref_nf' => 'refNF',
        'ref_nfp' => 'refNFP',
        'ref_cte' => 'refCTe',
        'ref_ecf' => 'refECF'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref_nfe' => 'setRefNfe',
        'ref_nfe_sig' => 'setRefNfeSig',
        'ref_nf' => 'setRefNf',
        'ref_nfp' => 'setRefNfp',
        'ref_cte' => 'setRefCte',
        'ref_ecf' => 'setRefEcf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref_nfe' => 'getRefNfe',
        'ref_nfe_sig' => 'getRefNfeSig',
        'ref_nf' => 'getRefNf',
        'ref_nfp' => 'getRefNfp',
        'ref_cte' => 'getRefCte',
        'ref_ecf' => 'getRefEcf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ref_nfe', $data ?? [], null);
        $this->setIfExists('ref_nfe_sig', $data ?? [], null);
        $this->setIfExists('ref_nf', $data ?? [], null);
        $this->setIfExists('ref_nfp', $data ?? [], null);
        $this->setIfExists('ref_cte', $data ?? [], null);
        $this->setIfExists('ref_ecf', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ref_nfe']) && (mb_strlen($this->container['ref_nfe']) > 44)) {
            $invalidProperties[] = "invalid value for 'ref_nfe', the character length must be smaller than or equal to 44.";
        }

        if (!is_null($this->container['ref_nfe_sig']) && (mb_strlen($this->container['ref_nfe_sig']) > 44)) {
            $invalidProperties[] = "invalid value for 'ref_nfe_sig', the character length must be smaller than or equal to 44.";
        }

        if (!is_null($this->container['ref_cte']) && (mb_strlen($this->container['ref_cte']) > 44)) {
            $invalidProperties[] = "invalid value for 'ref_cte', the character length must be smaller than or equal to 44.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref_nfe
     *
     * @return string|null
     */
    public function getRefNfe()
    {
        return $this->container['ref_nfe'];
    }

    /**
     * Sets ref_nfe
     *
     * @param string|null $ref_nfe Chave de acesso das NF-e referenciadas. Chave de acesso compostas por Código da UF (tabela do IBGE) + AAMM da emissão + CNPJ do Emitente + modelo, série e número da NF-e Referenciada + Código Numérico + DV.
     *
     * @return self
     */
    public function setRefNfe($ref_nfe)
    {
        if (is_null($ref_nfe)) {
            array_push($this->openAPINullablesSetToNull, 'ref_nfe');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_nfe', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ref_nfe) && (mb_strlen($ref_nfe) > 44)) {
            throw new \InvalidArgumentException('invalid length for $ref_nfe when calling NfeSefazNFref., must be smaller than or equal to 44.');
        }

        $this->container['ref_nfe'] = $ref_nfe;

        return $this;
    }

    /**
     * Gets ref_nfe_sig
     *
     * @return string|null
     */
    public function getRefNfeSig()
    {
        return $this->container['ref_nfe_sig'];
    }

    /**
     * Sets ref_nfe_sig
     *
     * @param string|null $ref_nfe_sig Referencia uma NF-e (modelo 55) emitida anteriormente pela sua Chave de Acesso com código numérico zerado, permitindo manter o sigilo da NF-e referenciada.
     *
     * @return self
     */
    public function setRefNfeSig($ref_nfe_sig)
    {
        if (is_null($ref_nfe_sig)) {
            array_push($this->openAPINullablesSetToNull, 'ref_nfe_sig');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_nfe_sig', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ref_nfe_sig) && (mb_strlen($ref_nfe_sig) > 44)) {
            throw new \InvalidArgumentException('invalid length for $ref_nfe_sig when calling NfeSefazNFref., must be smaller than or equal to 44.');
        }

        $this->container['ref_nfe_sig'] = $ref_nfe_sig;

        return $this;
    }

    /**
     * Gets ref_nf
     *
     * @return \NuvemFiscal\Model\NfeSefazRefNF|null
     */
    public function getRefNf()
    {
        return $this->container['ref_nf'];
    }

    /**
     * Sets ref_nf
     *
     * @param \NuvemFiscal\Model\NfeSefazRefNF|null $ref_nf ref_nf
     *
     * @return self
     */
    public function setRefNf($ref_nf)
    {
        if (is_null($ref_nf)) {
            throw new \InvalidArgumentException('non-nullable ref_nf cannot be null');
        }
        $this->container['ref_nf'] = $ref_nf;

        return $this;
    }

    /**
     * Gets ref_nfp
     *
     * @return \NuvemFiscal\Model\NfeSefazRefNFP|null
     */
    public function getRefNfp()
    {
        return $this->container['ref_nfp'];
    }

    /**
     * Sets ref_nfp
     *
     * @param \NuvemFiscal\Model\NfeSefazRefNFP|null $ref_nfp ref_nfp
     *
     * @return self
     */
    public function setRefNfp($ref_nfp)
    {
        if (is_null($ref_nfp)) {
            throw new \InvalidArgumentException('non-nullable ref_nfp cannot be null');
        }
        $this->container['ref_nfp'] = $ref_nfp;

        return $this;
    }

    /**
     * Gets ref_cte
     *
     * @return string|null
     */
    public function getRefCte()
    {
        return $this->container['ref_cte'];
    }

    /**
     * Sets ref_cte
     *
     * @param string|null $ref_cte Utilizar esta TAG para referenciar um CT-e emitido anteriormente, vinculada a NF-e atual.
     *
     * @return self
     */
    public function setRefCte($ref_cte)
    {
        if (is_null($ref_cte)) {
            array_push($this->openAPINullablesSetToNull, 'ref_cte');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_cte', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ref_cte) && (mb_strlen($ref_cte) > 44)) {
            throw new \InvalidArgumentException('invalid length for $ref_cte when calling NfeSefazNFref., must be smaller than or equal to 44.');
        }

        $this->container['ref_cte'] = $ref_cte;

        return $this;
    }

    /**
     * Gets ref_ecf
     *
     * @return \NuvemFiscal\Model\NfeSefazRefECF|null
     */
    public function getRefEcf()
    {
        return $this->container['ref_ecf'];
    }

    /**
     * Sets ref_ecf
     *
     * @param \NuvemFiscal\Model\NfeSefazRefECF|null $ref_ecf ref_ecf
     *
     * @return self
     */
    public function setRefEcf($ref_ecf)
    {
        if (is_null($ref_ecf)) {
            throw new \InvalidArgumentException('non-nullable ref_ecf cannot be null');
        }
        $this->container['ref_ecf'] = $ref_ecf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


