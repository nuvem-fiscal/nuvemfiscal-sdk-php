<?php
/**
 * NfeSefazICMS
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazICMS Class Doc Comment
 *
 * @category Class
 * @description Dados do ICMS Normal e ST.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazICMS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazICMS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'icms00' => '\NuvemFiscal\Model\NfeSefazICMS00',
        'icms02' => '\NuvemFiscal\Model\NfeSefazICMS02',
        'icms10' => '\NuvemFiscal\Model\NfeSefazICMS10',
        'icms15' => '\NuvemFiscal\Model\NfeSefazICMS15',
        'icms20' => '\NuvemFiscal\Model\NfeSefazICMS20',
        'icms30' => '\NuvemFiscal\Model\NfeSefazICMS30',
        'icms40' => '\NuvemFiscal\Model\NfeSefazICMS40',
        'icms51' => '\NuvemFiscal\Model\NfeSefazICMS51',
        'icms53' => '\NuvemFiscal\Model\NfeSefazICMS53',
        'icms60' => '\NuvemFiscal\Model\NfeSefazICMS60',
        'icms61' => '\NuvemFiscal\Model\NfeSefazICMS61',
        'icms70' => '\NuvemFiscal\Model\NfeSefazICMS70',
        'icms90' => '\NuvemFiscal\Model\NfeSefazICMS90',
        'icms_part' => '\NuvemFiscal\Model\NfeSefazICMSPart',
        'icmsst' => '\NuvemFiscal\Model\NfeSefazICMSST',
        'icmssn101' => '\NuvemFiscal\Model\NfeSefazICMSSN101',
        'icmssn102' => '\NuvemFiscal\Model\NfeSefazICMSSN102',
        'icmssn201' => '\NuvemFiscal\Model\NfeSefazICMSSN201',
        'icmssn202' => '\NuvemFiscal\Model\NfeSefazICMSSN202',
        'icmssn500' => '\NuvemFiscal\Model\NfeSefazICMSSN500',
        'icmssn900' => '\NuvemFiscal\Model\NfeSefazICMSSN900'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'icms00' => null,
        'icms02' => null,
        'icms10' => null,
        'icms15' => null,
        'icms20' => null,
        'icms30' => null,
        'icms40' => null,
        'icms51' => null,
        'icms53' => null,
        'icms60' => null,
        'icms61' => null,
        'icms70' => null,
        'icms90' => null,
        'icms_part' => null,
        'icmsst' => null,
        'icmssn101' => null,
        'icmssn102' => null,
        'icmssn201' => null,
        'icmssn202' => null,
        'icmssn500' => null,
        'icmssn900' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'icms00' => false,
		'icms02' => false,
		'icms10' => false,
		'icms15' => false,
		'icms20' => false,
		'icms30' => false,
		'icms40' => false,
		'icms51' => false,
		'icms53' => false,
		'icms60' => false,
		'icms61' => false,
		'icms70' => false,
		'icms90' => false,
		'icms_part' => false,
		'icmsst' => false,
		'icmssn101' => false,
		'icmssn102' => false,
		'icmssn201' => false,
		'icmssn202' => false,
		'icmssn500' => false,
		'icmssn900' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icms00' => 'ICMS00',
        'icms02' => 'ICMS02',
        'icms10' => 'ICMS10',
        'icms15' => 'ICMS15',
        'icms20' => 'ICMS20',
        'icms30' => 'ICMS30',
        'icms40' => 'ICMS40',
        'icms51' => 'ICMS51',
        'icms53' => 'ICMS53',
        'icms60' => 'ICMS60',
        'icms61' => 'ICMS61',
        'icms70' => 'ICMS70',
        'icms90' => 'ICMS90',
        'icms_part' => 'ICMSPart',
        'icmsst' => 'ICMSST',
        'icmssn101' => 'ICMSSN101',
        'icmssn102' => 'ICMSSN102',
        'icmssn201' => 'ICMSSN201',
        'icmssn202' => 'ICMSSN202',
        'icmssn500' => 'ICMSSN500',
        'icmssn900' => 'ICMSSN900'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icms00' => 'setIcms00',
        'icms02' => 'setIcms02',
        'icms10' => 'setIcms10',
        'icms15' => 'setIcms15',
        'icms20' => 'setIcms20',
        'icms30' => 'setIcms30',
        'icms40' => 'setIcms40',
        'icms51' => 'setIcms51',
        'icms53' => 'setIcms53',
        'icms60' => 'setIcms60',
        'icms61' => 'setIcms61',
        'icms70' => 'setIcms70',
        'icms90' => 'setIcms90',
        'icms_part' => 'setIcmsPart',
        'icmsst' => 'setIcmsst',
        'icmssn101' => 'setIcmssn101',
        'icmssn102' => 'setIcmssn102',
        'icmssn201' => 'setIcmssn201',
        'icmssn202' => 'setIcmssn202',
        'icmssn500' => 'setIcmssn500',
        'icmssn900' => 'setIcmssn900'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icms00' => 'getIcms00',
        'icms02' => 'getIcms02',
        'icms10' => 'getIcms10',
        'icms15' => 'getIcms15',
        'icms20' => 'getIcms20',
        'icms30' => 'getIcms30',
        'icms40' => 'getIcms40',
        'icms51' => 'getIcms51',
        'icms53' => 'getIcms53',
        'icms60' => 'getIcms60',
        'icms61' => 'getIcms61',
        'icms70' => 'getIcms70',
        'icms90' => 'getIcms90',
        'icms_part' => 'getIcmsPart',
        'icmsst' => 'getIcmsst',
        'icmssn101' => 'getIcmssn101',
        'icmssn102' => 'getIcmssn102',
        'icmssn201' => 'getIcmssn201',
        'icmssn202' => 'getIcmssn202',
        'icmssn500' => 'getIcmssn500',
        'icmssn900' => 'getIcmssn900'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('icms00', $data ?? [], null);
        $this->setIfExists('icms02', $data ?? [], null);
        $this->setIfExists('icms10', $data ?? [], null);
        $this->setIfExists('icms15', $data ?? [], null);
        $this->setIfExists('icms20', $data ?? [], null);
        $this->setIfExists('icms30', $data ?? [], null);
        $this->setIfExists('icms40', $data ?? [], null);
        $this->setIfExists('icms51', $data ?? [], null);
        $this->setIfExists('icms53', $data ?? [], null);
        $this->setIfExists('icms60', $data ?? [], null);
        $this->setIfExists('icms61', $data ?? [], null);
        $this->setIfExists('icms70', $data ?? [], null);
        $this->setIfExists('icms90', $data ?? [], null);
        $this->setIfExists('icms_part', $data ?? [], null);
        $this->setIfExists('icmsst', $data ?? [], null);
        $this->setIfExists('icmssn101', $data ?? [], null);
        $this->setIfExists('icmssn102', $data ?? [], null);
        $this->setIfExists('icmssn201', $data ?? [], null);
        $this->setIfExists('icmssn202', $data ?? [], null);
        $this->setIfExists('icmssn500', $data ?? [], null);
        $this->setIfExists('icmssn900', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icms00
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS00|null
     */
    public function getIcms00()
    {
        return $this->container['icms00'];
    }

    /**
     * Sets icms00
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS00|null $icms00 icms00
     *
     * @return self
     */
    public function setIcms00($icms00)
    {
        if (is_null($icms00)) {
            throw new \InvalidArgumentException('non-nullable icms00 cannot be null');
        }
        $this->container['icms00'] = $icms00;

        return $this;
    }

    /**
     * Gets icms02
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS02|null
     */
    public function getIcms02()
    {
        return $this->container['icms02'];
    }

    /**
     * Sets icms02
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS02|null $icms02 icms02
     *
     * @return self
     */
    public function setIcms02($icms02)
    {
        if (is_null($icms02)) {
            throw new \InvalidArgumentException('non-nullable icms02 cannot be null');
        }
        $this->container['icms02'] = $icms02;

        return $this;
    }

    /**
     * Gets icms10
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS10|null
     */
    public function getIcms10()
    {
        return $this->container['icms10'];
    }

    /**
     * Sets icms10
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS10|null $icms10 icms10
     *
     * @return self
     */
    public function setIcms10($icms10)
    {
        if (is_null($icms10)) {
            throw new \InvalidArgumentException('non-nullable icms10 cannot be null');
        }
        $this->container['icms10'] = $icms10;

        return $this;
    }

    /**
     * Gets icms15
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS15|null
     */
    public function getIcms15()
    {
        return $this->container['icms15'];
    }

    /**
     * Sets icms15
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS15|null $icms15 icms15
     *
     * @return self
     */
    public function setIcms15($icms15)
    {
        if (is_null($icms15)) {
            throw new \InvalidArgumentException('non-nullable icms15 cannot be null');
        }
        $this->container['icms15'] = $icms15;

        return $this;
    }

    /**
     * Gets icms20
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS20|null
     */
    public function getIcms20()
    {
        return $this->container['icms20'];
    }

    /**
     * Sets icms20
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS20|null $icms20 icms20
     *
     * @return self
     */
    public function setIcms20($icms20)
    {
        if (is_null($icms20)) {
            throw new \InvalidArgumentException('non-nullable icms20 cannot be null');
        }
        $this->container['icms20'] = $icms20;

        return $this;
    }

    /**
     * Gets icms30
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS30|null
     */
    public function getIcms30()
    {
        return $this->container['icms30'];
    }

    /**
     * Sets icms30
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS30|null $icms30 icms30
     *
     * @return self
     */
    public function setIcms30($icms30)
    {
        if (is_null($icms30)) {
            throw new \InvalidArgumentException('non-nullable icms30 cannot be null');
        }
        $this->container['icms30'] = $icms30;

        return $this;
    }

    /**
     * Gets icms40
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS40|null
     */
    public function getIcms40()
    {
        return $this->container['icms40'];
    }

    /**
     * Sets icms40
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS40|null $icms40 icms40
     *
     * @return self
     */
    public function setIcms40($icms40)
    {
        if (is_null($icms40)) {
            throw new \InvalidArgumentException('non-nullable icms40 cannot be null');
        }
        $this->container['icms40'] = $icms40;

        return $this;
    }

    /**
     * Gets icms51
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS51|null
     */
    public function getIcms51()
    {
        return $this->container['icms51'];
    }

    /**
     * Sets icms51
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS51|null $icms51 icms51
     *
     * @return self
     */
    public function setIcms51($icms51)
    {
        if (is_null($icms51)) {
            throw new \InvalidArgumentException('non-nullable icms51 cannot be null');
        }
        $this->container['icms51'] = $icms51;

        return $this;
    }

    /**
     * Gets icms53
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS53|null
     */
    public function getIcms53()
    {
        return $this->container['icms53'];
    }

    /**
     * Sets icms53
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS53|null $icms53 icms53
     *
     * @return self
     */
    public function setIcms53($icms53)
    {
        if (is_null($icms53)) {
            throw new \InvalidArgumentException('non-nullable icms53 cannot be null');
        }
        $this->container['icms53'] = $icms53;

        return $this;
    }

    /**
     * Gets icms60
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS60|null
     */
    public function getIcms60()
    {
        return $this->container['icms60'];
    }

    /**
     * Sets icms60
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS60|null $icms60 icms60
     *
     * @return self
     */
    public function setIcms60($icms60)
    {
        if (is_null($icms60)) {
            throw new \InvalidArgumentException('non-nullable icms60 cannot be null');
        }
        $this->container['icms60'] = $icms60;

        return $this;
    }

    /**
     * Gets icms61
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS61|null
     */
    public function getIcms61()
    {
        return $this->container['icms61'];
    }

    /**
     * Sets icms61
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS61|null $icms61 icms61
     *
     * @return self
     */
    public function setIcms61($icms61)
    {
        if (is_null($icms61)) {
            throw new \InvalidArgumentException('non-nullable icms61 cannot be null');
        }
        $this->container['icms61'] = $icms61;

        return $this;
    }

    /**
     * Gets icms70
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS70|null
     */
    public function getIcms70()
    {
        return $this->container['icms70'];
    }

    /**
     * Sets icms70
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS70|null $icms70 icms70
     *
     * @return self
     */
    public function setIcms70($icms70)
    {
        if (is_null($icms70)) {
            throw new \InvalidArgumentException('non-nullable icms70 cannot be null');
        }
        $this->container['icms70'] = $icms70;

        return $this;
    }

    /**
     * Gets icms90
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS90|null
     */
    public function getIcms90()
    {
        return $this->container['icms90'];
    }

    /**
     * Sets icms90
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS90|null $icms90 icms90
     *
     * @return self
     */
    public function setIcms90($icms90)
    {
        if (is_null($icms90)) {
            throw new \InvalidArgumentException('non-nullable icms90 cannot be null');
        }
        $this->container['icms90'] = $icms90;

        return $this;
    }

    /**
     * Gets icms_part
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSPart|null
     */
    public function getIcmsPart()
    {
        return $this->container['icms_part'];
    }

    /**
     * Sets icms_part
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSPart|null $icms_part icms_part
     *
     * @return self
     */
    public function setIcmsPart($icms_part)
    {
        if (is_null($icms_part)) {
            throw new \InvalidArgumentException('non-nullable icms_part cannot be null');
        }
        $this->container['icms_part'] = $icms_part;

        return $this;
    }

    /**
     * Gets icmsst
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSST|null
     */
    public function getIcmsst()
    {
        return $this->container['icmsst'];
    }

    /**
     * Sets icmsst
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSST|null $icmsst icmsst
     *
     * @return self
     */
    public function setIcmsst($icmsst)
    {
        if (is_null($icmsst)) {
            throw new \InvalidArgumentException('non-nullable icmsst cannot be null');
        }
        $this->container['icmsst'] = $icmsst;

        return $this;
    }

    /**
     * Gets icmssn101
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSSN101|null
     */
    public function getIcmssn101()
    {
        return $this->container['icmssn101'];
    }

    /**
     * Sets icmssn101
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSSN101|null $icmssn101 icmssn101
     *
     * @return self
     */
    public function setIcmssn101($icmssn101)
    {
        if (is_null($icmssn101)) {
            throw new \InvalidArgumentException('non-nullable icmssn101 cannot be null');
        }
        $this->container['icmssn101'] = $icmssn101;

        return $this;
    }

    /**
     * Gets icmssn102
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSSN102|null
     */
    public function getIcmssn102()
    {
        return $this->container['icmssn102'];
    }

    /**
     * Sets icmssn102
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSSN102|null $icmssn102 icmssn102
     *
     * @return self
     */
    public function setIcmssn102($icmssn102)
    {
        if (is_null($icmssn102)) {
            throw new \InvalidArgumentException('non-nullable icmssn102 cannot be null');
        }
        $this->container['icmssn102'] = $icmssn102;

        return $this;
    }

    /**
     * Gets icmssn201
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSSN201|null
     */
    public function getIcmssn201()
    {
        return $this->container['icmssn201'];
    }

    /**
     * Sets icmssn201
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSSN201|null $icmssn201 icmssn201
     *
     * @return self
     */
    public function setIcmssn201($icmssn201)
    {
        if (is_null($icmssn201)) {
            throw new \InvalidArgumentException('non-nullable icmssn201 cannot be null');
        }
        $this->container['icmssn201'] = $icmssn201;

        return $this;
    }

    /**
     * Gets icmssn202
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSSN202|null
     */
    public function getIcmssn202()
    {
        return $this->container['icmssn202'];
    }

    /**
     * Sets icmssn202
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSSN202|null $icmssn202 icmssn202
     *
     * @return self
     */
    public function setIcmssn202($icmssn202)
    {
        if (is_null($icmssn202)) {
            throw new \InvalidArgumentException('non-nullable icmssn202 cannot be null');
        }
        $this->container['icmssn202'] = $icmssn202;

        return $this;
    }

    /**
     * Gets icmssn500
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSSN500|null
     */
    public function getIcmssn500()
    {
        return $this->container['icmssn500'];
    }

    /**
     * Sets icmssn500
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSSN500|null $icmssn500 icmssn500
     *
     * @return self
     */
    public function setIcmssn500($icmssn500)
    {
        if (is_null($icmssn500)) {
            throw new \InvalidArgumentException('non-nullable icmssn500 cannot be null');
        }
        $this->container['icmssn500'] = $icmssn500;

        return $this;
    }

    /**
     * Gets icmssn900
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSSN900|null
     */
    public function getIcmssn900()
    {
        return $this->container['icmssn900'];
    }

    /**
     * Sets icmssn900
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSSN900|null $icmssn900 icmssn900
     *
     * @return self
     */
    public function setIcmssn900($icmssn900)
    {
        if (is_null($icmssn900)) {
            throw new \InvalidArgumentException('non-nullable icmssn900 cannot be null');
        }
        $this->container['icmssn900'] = $icmssn900;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


