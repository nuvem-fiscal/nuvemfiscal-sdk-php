<?php
/**
 * DfeRequisicaoDebug
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * DfeRequisicaoDebug Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DfeRequisicaoDebug implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DfeRequisicaoDebug';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => '\DateTime',
        'tipo' => 'string',
        'lote_id' => 'string',
        'codigo_status' => 'int',
        'motivo_status' => 'string',
        'http_request' => '\NuvemFiscal\Model\HttpRequestDebug'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => 'date-time',
        'tipo' => null,
        'lote_id' => null,
        'codigo_status' => null,
        'motivo_status' => null,
        'http_request' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created_at' => false,
        'tipo' => false,
        'lote_id' => false,
        'codigo_status' => false,
        'motivo_status' => false,
        'http_request' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'tipo' => 'tipo',
        'lote_id' => 'lote_id',
        'codigo_status' => 'codigo_status',
        'motivo_status' => 'motivo_status',
        'http_request' => 'http_request'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'tipo' => 'setTipo',
        'lote_id' => 'setLoteId',
        'codigo_status' => 'setCodigoStatus',
        'motivo_status' => 'setMotivoStatus',
        'http_request' => 'setHttpRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'tipo' => 'getTipo',
        'lote_id' => 'getLoteId',
        'codigo_status' => 'getCodigoStatus',
        'motivo_status' => 'getMotivoStatus',
        'http_request' => 'getHttpRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('tipo', $data ?? [], null);
        $this->setIfExists('lote_id', $data ?? [], null);
        $this->setIfExists('codigo_status', $data ?? [], null);
        $this->setIfExists('motivo_status', $data ?? [], null);
        $this->setIfExists('http_request', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Data e hora da criação da requisição, representada no formato UTC (Tempo Universal Coordenado).  O valor é retornado no padrão ISO 8601, incluindo o deslocamento de fuso horário 'Z' no final.    Exemplo: \"2025-04-15T14:16:47.775Z\"
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets tipo
     *
     * @return string|null
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     *
     * @param string|null $tipo Tipo da operação realizada na requisição para o autorizador.  Pode assumir um dos seguintes valores:  - 'envio_lote'      : envio do lote de documentos fiscais para autorização;  - 'consulta_lote'   : consulta do processamento do lote;  - 'cons_sit_dfe'    : consulta de situação individual de um DFe.    Esse campo indica a natureza da interação com a SEFAZ ou prefeitura,  e é útil para fins de rastreamento e diagnóstico do fluxo.
     *
     * @return self
     */
    public function setTipo($tipo)
    {
        if (is_null($tipo)) {
            throw new \InvalidArgumentException('non-nullable tipo cannot be null');
        }
        $this->container['tipo'] = $tipo;

        return $this;
    }

    /**
     * Gets lote_id
     *
     * @return string|null
     */
    public function getLoteId()
    {
        return $this->container['lote_id'];
    }

    /**
     * Sets lote_id
     *
     * @param string|null $lote_id Identificador do lote vinculado à requisição.
     *
     * @return self
     */
    public function setLoteId($lote_id)
    {
        if (is_null($lote_id)) {
            throw new \InvalidArgumentException('non-nullable lote_id cannot be null');
        }
        $this->container['lote_id'] = $lote_id;

        return $this;
    }

    /**
     * Gets codigo_status
     *
     * @return int|null
     */
    public function getCodigoStatus()
    {
        return $this->container['codigo_status'];
    }

    /**
     * Sets codigo_status
     *
     * @param int|null $codigo_status Código de status retornado pela SEFAZ/prefeitura.
     *
     * @return self
     */
    public function setCodigoStatus($codigo_status)
    {
        if (is_null($codigo_status)) {
            throw new \InvalidArgumentException('non-nullable codigo_status cannot be null');
        }
        $this->container['codigo_status'] = $codigo_status;

        return $this;
    }

    /**
     * Gets motivo_status
     *
     * @return string|null
     */
    public function getMotivoStatus()
    {
        return $this->container['motivo_status'];
    }

    /**
     * Sets motivo_status
     *
     * @param string|null $motivo_status Motivo associado ao status retornado.
     *
     * @return self
     */
    public function setMotivoStatus($motivo_status)
    {
        if (is_null($motivo_status)) {
            throw new \InvalidArgumentException('non-nullable motivo_status cannot be null');
        }
        $this->container['motivo_status'] = $motivo_status;

        return $this;
    }

    /**
     * Gets http_request
     *
     * @return \NuvemFiscal\Model\HttpRequestDebug|null
     */
    public function getHttpRequest()
    {
        return $this->container['http_request'];
    }

    /**
     * Sets http_request
     *
     * @param \NuvemFiscal\Model\HttpRequestDebug|null $http_request http_request
     *
     * @return self
     */
    public function setHttpRequest($http_request)
    {
        if (is_null($http_request)) {
            throw new \InvalidArgumentException('non-nullable http_request cannot be null');
        }
        $this->container['http_request'] = $http_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


