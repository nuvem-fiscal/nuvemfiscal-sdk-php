<?php
/**
 * NfcomSefazIde
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfcomSefazIde Class Doc Comment
 *
 * @category Class
 * @description Identificação da NFCom.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfcomSefazIde implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfcomSefazIde';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c_uf' => 'int',
        'tp_amb' => 'int',
        'mod' => 'int',
        'serie' => 'int',
        'n_nf' => 'int',
        'c_nf' => 'string',
        'c_dv' => 'int',
        'dh_emi' => '\DateTime',
        'tp_emis' => 'int',
        'n_site_autoriz' => 'int',
        'c_mun_fg' => 'string',
        'fin_nf_com' => 'int',
        'tp_fat' => 'int',
        'ver_proc' => 'string',
        'ind_pre_pago' => 'int',
        'ind_cessao_meios_rede' => 'int',
        'ind_nota_entrada' => 'int',
        'dh_cont' => '\DateTime',
        'x_just' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c_uf' => null,
        'tp_amb' => null,
        'mod' => null,
        'serie' => null,
        'n_nf' => null,
        'c_nf' => null,
        'c_dv' => null,
        'dh_emi' => 'date-time',
        'tp_emis' => null,
        'n_site_autoriz' => null,
        'c_mun_fg' => null,
        'fin_nf_com' => null,
        'tp_fat' => null,
        'ver_proc' => null,
        'ind_pre_pago' => null,
        'ind_cessao_meios_rede' => null,
        'ind_nota_entrada' => null,
        'dh_cont' => 'date-time',
        'x_just' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'c_uf' => true,
        'tp_amb' => true,
        'mod' => true,
        'serie' => true,
        'n_nf' => true,
        'c_nf' => true,
        'c_dv' => true,
        'dh_emi' => true,
        'tp_emis' => true,
        'n_site_autoriz' => true,
        'c_mun_fg' => true,
        'fin_nf_com' => true,
        'tp_fat' => true,
        'ver_proc' => true,
        'ind_pre_pago' => true,
        'ind_cessao_meios_rede' => true,
        'ind_nota_entrada' => true,
        'dh_cont' => true,
        'x_just' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_uf' => 'cUF',
        'tp_amb' => 'tpAmb',
        'mod' => 'mod',
        'serie' => 'serie',
        'n_nf' => 'nNF',
        'c_nf' => 'cNF',
        'c_dv' => 'cDV',
        'dh_emi' => 'dhEmi',
        'tp_emis' => 'tpEmis',
        'n_site_autoriz' => 'nSiteAutoriz',
        'c_mun_fg' => 'cMunFG',
        'fin_nf_com' => 'finNFCom',
        'tp_fat' => 'tpFat',
        'ver_proc' => 'verProc',
        'ind_pre_pago' => 'indPrePago',
        'ind_cessao_meios_rede' => 'indCessaoMeiosRede',
        'ind_nota_entrada' => 'indNotaEntrada',
        'dh_cont' => 'dhCont',
        'x_just' => 'xJust'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_uf' => 'setCUf',
        'tp_amb' => 'setTpAmb',
        'mod' => 'setMod',
        'serie' => 'setSerie',
        'n_nf' => 'setNNf',
        'c_nf' => 'setCNf',
        'c_dv' => 'setCDv',
        'dh_emi' => 'setDhEmi',
        'tp_emis' => 'setTpEmis',
        'n_site_autoriz' => 'setNSiteAutoriz',
        'c_mun_fg' => 'setCMunFg',
        'fin_nf_com' => 'setFinNfCom',
        'tp_fat' => 'setTpFat',
        'ver_proc' => 'setVerProc',
        'ind_pre_pago' => 'setIndPrePago',
        'ind_cessao_meios_rede' => 'setIndCessaoMeiosRede',
        'ind_nota_entrada' => 'setIndNotaEntrada',
        'dh_cont' => 'setDhCont',
        'x_just' => 'setXJust'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_uf' => 'getCUf',
        'tp_amb' => 'getTpAmb',
        'mod' => 'getMod',
        'serie' => 'getSerie',
        'n_nf' => 'getNNf',
        'c_nf' => 'getCNf',
        'c_dv' => 'getCDv',
        'dh_emi' => 'getDhEmi',
        'tp_emis' => 'getTpEmis',
        'n_site_autoriz' => 'getNSiteAutoriz',
        'c_mun_fg' => 'getCMunFg',
        'fin_nf_com' => 'getFinNfCom',
        'tp_fat' => 'getTpFat',
        'ver_proc' => 'getVerProc',
        'ind_pre_pago' => 'getIndPrePago',
        'ind_cessao_meios_rede' => 'getIndCessaoMeiosRede',
        'ind_nota_entrada' => 'getIndNotaEntrada',
        'dh_cont' => 'getDhCont',
        'x_just' => 'getXJust'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('c_uf', $data ?? [], null);
        $this->setIfExists('tp_amb', $data ?? [], null);
        $this->setIfExists('mod', $data ?? [], null);
        $this->setIfExists('serie', $data ?? [], null);
        $this->setIfExists('n_nf', $data ?? [], null);
        $this->setIfExists('c_nf', $data ?? [], null);
        $this->setIfExists('c_dv', $data ?? [], null);
        $this->setIfExists('dh_emi', $data ?? [], null);
        $this->setIfExists('tp_emis', $data ?? [], null);
        $this->setIfExists('n_site_autoriz', $data ?? [], null);
        $this->setIfExists('c_mun_fg', $data ?? [], null);
        $this->setIfExists('fin_nf_com', $data ?? [], null);
        $this->setIfExists('tp_fat', $data ?? [], null);
        $this->setIfExists('ver_proc', $data ?? [], null);
        $this->setIfExists('ind_pre_pago', $data ?? [], null);
        $this->setIfExists('ind_cessao_meios_rede', $data ?? [], null);
        $this->setIfExists('ind_nota_entrada', $data ?? [], null);
        $this->setIfExists('dh_cont', $data ?? [], null);
        $this->setIfExists('x_just', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['c_uf'] === null) {
            $invalidProperties[] = "'c_uf' can't be null";
        }
        if ($this->container['serie'] === null) {
            $invalidProperties[] = "'serie' can't be null";
        }
        if (($this->container['serie'] > 999)) {
            $invalidProperties[] = "invalid value for 'serie', must be smaller than or equal to 999.";
        }

        if (($this->container['serie'] < 0)) {
            $invalidProperties[] = "invalid value for 'serie', must be bigger than or equal to 0.";
        }

        if ($this->container['n_nf'] === null) {
            $invalidProperties[] = "'n_nf' can't be null";
        }
        if (($this->container['n_nf'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'n_nf', must be smaller than or equal to 999999999.";
        }

        if (($this->container['n_nf'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_nf', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] > 9)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] < 0)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be bigger than or equal to 0.";
        }

        if ($this->container['dh_emi'] === null) {
            $invalidProperties[] = "'dh_emi' can't be null";
        }
        if ($this->container['tp_emis'] === null) {
            $invalidProperties[] = "'tp_emis' can't be null";
        }
        if ($this->container['n_site_autoriz'] === null) {
            $invalidProperties[] = "'n_site_autoriz' can't be null";
        }
        if (($this->container['n_site_autoriz'] > 9)) {
            $invalidProperties[] = "invalid value for 'n_site_autoriz', must be smaller than or equal to 9.";
        }

        if (($this->container['n_site_autoriz'] < 0)) {
            $invalidProperties[] = "invalid value for 'n_site_autoriz', must be bigger than or equal to 0.";
        }

        if ($this->container['c_mun_fg'] === null) {
            $invalidProperties[] = "'c_mun_fg' can't be null";
        }
        if ($this->container['fin_nf_com'] === null) {
            $invalidProperties[] = "'fin_nf_com' can't be null";
        }
        if ($this->container['tp_fat'] === null) {
            $invalidProperties[] = "'tp_fat' can't be null";
        }
        if ($this->container['ver_proc'] === null) {
            $invalidProperties[] = "'ver_proc' can't be null";
        }
        if ((mb_strlen($this->container['ver_proc']) > 20)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['ver_proc']) < 1)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['x_just']) && (mb_strlen($this->container['x_just']) > 256)) {
            $invalidProperties[] = "invalid value for 'x_just', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['x_just']) && (mb_strlen($this->container['x_just']) < 15)) {
            $invalidProperties[] = "invalid value for 'x_just', the character length must be bigger than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_uf
     *
     * @return int
     */
    public function getCUf()
    {
        return $this->container['c_uf'];
    }

    /**
     * Sets c_uf
     *
     * @param int $c_uf Código da UF de emissão e autorização da NFCom.  Código da UF de emissão e autorização do Documento Fiscal. Utilizar a  Tabela do IBGE de código de unidades da federação.
     *
     * @return self
     */
    public function setCUf($c_uf)
    {
        if (is_null($c_uf)) {
            array_push($this->openAPINullablesSetToNull, 'c_uf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_uf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_uf'] = $c_uf;

        return $this;
    }

    /**
     * Gets tp_amb
     *
     * @return int|null
     */
    public function getTpAmb()
    {
        return $this->container['tp_amb'];
    }

    /**
     * Sets tp_amb
     *
     * @param int|null $tp_amb Tipo do Ambiente:  * 1 - Produção  * 2 - Homologação
     *
     * @return self
     */
    public function setTpAmb($tp_amb)
    {
        if (is_null($tp_amb)) {
            array_push($this->openAPINullablesSetToNull, 'tp_amb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_amb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_amb'] = $tp_amb;

        return $this;
    }

    /**
     * Gets mod
     *
     * @return int|null
     */
    public function getMod()
    {
        return $this->container['mod'];
    }

    /**
     * Sets mod
     *
     * @param int|null $mod Modelo da NFCom.  Utilizar o código 62 para identificação da NFCom.
     *
     * @return self
     */
    public function setMod($mod)
    {
        if (is_null($mod)) {
            array_push($this->openAPINullablesSetToNull, 'mod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod'] = $mod;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return int
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param int $serie Série do documento fiscal.  Informar a série do documento fiscal (informar zero para série única).
     *
     * @return self
     */
    public function setSerie($serie)
    {
        if (is_null($serie)) {
            array_push($this->openAPINullablesSetToNull, 'serie');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serie', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($serie) && ($serie > 999)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling NfcomSefazIde., must be smaller than or equal to 999.');
        }
        if (!is_null($serie) && ($serie < 0)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling NfcomSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets n_nf
     *
     * @return int
     */
    public function getNNf()
    {
        return $this->container['n_nf'];
    }

    /**
     * Sets n_nf
     *
     * @param int $n_nf Número do documento fiscal.  Número que identifica o documento fiscal 1 a 999999999.
     *
     * @return self
     */
    public function setNNf($n_nf)
    {
        if (is_null($n_nf)) {
            array_push($this->openAPINullablesSetToNull, 'n_nf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_nf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n_nf) && ($n_nf > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $n_nf when calling NfcomSefazIde., must be smaller than or equal to 999999999.');
        }
        if (!is_null($n_nf) && ($n_nf < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_nf when calling NfcomSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['n_nf'] = $n_nf;

        return $this;
    }

    /**
     * Gets c_nf
     *
     * @return string|null
     */
    public function getCNf()
    {
        return $this->container['c_nf'];
    }

    /**
     * Sets c_nf
     *
     * @param string|null $c_nf Código numérico que compõe a Chave de Acesso.  Código aleatório gerado pelo emitente, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCNf($c_nf)
    {
        if (is_null($c_nf)) {
            array_push($this->openAPINullablesSetToNull, 'c_nf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_nf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_nf'] = $c_nf;

        return $this;
    }

    /**
     * Gets c_dv
     *
     * @return int|null
     */
    public function getCDv()
    {
        return $this->container['c_dv'];
    }

    /**
     * Sets c_dv
     *
     * @param int|null $c_dv Digito verificador da chave de acesso.  Informar o dígito  de controle da chave de acesso documento fiscal, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCDv($c_dv)
    {
        if (is_null($c_dv)) {
            array_push($this->openAPINullablesSetToNull, 'c_dv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_dv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($c_dv) && ($c_dv > 9)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling NfcomSefazIde., must be smaller than or equal to 9.');
        }
        if (!is_null($c_dv) && ($c_dv < 0)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling NfcomSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['c_dv'] = $c_dv;

        return $this;
    }

    /**
     * Gets dh_emi
     *
     * @return \DateTime
     */
    public function getDhEmi()
    {
        return $this->container['dh_emi'];
    }

    /**
     * Sets dh_emi
     *
     * @param \DateTime $dh_emi Data e hora de emissão do documento fiscal.  Formato AAAA-MM-DDTHH:MM:DD TZD.
     *
     * @return self
     */
    public function setDhEmi($dh_emi)
    {
        if (is_null($dh_emi)) {
            array_push($this->openAPINullablesSetToNull, 'dh_emi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_emi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_emi'] = $dh_emi;

        return $this;
    }

    /**
     * Gets tp_emis
     *
     * @return int
     */
    public function getTpEmis()
    {
        return $this->container['tp_emis'];
    }

    /**
     * Sets tp_emis
     *
     * @param int $tp_emis Forma de emissão do Documento Fiscal.  * 1 - Normal  * 2 - Contingência
     *
     * @return self
     */
    public function setTpEmis($tp_emis)
    {
        if (is_null($tp_emis)) {
            array_push($this->openAPINullablesSetToNull, 'tp_emis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_emis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_emis'] = $tp_emis;

        return $this;
    }

    /**
     * Gets n_site_autoriz
     *
     * @return int
     */
    public function getNSiteAutoriz()
    {
        return $this->container['n_site_autoriz'];
    }

    /**
     * Sets n_site_autoriz
     *
     * @param int $n_site_autoriz Identificação do número do Site do Autorizador de recepção da NFCom.  Se o autorizador da NFCom possuir apenas um site deverá ser informado com Zero (0), em caso de Autorizador trabalhar com múltiplos sites indicar o número do site para qual foi endereçada a NFCOM (1 a 9).  Observação: o ambiente autorizador que trabalhar com mais de um Site deverá divulgar para cada endereço de site qual número correspondente de nSiteAutoriz o contribuinte pode usar.
     *
     * @return self
     */
    public function setNSiteAutoriz($n_site_autoriz)
    {
        if (is_null($n_site_autoriz)) {
            array_push($this->openAPINullablesSetToNull, 'n_site_autoriz');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_site_autoriz', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n_site_autoriz) && ($n_site_autoriz > 9)) {
            throw new \InvalidArgumentException('invalid value for $n_site_autoriz when calling NfcomSefazIde., must be smaller than or equal to 9.');
        }
        if (!is_null($n_site_autoriz) && ($n_site_autoriz < 0)) {
            throw new \InvalidArgumentException('invalid value for $n_site_autoriz when calling NfcomSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['n_site_autoriz'] = $n_site_autoriz;

        return $this;
    }

    /**
     * Gets c_mun_fg
     *
     * @return string
     */
    public function getCMunFg()
    {
        return $this->container['c_mun_fg'];
    }

    /**
     * Sets c_mun_fg
     *
     * @param string $c_mun_fg Código do município de ocorrência do fato gerador.
     *
     * @return self
     */
    public function setCMunFg($c_mun_fg)
    {
        if (is_null($c_mun_fg)) {
            array_push($this->openAPINullablesSetToNull, 'c_mun_fg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mun_fg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mun_fg'] = $c_mun_fg;

        return $this;
    }

    /**
     * Gets fin_nf_com
     *
     * @return int
     */
    public function getFinNfCom()
    {
        return $this->container['fin_nf_com'];
    }

    /**
     * Sets fin_nf_com
     *
     * @param int $fin_nf_com Finalidade de emissão da NFCom.  * 0 - NFCom Normal  * 3 - NFCom de Substituição  * 4 - NFCom de Ajuste
     *
     * @return self
     */
    public function setFinNfCom($fin_nf_com)
    {
        if (is_null($fin_nf_com)) {
            array_push($this->openAPINullablesSetToNull, 'fin_nf_com');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fin_nf_com', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fin_nf_com'] = $fin_nf_com;

        return $this;
    }

    /**
     * Gets tp_fat
     *
     * @return int
     */
    public function getTpFat()
    {
        return $this->container['tp_fat'];
    }

    /**
     * Sets tp_fat
     *
     * @param int $tp_fat Tipo de Faturamento da NFCom.  * 0 - Faturamento Normal  * 1 - Faturamento centralizado  * 2 - Cofaturamento
     *
     * @return self
     */
    public function setTpFat($tp_fat)
    {
        if (is_null($tp_fat)) {
            array_push($this->openAPINullablesSetToNull, 'tp_fat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_fat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_fat'] = $tp_fat;

        return $this;
    }

    /**
     * Gets ver_proc
     *
     * @return string
     */
    public function getVerProc()
    {
        return $this->container['ver_proc'];
    }

    /**
     * Sets ver_proc
     *
     * @param string $ver_proc Versão do processo de emissão.  Informar a versão do aplicativo emissor de NFCom.
     *
     * @return self
     */
    public function setVerProc($ver_proc)
    {
        if (is_null($ver_proc)) {
            array_push($this->openAPINullablesSetToNull, 'ver_proc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ver_proc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling NfcomSefazIde., must be smaller than or equal to 20.');
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling NfcomSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['ver_proc'] = $ver_proc;

        return $this;
    }

    /**
     * Gets ind_pre_pago
     *
     * @return int|null
     */
    public function getIndPrePago()
    {
        return $this->container['ind_pre_pago'];
    }

    /**
     * Sets ind_pre_pago
     *
     * @param int|null $ind_pre_pago Indicador de serviço pré-pago.  * 1 - Serviço pré-pago (informar a tag somente se a nota for referente a um serviço exclusivamente pré-pago)
     *
     * @return self
     */
    public function setIndPrePago($ind_pre_pago)
    {
        if (is_null($ind_pre_pago)) {
            array_push($this->openAPINullablesSetToNull, 'ind_pre_pago');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_pre_pago', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_pre_pago'] = $ind_pre_pago;

        return $this;
    }

    /**
     * Gets ind_cessao_meios_rede
     *
     * @return int|null
     */
    public function getIndCessaoMeiosRede()
    {
        return $this->container['ind_cessao_meios_rede'];
    }

    /**
     * Sets ind_cessao_meios_rede
     *
     * @param int|null $ind_cessao_meios_rede Indicador de Sessão de Meios de Rede.  Uma vez informado (valor = 1), essa tag dispensa geração do grupo Fatura.  Apenas para notas dos tipos Normal e Substituição com tipo de faturamento normal.
     *
     * @return self
     */
    public function setIndCessaoMeiosRede($ind_cessao_meios_rede)
    {
        if (is_null($ind_cessao_meios_rede)) {
            array_push($this->openAPINullablesSetToNull, 'ind_cessao_meios_rede');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_cessao_meios_rede', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_cessao_meios_rede'] = $ind_cessao_meios_rede;

        return $this;
    }

    /**
     * Gets ind_nota_entrada
     *
     * @return int|null
     */
    public function getIndNotaEntrada()
    {
        return $this->container['ind_nota_entrada'];
    }

    /**
     * Sets ind_nota_entrada
     *
     * @param int|null $ind_nota_entrada Indicador de nota de entrada.  * 1 - Informar quando for nota de ajuste e possuir itens com CFOP de entrada
     *
     * @return self
     */
    public function setIndNotaEntrada($ind_nota_entrada)
    {
        if (is_null($ind_nota_entrada)) {
            array_push($this->openAPINullablesSetToNull, 'ind_nota_entrada');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_nota_entrada', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_nota_entrada'] = $ind_nota_entrada;

        return $this;
    }

    /**
     * Gets dh_cont
     *
     * @return \DateTime|null
     */
    public function getDhCont()
    {
        return $this->container['dh_cont'];
    }

    /**
     * Sets dh_cont
     *
     * @param \DateTime|null $dh_cont Data e Hora da entrada em contingência.  Informar a data e hora no formato AAAA-MM-DDTHH:MM:SS.
     *
     * @return self
     */
    public function setDhCont($dh_cont)
    {
        if (is_null($dh_cont)) {
            array_push($this->openAPINullablesSetToNull, 'dh_cont');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_cont', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_cont'] = $dh_cont;

        return $this;
    }

    /**
     * Gets x_just
     *
     * @return string|null
     */
    public function getXJust()
    {
        return $this->container['x_just'];
    }

    /**
     * Sets x_just
     *
     * @param string|null $x_just Justificativa da entrada em contingência.
     *
     * @return self
     */
    public function setXJust($x_just)
    {
        if (is_null($x_just)) {
            array_push($this->openAPINullablesSetToNull, 'x_just');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_just', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_just) && (mb_strlen($x_just) > 256)) {
            throw new \InvalidArgumentException('invalid length for $x_just when calling NfcomSefazIde., must be smaller than or equal to 256.');
        }
        if (!is_null($x_just) && (mb_strlen($x_just) < 15)) {
            throw new \InvalidArgumentException('invalid length for $x_just when calling NfcomSefazIde., must be bigger than or equal to 15.');
        }

        $this->container['x_just'] = $x_just;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


