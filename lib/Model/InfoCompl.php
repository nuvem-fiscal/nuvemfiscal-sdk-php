<?php
/**
 * InfoCompl
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * InfoCompl Class Doc Comment
 *
 * @category Class
 * @description Grupo de informações complementares disponível para todos os serviços prestados.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InfoCompl implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InfoCompl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_doc_tec' => 'string',
        'doc_ref' => 'string',
        'x_inf_comp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_doc_tec' => null,
        'doc_ref' => null,
        'x_inf_comp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_doc_tec' => true,
		'doc_ref' => true,
		'x_inf_comp' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_doc_tec' => 'idDocTec',
        'doc_ref' => 'docRef',
        'x_inf_comp' => 'xInfComp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_doc_tec' => 'setIdDocTec',
        'doc_ref' => 'setDocRef',
        'x_inf_comp' => 'setXInfComp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_doc_tec' => 'getIdDocTec',
        'doc_ref' => 'getDocRef',
        'x_inf_comp' => 'getXInfComp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id_doc_tec', $data ?? [], null);
        $this->setIfExists('doc_ref', $data ?? [], null);
        $this->setIfExists('x_inf_comp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id_doc_tec']) && (mb_strlen($this->container['id_doc_tec']) > 40)) {
            $invalidProperties[] = "invalid value for 'id_doc_tec', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['id_doc_tec']) && (mb_strlen($this->container['id_doc_tec']) < 1)) {
            $invalidProperties[] = "invalid value for 'id_doc_tec', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['doc_ref']) && (mb_strlen($this->container['doc_ref']) > 255)) {
            $invalidProperties[] = "invalid value for 'doc_ref', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['doc_ref']) && (mb_strlen($this->container['doc_ref']) < 1)) {
            $invalidProperties[] = "invalid value for 'doc_ref', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['x_inf_comp']) && (mb_strlen($this->container['x_inf_comp']) > 2000)) {
            $invalidProperties[] = "invalid value for 'x_inf_comp', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['x_inf_comp']) && (mb_strlen($this->container['x_inf_comp']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_inf_comp', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_doc_tec
     *
     * @return string|null
     */
    public function getIdDocTec()
    {
        return $this->container['id_doc_tec'];
    }

    /**
     * Sets id_doc_tec
     *
     * @param string|null $id_doc_tec Identificador de Documento de Responsabilidade Técnica: ART, RRT, DRT, Outros.
     *
     * @return self
     */
    public function setIdDocTec($id_doc_tec)
    {
        if (is_null($id_doc_tec)) {
            array_push($this->openAPINullablesSetToNull, 'id_doc_tec');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id_doc_tec', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($id_doc_tec) && (mb_strlen($id_doc_tec) > 40)) {
            throw new \InvalidArgumentException('invalid length for $id_doc_tec when calling InfoCompl., must be smaller than or equal to 40.');
        }
        if (!is_null($id_doc_tec) && (mb_strlen($id_doc_tec) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id_doc_tec when calling InfoCompl., must be bigger than or equal to 1.');
        }

        $this->container['id_doc_tec'] = $id_doc_tec;

        return $this;
    }

    /**
     * Gets doc_ref
     *
     * @return string|null
     */
    public function getDocRef()
    {
        return $this->container['doc_ref'];
    }

    /**
     * Sets doc_ref
     *
     * @param string|null $doc_ref Chave da nota, número identificador da nota, número do contrato ou outro identificador de documento emitido pelo prestador de serviços, que subsidia a emissão dessa nota pelo tomador do serviço ou intermediário (preenchimento obrigatório caso a nota esteja sendo emitida pelo Tomador ou intermediário do serviço).
     *
     * @return self
     */
    public function setDocRef($doc_ref)
    {
        if (is_null($doc_ref)) {
            array_push($this->openAPINullablesSetToNull, 'doc_ref');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('doc_ref', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($doc_ref) && (mb_strlen($doc_ref) > 255)) {
            throw new \InvalidArgumentException('invalid length for $doc_ref when calling InfoCompl., must be smaller than or equal to 255.');
        }
        if (!is_null($doc_ref) && (mb_strlen($doc_ref) < 1)) {
            throw new \InvalidArgumentException('invalid length for $doc_ref when calling InfoCompl., must be bigger than or equal to 1.');
        }

        $this->container['doc_ref'] = $doc_ref;

        return $this;
    }

    /**
     * Gets x_inf_comp
     *
     * @return string|null
     */
    public function getXInfComp()
    {
        return $this->container['x_inf_comp'];
    }

    /**
     * Sets x_inf_comp
     *
     * @param string|null $x_inf_comp Informações complementares.
     *
     * @return self
     */
    public function setXInfComp($x_inf_comp)
    {
        if (is_null($x_inf_comp)) {
            array_push($this->openAPINullablesSetToNull, 'x_inf_comp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_inf_comp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_inf_comp) && (mb_strlen($x_inf_comp) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $x_inf_comp when calling InfoCompl., must be smaller than or equal to 2000.');
        }
        if (!is_null($x_inf_comp) && (mb_strlen($x_inf_comp) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_inf_comp when calling InfoCompl., must be bigger than or equal to 1.');
        }

        $this->container['x_inf_comp'] = $x_inf_comp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


