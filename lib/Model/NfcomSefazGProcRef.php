<?php
/**
 * NfcomSefazGProcRef
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfcomSefazGProcRef Class Doc Comment
 *
 * @category Class
 * @description Grupo Processo referenciado.  Este grupo somente deverá ser preenchido quando houver processo judicial ou administrativo que altere valores.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfcomSefazGProcRef implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfcomSefazGProcRef';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'v_item' => 'float',
        'q_faturada' => 'float',
        'v_prod' => 'float',
        'v_desc' => 'float',
        'v_outro' => 'float',
        'ind_devolucao' => 'int',
        'v_bc' => 'float',
        'p_icms' => 'float',
        'v_icms' => 'float',
        'v_pis' => 'float',
        'v_cofins' => 'float',
        'v_fcp' => 'float',
        'g_proc' => '\NuvemFiscal\Model\NfcomSefazGProc[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'v_item' => null,
        'q_faturada' => null,
        'v_prod' => null,
        'v_desc' => null,
        'v_outro' => null,
        'ind_devolucao' => null,
        'v_bc' => null,
        'p_icms' => null,
        'v_icms' => null,
        'v_pis' => null,
        'v_cofins' => null,
        'v_fcp' => null,
        'g_proc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'v_item' => true,
        'q_faturada' => true,
        'v_prod' => true,
        'v_desc' => true,
        'v_outro' => true,
        'ind_devolucao' => true,
        'v_bc' => true,
        'p_icms' => true,
        'v_icms' => true,
        'v_pis' => true,
        'v_cofins' => true,
        'v_fcp' => true,
        'g_proc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v_item' => 'vItem',
        'q_faturada' => 'qFaturada',
        'v_prod' => 'vProd',
        'v_desc' => 'vDesc',
        'v_outro' => 'vOutro',
        'ind_devolucao' => 'indDevolucao',
        'v_bc' => 'vBC',
        'p_icms' => 'pICMS',
        'v_icms' => 'vICMS',
        'v_pis' => 'vPIS',
        'v_cofins' => 'vCOFINS',
        'v_fcp' => 'vFCP',
        'g_proc' => 'gProc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v_item' => 'setVItem',
        'q_faturada' => 'setQFaturada',
        'v_prod' => 'setVProd',
        'v_desc' => 'setVDesc',
        'v_outro' => 'setVOutro',
        'ind_devolucao' => 'setIndDevolucao',
        'v_bc' => 'setVBc',
        'p_icms' => 'setPIcms',
        'v_icms' => 'setVIcms',
        'v_pis' => 'setVPis',
        'v_cofins' => 'setVCofins',
        'v_fcp' => 'setVFcp',
        'g_proc' => 'setGProc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v_item' => 'getVItem',
        'q_faturada' => 'getQFaturada',
        'v_prod' => 'getVProd',
        'v_desc' => 'getVDesc',
        'v_outro' => 'getVOutro',
        'ind_devolucao' => 'getIndDevolucao',
        'v_bc' => 'getVBc',
        'p_icms' => 'getPIcms',
        'v_icms' => 'getVIcms',
        'v_pis' => 'getVPis',
        'v_cofins' => 'getVCofins',
        'v_fcp' => 'getVFcp',
        'g_proc' => 'getGProc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('v_item', $data ?? [], null);
        $this->setIfExists('q_faturada', $data ?? [], null);
        $this->setIfExists('v_prod', $data ?? [], null);
        $this->setIfExists('v_desc', $data ?? [], null);
        $this->setIfExists('v_outro', $data ?? [], null);
        $this->setIfExists('ind_devolucao', $data ?? [], null);
        $this->setIfExists('v_bc', $data ?? [], null);
        $this->setIfExists('p_icms', $data ?? [], null);
        $this->setIfExists('v_icms', $data ?? [], null);
        $this->setIfExists('v_pis', $data ?? [], null);
        $this->setIfExists('v_cofins', $data ?? [], null);
        $this->setIfExists('v_fcp', $data ?? [], null);
        $this->setIfExists('g_proc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['v_item'] === null) {
            $invalidProperties[] = "'v_item' can't be null";
        }
        if (($this->container['v_item'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_item', must be bigger than or equal to 0.";
        }

        if ($this->container['q_faturada'] === null) {
            $invalidProperties[] = "'q_faturada' can't be null";
        }
        if (($this->container['q_faturada'] < 0)) {
            $invalidProperties[] = "invalid value for 'q_faturada', must be bigger than or equal to 0.";
        }

        if ($this->container['v_prod'] === null) {
            $invalidProperties[] = "'v_prod' can't be null";
        }
        if (($this->container['v_prod'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_prod', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_desc']) && ($this->container['v_desc'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_desc', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_outro']) && ($this->container['v_outro'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_outro', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_bc']) && ($this->container['v_bc'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_bc', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['p_icms']) && ($this->container['p_icms'] < 0)) {
            $invalidProperties[] = "invalid value for 'p_icms', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_icms']) && ($this->container['v_icms'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_icms', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_pis']) && ($this->container['v_pis'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_pis', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_cofins']) && ($this->container['v_cofins'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_cofins', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['v_fcp']) && ($this->container['v_fcp'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_fcp', must be bigger than or equal to 0.";
        }

        if ($this->container['g_proc'] === null) {
            $invalidProperties[] = "'g_proc' can't be null";
        }
        if ((count($this->container['g_proc']) > 10)) {
            $invalidProperties[] = "invalid value for 'g_proc', number of items must be less than or equal to 10.";
        }

        if ((count($this->container['g_proc']) < 1)) {
            $invalidProperties[] = "invalid value for 'g_proc', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v_item
     *
     * @return float
     */
    public function getVItem()
    {
        return $this->container['v_item'];
    }

    /**
     * Sets v_item
     *
     * @param float $v_item Valor unitário do item.  Informar o valor sem a influência da decisão judicial/administrativa.
     *
     * @return self
     */
    public function setVItem($v_item)
    {
        if (is_null($v_item)) {
            array_push($this->openAPINullablesSetToNull, 'v_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_item) && ($v_item < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_item when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_item'] = $v_item;

        return $this;
    }

    /**
     * Gets q_faturada
     *
     * @return float
     */
    public function getQFaturada()
    {
        return $this->container['q_faturada'];
    }

    /**
     * Sets q_faturada
     *
     * @param float $q_faturada Quantidade Faturada.  Informar a quantidade de comercialização do produto .
     *
     * @return self
     */
    public function setQFaturada($q_faturada)
    {
        if (is_null($q_faturada)) {
            array_push($this->openAPINullablesSetToNull, 'q_faturada');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q_faturada', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($q_faturada) && ($q_faturada < 0)) {
            throw new \InvalidArgumentException('invalid value for $q_faturada when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['q_faturada'] = $q_faturada;

        return $this;
    }

    /**
     * Gets v_prod
     *
     * @return float
     */
    public function getVProd()
    {
        return $this->container['v_prod'];
    }

    /**
     * Sets v_prod
     *
     * @param float $v_prod Valor total do item.
     *
     * @return self
     */
    public function setVProd($v_prod)
    {
        if (is_null($v_prod)) {
            array_push($this->openAPINullablesSetToNull, 'v_prod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_prod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_prod) && ($v_prod < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_prod when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_prod'] = $v_prod;

        return $this;
    }

    /**
     * Gets v_desc
     *
     * @return float|null
     */
    public function getVDesc()
    {
        return $this->container['v_desc'];
    }

    /**
     * Sets v_desc
     *
     * @param float|null $v_desc Valor do Desconto.
     *
     * @return self
     */
    public function setVDesc($v_desc)
    {
        if (is_null($v_desc)) {
            array_push($this->openAPINullablesSetToNull, 'v_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_desc) && ($v_desc < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_desc when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_desc'] = $v_desc;

        return $this;
    }

    /**
     * Gets v_outro
     *
     * @return float|null
     */
    public function getVOutro()
    {
        return $this->container['v_outro'];
    }

    /**
     * Sets v_outro
     *
     * @param float|null $v_outro Outras despesas acessórias.
     *
     * @return self
     */
    public function setVOutro($v_outro)
    {
        if (is_null($v_outro)) {
            array_push($this->openAPINullablesSetToNull, 'v_outro');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_outro', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_outro) && ($v_outro < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_outro when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_outro'] = $v_outro;

        return $this;
    }

    /**
     * Gets ind_devolucao
     *
     * @return int|null
     */
    public function getIndDevolucao()
    {
        return $this->container['ind_devolucao'];
    }

    /**
     * Sets ind_devolucao
     *
     * @param int|null $ind_devolucao Indicador de devolução do valor do item.  * 1 - Devolução do valor do item
     *
     * @return self
     */
    public function setIndDevolucao($ind_devolucao)
    {
        if (is_null($ind_devolucao)) {
            array_push($this->openAPINullablesSetToNull, 'ind_devolucao');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_devolucao', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_devolucao'] = $ind_devolucao;

        return $this;
    }

    /**
     * Gets v_bc
     *
     * @return float|null
     */
    public function getVBc()
    {
        return $this->container['v_bc'];
    }

    /**
     * Sets v_bc
     *
     * @param float|null $v_bc Valor da BC do ICMS.
     *
     * @return self
     */
    public function setVBc($v_bc)
    {
        if (is_null($v_bc)) {
            array_push($this->openAPINullablesSetToNull, 'v_bc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_bc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_bc) && ($v_bc < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_bc when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_bc'] = $v_bc;

        return $this;
    }

    /**
     * Gets p_icms
     *
     * @return float|null
     */
    public function getPIcms()
    {
        return $this->container['p_icms'];
    }

    /**
     * Sets p_icms
     *
     * @param float|null $p_icms Alíquota do ICMS.
     *
     * @return self
     */
    public function setPIcms($p_icms)
    {
        if (is_null($p_icms)) {
            array_push($this->openAPINullablesSetToNull, 'p_icms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('p_icms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($p_icms) && ($p_icms < 0)) {
            throw new \InvalidArgumentException('invalid value for $p_icms when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['p_icms'] = $p_icms;

        return $this;
    }

    /**
     * Gets v_icms
     *
     * @return float|null
     */
    public function getVIcms()
    {
        return $this->container['v_icms'];
    }

    /**
     * Sets v_icms
     *
     * @param float|null $v_icms Valor do ICMS.
     *
     * @return self
     */
    public function setVIcms($v_icms)
    {
        if (is_null($v_icms)) {
            array_push($this->openAPINullablesSetToNull, 'v_icms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_icms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_icms) && ($v_icms < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_icms when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_icms'] = $v_icms;

        return $this;
    }

    /**
     * Gets v_pis
     *
     * @return float|null
     */
    public function getVPis()
    {
        return $this->container['v_pis'];
    }

    /**
     * Sets v_pis
     *
     * @param float|null $v_pis Valor do PIS.
     *
     * @return self
     */
    public function setVPis($v_pis)
    {
        if (is_null($v_pis)) {
            array_push($this->openAPINullablesSetToNull, 'v_pis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_pis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_pis) && ($v_pis < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_pis when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_pis'] = $v_pis;

        return $this;
    }

    /**
     * Gets v_cofins
     *
     * @return float|null
     */
    public function getVCofins()
    {
        return $this->container['v_cofins'];
    }

    /**
     * Sets v_cofins
     *
     * @param float|null $v_cofins Valor do COFINS.
     *
     * @return self
     */
    public function setVCofins($v_cofins)
    {
        if (is_null($v_cofins)) {
            array_push($this->openAPINullablesSetToNull, 'v_cofins');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_cofins', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_cofins) && ($v_cofins < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_cofins when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_cofins'] = $v_cofins;

        return $this;
    }

    /**
     * Gets v_fcp
     *
     * @return float|null
     */
    public function getVFcp()
    {
        return $this->container['v_fcp'];
    }

    /**
     * Sets v_fcp
     *
     * @param float|null $v_fcp Valor do Fundo de Combate à Pobreza (FCP).
     *
     * @return self
     */
    public function setVFcp($v_fcp)
    {
        if (is_null($v_fcp)) {
            array_push($this->openAPINullablesSetToNull, 'v_fcp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_fcp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_fcp) && ($v_fcp < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_fcp when calling NfcomSefazGProcRef., must be bigger than or equal to 0.');
        }

        $this->container['v_fcp'] = $v_fcp;

        return $this;
    }

    /**
     * Gets g_proc
     *
     * @return \NuvemFiscal\Model\NfcomSefazGProc[]
     */
    public function getGProc()
    {
        return $this->container['g_proc'];
    }

    /**
     * Sets g_proc
     *
     * @param \NuvemFiscal\Model\NfcomSefazGProc[] $g_proc g_proc
     *
     * @return self
     */
    public function setGProc($g_proc)
    {
        if (is_null($g_proc)) {
            throw new \InvalidArgumentException('non-nullable g_proc cannot be null');
        }

        if ((count($g_proc) > 10)) {
            throw new \InvalidArgumentException('invalid value for $g_proc when calling NfcomSefazGProcRef., number of items must be less than or equal to 10.');
        }
        if ((count($g_proc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $g_proc when calling NfcomSefazGProcRef., number of items must be greater than or equal to 1.');
        }
        $this->container['g_proc'] = $g_proc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


