<?php
/**
 * DceSefazIde
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * DceSefazIde Class Doc Comment
 *
 * @category Class
 * @description Identificação da DCe.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DceSefazIde implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DceSefazIde';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c_uf' => 'int',
        'c_dc' => 'string',
        'mod' => 'int',
        'serie' => 'int',
        'n_dc' => 'int',
        'dh_emi' => '\DateTime',
        'tp_emis' => 'int',
        'tp_emit' => 'int',
        'n_site_autoriz' => 'int',
        'c_dv' => 'int',
        'tp_amb' => 'int',
        'ver_proc' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c_uf' => null,
        'c_dc' => null,
        'mod' => null,
        'serie' => null,
        'n_dc' => null,
        'dh_emi' => 'date-time',
        'tp_emis' => null,
        'tp_emit' => null,
        'n_site_autoriz' => null,
        'c_dv' => null,
        'tp_amb' => null,
        'ver_proc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'c_uf' => true,
        'c_dc' => true,
        'mod' => true,
        'serie' => true,
        'n_dc' => true,
        'dh_emi' => true,
        'tp_emis' => true,
        'tp_emit' => true,
        'n_site_autoriz' => true,
        'c_dv' => true,
        'tp_amb' => true,
        'ver_proc' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_uf' => 'cUF',
        'c_dc' => 'cDC',
        'mod' => 'mod',
        'serie' => 'serie',
        'n_dc' => 'nDC',
        'dh_emi' => 'dhEmi',
        'tp_emis' => 'tpEmis',
        'tp_emit' => 'tpEmit',
        'n_site_autoriz' => 'nSiteAutoriz',
        'c_dv' => 'cDV',
        'tp_amb' => 'tpAmb',
        'ver_proc' => 'verProc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_uf' => 'setCUf',
        'c_dc' => 'setCDc',
        'mod' => 'setMod',
        'serie' => 'setSerie',
        'n_dc' => 'setNDc',
        'dh_emi' => 'setDhEmi',
        'tp_emis' => 'setTpEmis',
        'tp_emit' => 'setTpEmit',
        'n_site_autoriz' => 'setNSiteAutoriz',
        'c_dv' => 'setCDv',
        'tp_amb' => 'setTpAmb',
        'ver_proc' => 'setVerProc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_uf' => 'getCUf',
        'c_dc' => 'getCDc',
        'mod' => 'getMod',
        'serie' => 'getSerie',
        'n_dc' => 'getNDc',
        'dh_emi' => 'getDhEmi',
        'tp_emis' => 'getTpEmis',
        'tp_emit' => 'getTpEmit',
        'n_site_autoriz' => 'getNSiteAutoriz',
        'c_dv' => 'getCDv',
        'tp_amb' => 'getTpAmb',
        'ver_proc' => 'getVerProc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('c_uf', $data ?? [], null);
        $this->setIfExists('c_dc', $data ?? [], null);
        $this->setIfExists('mod', $data ?? [], null);
        $this->setIfExists('serie', $data ?? [], null);
        $this->setIfExists('n_dc', $data ?? [], null);
        $this->setIfExists('dh_emi', $data ?? [], null);
        $this->setIfExists('tp_emis', $data ?? [], null);
        $this->setIfExists('tp_emit', $data ?? [], null);
        $this->setIfExists('n_site_autoriz', $data ?? [], null);
        $this->setIfExists('c_dv', $data ?? [], null);
        $this->setIfExists('tp_amb', $data ?? [], null);
        $this->setIfExists('ver_proc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['c_uf'] === null) {
            $invalidProperties[] = "'c_uf' can't be null";
        }
        if ($this->container['serie'] === null) {
            $invalidProperties[] = "'serie' can't be null";
        }
        if (($this->container['serie'] > 999)) {
            $invalidProperties[] = "invalid value for 'serie', must be smaller than or equal to 999.";
        }

        if (($this->container['serie'] < 0)) {
            $invalidProperties[] = "invalid value for 'serie', must be bigger than or equal to 0.";
        }

        if ($this->container['n_dc'] === null) {
            $invalidProperties[] = "'n_dc' can't be null";
        }
        if (($this->container['n_dc'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'n_dc', must be smaller than or equal to 999999999.";
        }

        if (($this->container['n_dc'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_dc', must be bigger than or equal to 1.";
        }

        if ($this->container['dh_emi'] === null) {
            $invalidProperties[] = "'dh_emi' can't be null";
        }
        if ($this->container['tp_emis'] === null) {
            $invalidProperties[] = "'tp_emis' can't be null";
        }
        if ($this->container['tp_emit'] === null) {
            $invalidProperties[] = "'tp_emit' can't be null";
        }
        if (($this->container['tp_emit'] > 4)) {
            $invalidProperties[] = "invalid value for 'tp_emit', must be smaller than or equal to 4.";
        }

        if (($this->container['tp_emit'] < 0)) {
            $invalidProperties[] = "invalid value for 'tp_emit', must be bigger than or equal to 0.";
        }

        if ($this->container['n_site_autoriz'] === null) {
            $invalidProperties[] = "'n_site_autoriz' can't be null";
        }
        if (($this->container['n_site_autoriz'] > 9)) {
            $invalidProperties[] = "invalid value for 'n_site_autoriz', must be smaller than or equal to 9.";
        }

        if (($this->container['n_site_autoriz'] < 0)) {
            $invalidProperties[] = "invalid value for 'n_site_autoriz', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] > 9)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] < 0)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be bigger than or equal to 0.";
        }

        if ($this->container['ver_proc'] === null) {
            $invalidProperties[] = "'ver_proc' can't be null";
        }
        if ((mb_strlen($this->container['ver_proc']) > 20)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['ver_proc']) < 1)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_uf
     *
     * @return int
     */
    public function getCUf()
    {
        return $this->container['c_uf'];
    }

    /**
     * Sets c_uf
     *
     * @param int $c_uf Código da UF de emissão e autorização da DCe.  Código da UF de emissão e autorização do Documento Fiscal. Utilizar a  Tabela do IBGE de código de unidades da federação.
     *
     * @return self
     */
    public function setCUf($c_uf)
    {
        if (is_null($c_uf)) {
            array_push($this->openAPINullablesSetToNull, 'c_uf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_uf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_uf'] = $c_uf;

        return $this;
    }

    /**
     * Gets c_dc
     *
     * @return string|null
     */
    public function getCDc()
    {
        return $this->container['c_dc'];
    }

    /**
     * Sets c_dc
     *
     * @param string|null $c_dc Código numérico que compõe a Chave de Acesso.  Código aleatório gerado pelo emitente, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCDc($c_dc)
    {
        if (is_null($c_dc)) {
            array_push($this->openAPINullablesSetToNull, 'c_dc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_dc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_dc'] = $c_dc;

        return $this;
    }

    /**
     * Gets mod
     *
     * @return int|null
     */
    public function getMod()
    {
        return $this->container['mod'];
    }

    /**
     * Sets mod
     *
     * @param int|null $mod Modelo da DCe.  Utilizar o código 99 para identificação da DCe.
     *
     * @return self
     */
    public function setMod($mod)
    {
        if (is_null($mod)) {
            array_push($this->openAPINullablesSetToNull, 'mod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod'] = $mod;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return int
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param int $serie Série do documento fiscal.  Informar a série do documento fiscal (informar zero para série única).
     *
     * @return self
     */
    public function setSerie($serie)
    {
        if (is_null($serie)) {
            array_push($this->openAPINullablesSetToNull, 'serie');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serie', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($serie) && ($serie > 999)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling DceSefazIde., must be smaller than or equal to 999.');
        }
        if (!is_null($serie) && ($serie < 0)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling DceSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets n_dc
     *
     * @return int
     */
    public function getNDc()
    {
        return $this->container['n_dc'];
    }

    /**
     * Sets n_dc
     *
     * @param int $n_dc Número do documento fiscal.  Número que identifica o documento fiscal 1 a 999999999.
     *
     * @return self
     */
    public function setNDc($n_dc)
    {
        if (is_null($n_dc)) {
            array_push($this->openAPINullablesSetToNull, 'n_dc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_dc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n_dc) && ($n_dc > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $n_dc when calling DceSefazIde., must be smaller than or equal to 999999999.');
        }
        if (!is_null($n_dc) && ($n_dc < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_dc when calling DceSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['n_dc'] = $n_dc;

        return $this;
    }

    /**
     * Gets dh_emi
     *
     * @return \DateTime
     */
    public function getDhEmi()
    {
        return $this->container['dh_emi'];
    }

    /**
     * Sets dh_emi
     *
     * @param \DateTime $dh_emi Data e hora de emissão do documento fiscal.  Formato UTC (AAAA-MM-DDThh:mm:ssTZD, onde TZD = +hh:mm ou -hh:mm).
     *
     * @return self
     */
    public function setDhEmi($dh_emi)
    {
        if (is_null($dh_emi)) {
            array_push($this->openAPINullablesSetToNull, 'dh_emi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_emi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_emi'] = $dh_emi;

        return $this;
    }

    /**
     * Gets tp_emis
     *
     * @return int
     */
    public function getTpEmis()
    {
        return $this->container['tp_emis'];
    }

    /**
     * Sets tp_emis
     *
     * @param int $tp_emis Forma de emissão do Documento Fiscal.  * 1 - Normal (não contingência)  * 9 - Contingência off-line da DCe
     *
     * @return self
     */
    public function setTpEmis($tp_emis)
    {
        if (is_null($tp_emis)) {
            array_push($this->openAPINullablesSetToNull, 'tp_emis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_emis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_emis'] = $tp_emis;

        return $this;
    }

    /**
     * Gets tp_emit
     *
     * @return int
     */
    public function getTpEmit()
    {
        return $this->container['tp_emit'];
    }

    /**
     * Sets tp_emit
     *
     * @param int $tp_emit Tipo do Emitente da DCe.  * 0 - App Fisco  * 1 - Marketplace  * 2 - Emissor próprio  * 3 - Transportadora  * 4 - ECT
     *
     * @return self
     */
    public function setTpEmit($tp_emit)
    {
        if (is_null($tp_emit)) {
            array_push($this->openAPINullablesSetToNull, 'tp_emit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_emit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($tp_emit) && ($tp_emit > 4)) {
            throw new \InvalidArgumentException('invalid value for $tp_emit when calling DceSefazIde., must be smaller than or equal to 4.');
        }
        if (!is_null($tp_emit) && ($tp_emit < 0)) {
            throw new \InvalidArgumentException('invalid value for $tp_emit when calling DceSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['tp_emit'] = $tp_emit;

        return $this;
    }

    /**
     * Gets n_site_autoriz
     *
     * @return int
     */
    public function getNSiteAutoriz()
    {
        return $this->container['n_site_autoriz'];
    }

    /**
     * Sets n_site_autoriz
     *
     * @param int $n_site_autoriz Identificação do número do Site do Autorizador de recepção da DCe.  Se o autorizador da DCe possuir apenas um site deverá ser informado com Zero (0), em caso de Autorizador trabalhar com múltiplos sites indicar o número do site para qual foi endereçada a DCE (1 a 9).  Observação: o ambiente autorizador que trabalhar com mais de um Site deverá divulgar para cada endereço de site qual número correspondente de nSiteAutoriz o contribuinte pode usar.
     *
     * @return self
     */
    public function setNSiteAutoriz($n_site_autoriz)
    {
        if (is_null($n_site_autoriz)) {
            array_push($this->openAPINullablesSetToNull, 'n_site_autoriz');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_site_autoriz', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n_site_autoriz) && ($n_site_autoriz > 9)) {
            throw new \InvalidArgumentException('invalid value for $n_site_autoriz when calling DceSefazIde., must be smaller than or equal to 9.');
        }
        if (!is_null($n_site_autoriz) && ($n_site_autoriz < 0)) {
            throw new \InvalidArgumentException('invalid value for $n_site_autoriz when calling DceSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['n_site_autoriz'] = $n_site_autoriz;

        return $this;
    }

    /**
     * Gets c_dv
     *
     * @return int|null
     */
    public function getCDv()
    {
        return $this->container['c_dv'];
    }

    /**
     * Sets c_dv
     *
     * @param int|null $c_dv Digito verificador da chave de acesso.  Informar o dígito de controle da chave de acesso documento fiscal, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCDv($c_dv)
    {
        if (is_null($c_dv)) {
            array_push($this->openAPINullablesSetToNull, 'c_dv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_dv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($c_dv) && ($c_dv > 9)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling DceSefazIde., must be smaller than or equal to 9.');
        }
        if (!is_null($c_dv) && ($c_dv < 0)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling DceSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['c_dv'] = $c_dv;

        return $this;
    }

    /**
     * Gets tp_amb
     *
     * @return int|null
     */
    public function getTpAmb()
    {
        return $this->container['tp_amb'];
    }

    /**
     * Sets tp_amb
     *
     * @param int|null $tp_amb Tipo do Ambiente:  * 1 - Produção  * 2 - Homologação
     *
     * @return self
     */
    public function setTpAmb($tp_amb)
    {
        if (is_null($tp_amb)) {
            array_push($this->openAPINullablesSetToNull, 'tp_amb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_amb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_amb'] = $tp_amb;

        return $this;
    }

    /**
     * Gets ver_proc
     *
     * @return string
     */
    public function getVerProc()
    {
        return $this->container['ver_proc'];
    }

    /**
     * Sets ver_proc
     *
     * @param string $ver_proc Versão do processo de emissão.  Informar a versão do aplicativo emissor de DCe.
     *
     * @return self
     */
    public function setVerProc($ver_proc)
    {
        if (is_null($ver_proc)) {
            array_push($this->openAPINullablesSetToNull, 'ver_proc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ver_proc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling DceSefazIde., must be smaller than or equal to 20.');
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling DceSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['ver_proc'] = $ver_proc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


