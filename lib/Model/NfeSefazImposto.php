<?php
/**
 * NfeSefazImposto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazImposto Class Doc Comment
 *
 * @category Class
 * @description Tributos incidentes nos produtos ou serviços da NF-e.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazImposto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazImposto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'v_tot_trib' => 'float',
        'icms' => '\NuvemFiscal\Model\NfeSefazICMS',
        'ipi' => '\NuvemFiscal\Model\NfeSefazIpi',
        'ii' => '\NuvemFiscal\Model\NfeSefazII',
        'issqn' => '\NuvemFiscal\Model\NfeSefazISSQN',
        'pis' => '\NuvemFiscal\Model\NfeSefazPIS',
        'pisst' => '\NuvemFiscal\Model\NfeSefazPISST',
        'cofins' => '\NuvemFiscal\Model\NfeSefazCOFINS',
        'cofinsst' => '\NuvemFiscal\Model\NfeSefazCOFINSST',
        'icmsuf_dest' => '\NuvemFiscal\Model\NfeSefazICMSUFDest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'v_tot_trib' => null,
        'icms' => null,
        'ipi' => null,
        'ii' => null,
        'issqn' => null,
        'pis' => null,
        'pisst' => null,
        'cofins' => null,
        'cofinsst' => null,
        'icmsuf_dest' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'v_tot_trib' => true,
		'icms' => false,
		'ipi' => false,
		'ii' => false,
		'issqn' => false,
		'pis' => false,
		'pisst' => false,
		'cofins' => false,
		'cofinsst' => false,
		'icmsuf_dest' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v_tot_trib' => 'vTotTrib',
        'icms' => 'ICMS',
        'ipi' => 'IPI',
        'ii' => 'II',
        'issqn' => 'ISSQN',
        'pis' => 'PIS',
        'pisst' => 'PISST',
        'cofins' => 'COFINS',
        'cofinsst' => 'COFINSST',
        'icmsuf_dest' => 'ICMSUFDest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v_tot_trib' => 'setVTotTrib',
        'icms' => 'setIcms',
        'ipi' => 'setIpi',
        'ii' => 'setIi',
        'issqn' => 'setIssqn',
        'pis' => 'setPis',
        'pisst' => 'setPisst',
        'cofins' => 'setCofins',
        'cofinsst' => 'setCofinsst',
        'icmsuf_dest' => 'setIcmsufDest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v_tot_trib' => 'getVTotTrib',
        'icms' => 'getIcms',
        'ipi' => 'getIpi',
        'ii' => 'getIi',
        'issqn' => 'getIssqn',
        'pis' => 'getPis',
        'pisst' => 'getPisst',
        'cofins' => 'getCofins',
        'cofinsst' => 'getCofinsst',
        'icmsuf_dest' => 'getIcmsufDest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('v_tot_trib', $data ?? [], null);
        $this->setIfExists('icms', $data ?? [], null);
        $this->setIfExists('ipi', $data ?? [], null);
        $this->setIfExists('ii', $data ?? [], null);
        $this->setIfExists('issqn', $data ?? [], null);
        $this->setIfExists('pis', $data ?? [], null);
        $this->setIfExists('pisst', $data ?? [], null);
        $this->setIfExists('cofins', $data ?? [], null);
        $this->setIfExists('cofinsst', $data ?? [], null);
        $this->setIfExists('icmsuf_dest', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v_tot_trib
     *
     * @return float|null
     */
    public function getVTotTrib()
    {
        return $this->container['v_tot_trib'];
    }

    /**
     * Sets v_tot_trib
     *
     * @param float|null $v_tot_trib Valor estimado total de impostos federais, estaduais e municipais.
     *
     * @return self
     */
    public function setVTotTrib($v_tot_trib)
    {
        if (is_null($v_tot_trib)) {
            array_push($this->openAPINullablesSetToNull, 'v_tot_trib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_tot_trib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_tot_trib'] = $v_tot_trib;

        return $this;
    }

    /**
     * Gets icms
     *
     * @return \NuvemFiscal\Model\NfeSefazICMS|null
     */
    public function getIcms()
    {
        return $this->container['icms'];
    }

    /**
     * Sets icms
     *
     * @param \NuvemFiscal\Model\NfeSefazICMS|null $icms icms
     *
     * @return self
     */
    public function setIcms($icms)
    {
        if (is_null($icms)) {
            throw new \InvalidArgumentException('non-nullable icms cannot be null');
        }
        $this->container['icms'] = $icms;

        return $this;
    }

    /**
     * Gets ipi
     *
     * @return \NuvemFiscal\Model\NfeSefazIpi|null
     */
    public function getIpi()
    {
        return $this->container['ipi'];
    }

    /**
     * Sets ipi
     *
     * @param \NuvemFiscal\Model\NfeSefazIpi|null $ipi ipi
     *
     * @return self
     */
    public function setIpi($ipi)
    {
        if (is_null($ipi)) {
            throw new \InvalidArgumentException('non-nullable ipi cannot be null');
        }
        $this->container['ipi'] = $ipi;

        return $this;
    }

    /**
     * Gets ii
     *
     * @return \NuvemFiscal\Model\NfeSefazII|null
     */
    public function getIi()
    {
        return $this->container['ii'];
    }

    /**
     * Sets ii
     *
     * @param \NuvemFiscal\Model\NfeSefazII|null $ii ii
     *
     * @return self
     */
    public function setIi($ii)
    {
        if (is_null($ii)) {
            throw new \InvalidArgumentException('non-nullable ii cannot be null');
        }
        $this->container['ii'] = $ii;

        return $this;
    }

    /**
     * Gets issqn
     *
     * @return \NuvemFiscal\Model\NfeSefazISSQN|null
     */
    public function getIssqn()
    {
        return $this->container['issqn'];
    }

    /**
     * Sets issqn
     *
     * @param \NuvemFiscal\Model\NfeSefazISSQN|null $issqn issqn
     *
     * @return self
     */
    public function setIssqn($issqn)
    {
        if (is_null($issqn)) {
            throw new \InvalidArgumentException('non-nullable issqn cannot be null');
        }
        $this->container['issqn'] = $issqn;

        return $this;
    }

    /**
     * Gets pis
     *
     * @return \NuvemFiscal\Model\NfeSefazPIS|null
     */
    public function getPis()
    {
        return $this->container['pis'];
    }

    /**
     * Sets pis
     *
     * @param \NuvemFiscal\Model\NfeSefazPIS|null $pis pis
     *
     * @return self
     */
    public function setPis($pis)
    {
        if (is_null($pis)) {
            throw new \InvalidArgumentException('non-nullable pis cannot be null');
        }
        $this->container['pis'] = $pis;

        return $this;
    }

    /**
     * Gets pisst
     *
     * @return \NuvemFiscal\Model\NfeSefazPISST|null
     */
    public function getPisst()
    {
        return $this->container['pisst'];
    }

    /**
     * Sets pisst
     *
     * @param \NuvemFiscal\Model\NfeSefazPISST|null $pisst pisst
     *
     * @return self
     */
    public function setPisst($pisst)
    {
        if (is_null($pisst)) {
            throw new \InvalidArgumentException('non-nullable pisst cannot be null');
        }
        $this->container['pisst'] = $pisst;

        return $this;
    }

    /**
     * Gets cofins
     *
     * @return \NuvemFiscal\Model\NfeSefazCOFINS|null
     */
    public function getCofins()
    {
        return $this->container['cofins'];
    }

    /**
     * Sets cofins
     *
     * @param \NuvemFiscal\Model\NfeSefazCOFINS|null $cofins cofins
     *
     * @return self
     */
    public function setCofins($cofins)
    {
        if (is_null($cofins)) {
            throw new \InvalidArgumentException('non-nullable cofins cannot be null');
        }
        $this->container['cofins'] = $cofins;

        return $this;
    }

    /**
     * Gets cofinsst
     *
     * @return \NuvemFiscal\Model\NfeSefazCOFINSST|null
     */
    public function getCofinsst()
    {
        return $this->container['cofinsst'];
    }

    /**
     * Sets cofinsst
     *
     * @param \NuvemFiscal\Model\NfeSefazCOFINSST|null $cofinsst cofinsst
     *
     * @return self
     */
    public function setCofinsst($cofinsst)
    {
        if (is_null($cofinsst)) {
            throw new \InvalidArgumentException('non-nullable cofinsst cannot be null');
        }
        $this->container['cofinsst'] = $cofinsst;

        return $this;
    }

    /**
     * Gets icmsuf_dest
     *
     * @return \NuvemFiscal\Model\NfeSefazICMSUFDest|null
     */
    public function getIcmsufDest()
    {
        return $this->container['icmsuf_dest'];
    }

    /**
     * Sets icmsuf_dest
     *
     * @param \NuvemFiscal\Model\NfeSefazICMSUFDest|null $icmsuf_dest icmsuf_dest
     *
     * @return self
     */
    public function setIcmsufDest($icmsuf_dest)
    {
        if (is_null($icmsuf_dest)) {
            throw new \InvalidArgumentException('non-nullable icmsuf_dest cannot be null');
        }
        $this->container['icmsuf_dest'] = $icmsuf_dest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


