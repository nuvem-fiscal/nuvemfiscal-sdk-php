<?php
/**
 * CteSefazIde
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * CteSefazIde Class Doc Comment
 *
 * @category Class
 * @description Identificação do CT-e.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CteSefazIde implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CteSefazIde';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c_uf' => 'int',
        'c_ct' => 'string',
        'cfop' => 'string',
        'nat_op' => 'string',
        'mod' => 'int',
        'serie' => 'int',
        'n_ct' => 'int',
        'dh_emi' => '\DateTime',
        'tp_imp' => 'int',
        'tp_emis' => 'int',
        'c_dv' => 'int',
        'tp_amb' => 'int',
        'tp_cte' => 'int',
        'proc_emi' => 'int',
        'ver_proc' => 'string',
        'ind_globalizado' => 'int',
        'c_mun_env' => 'string',
        'x_mun_env' => 'string',
        'uf_env' => 'string',
        'modal' => 'string',
        'tp_serv' => 'int',
        'c_mun_ini' => 'string',
        'x_mun_ini' => 'string',
        'uf_ini' => 'string',
        'c_mun_fim' => 'string',
        'x_mun_fim' => 'string',
        'uf_fim' => 'string',
        'retira' => 'int',
        'x_det_retira' => 'string',
        'ind_ie_toma' => 'int',
        'toma3' => '\NuvemFiscal\Model\CteSefazToma3',
        'toma4' => '\NuvemFiscal\Model\CteSefazToma4',
        'dh_cont' => '\DateTime',
        'x_just' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c_uf' => null,
        'c_ct' => null,
        'cfop' => null,
        'nat_op' => null,
        'mod' => null,
        'serie' => null,
        'n_ct' => null,
        'dh_emi' => 'date-time',
        'tp_imp' => null,
        'tp_emis' => null,
        'c_dv' => null,
        'tp_amb' => null,
        'tp_cte' => null,
        'proc_emi' => null,
        'ver_proc' => null,
        'ind_globalizado' => null,
        'c_mun_env' => null,
        'x_mun_env' => null,
        'uf_env' => null,
        'modal' => null,
        'tp_serv' => null,
        'c_mun_ini' => null,
        'x_mun_ini' => null,
        'uf_ini' => null,
        'c_mun_fim' => null,
        'x_mun_fim' => null,
        'uf_fim' => null,
        'retira' => null,
        'x_det_retira' => null,
        'ind_ie_toma' => null,
        'toma3' => null,
        'toma4' => null,
        'dh_cont' => 'date-time',
        'x_just' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'c_uf' => true,
		'c_ct' => true,
		'cfop' => true,
		'nat_op' => true,
		'mod' => true,
		'serie' => true,
		'n_ct' => true,
		'dh_emi' => true,
		'tp_imp' => true,
		'tp_emis' => true,
		'c_dv' => true,
		'tp_amb' => true,
		'tp_cte' => true,
		'proc_emi' => true,
		'ver_proc' => true,
		'ind_globalizado' => true,
		'c_mun_env' => true,
		'x_mun_env' => true,
		'uf_env' => true,
		'modal' => true,
		'tp_serv' => true,
		'c_mun_ini' => true,
		'x_mun_ini' => true,
		'uf_ini' => true,
		'c_mun_fim' => true,
		'x_mun_fim' => true,
		'uf_fim' => true,
		'retira' => true,
		'x_det_retira' => true,
		'ind_ie_toma' => true,
		'toma3' => false,
		'toma4' => false,
		'dh_cont' => true,
		'x_just' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_uf' => 'cUF',
        'c_ct' => 'cCT',
        'cfop' => 'CFOP',
        'nat_op' => 'natOp',
        'mod' => 'mod',
        'serie' => 'serie',
        'n_ct' => 'nCT',
        'dh_emi' => 'dhEmi',
        'tp_imp' => 'tpImp',
        'tp_emis' => 'tpEmis',
        'c_dv' => 'cDV',
        'tp_amb' => 'tpAmb',
        'tp_cte' => 'tpCTe',
        'proc_emi' => 'procEmi',
        'ver_proc' => 'verProc',
        'ind_globalizado' => 'indGlobalizado',
        'c_mun_env' => 'cMunEnv',
        'x_mun_env' => 'xMunEnv',
        'uf_env' => 'UFEnv',
        'modal' => 'modal',
        'tp_serv' => 'tpServ',
        'c_mun_ini' => 'cMunIni',
        'x_mun_ini' => 'xMunIni',
        'uf_ini' => 'UFIni',
        'c_mun_fim' => 'cMunFim',
        'x_mun_fim' => 'xMunFim',
        'uf_fim' => 'UFFim',
        'retira' => 'retira',
        'x_det_retira' => 'xDetRetira',
        'ind_ie_toma' => 'indIEToma',
        'toma3' => 'toma3',
        'toma4' => 'toma4',
        'dh_cont' => 'dhCont',
        'x_just' => 'xJust'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_uf' => 'setCUf',
        'c_ct' => 'setCCt',
        'cfop' => 'setCfop',
        'nat_op' => 'setNatOp',
        'mod' => 'setMod',
        'serie' => 'setSerie',
        'n_ct' => 'setNCt',
        'dh_emi' => 'setDhEmi',
        'tp_imp' => 'setTpImp',
        'tp_emis' => 'setTpEmis',
        'c_dv' => 'setCDv',
        'tp_amb' => 'setTpAmb',
        'tp_cte' => 'setTpCte',
        'proc_emi' => 'setProcEmi',
        'ver_proc' => 'setVerProc',
        'ind_globalizado' => 'setIndGlobalizado',
        'c_mun_env' => 'setCMunEnv',
        'x_mun_env' => 'setXMunEnv',
        'uf_env' => 'setUfEnv',
        'modal' => 'setModal',
        'tp_serv' => 'setTpServ',
        'c_mun_ini' => 'setCMunIni',
        'x_mun_ini' => 'setXMunIni',
        'uf_ini' => 'setUfIni',
        'c_mun_fim' => 'setCMunFim',
        'x_mun_fim' => 'setXMunFim',
        'uf_fim' => 'setUfFim',
        'retira' => 'setRetira',
        'x_det_retira' => 'setXDetRetira',
        'ind_ie_toma' => 'setIndIeToma',
        'toma3' => 'setToma3',
        'toma4' => 'setToma4',
        'dh_cont' => 'setDhCont',
        'x_just' => 'setXJust'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_uf' => 'getCUf',
        'c_ct' => 'getCCt',
        'cfop' => 'getCfop',
        'nat_op' => 'getNatOp',
        'mod' => 'getMod',
        'serie' => 'getSerie',
        'n_ct' => 'getNCt',
        'dh_emi' => 'getDhEmi',
        'tp_imp' => 'getTpImp',
        'tp_emis' => 'getTpEmis',
        'c_dv' => 'getCDv',
        'tp_amb' => 'getTpAmb',
        'tp_cte' => 'getTpCte',
        'proc_emi' => 'getProcEmi',
        'ver_proc' => 'getVerProc',
        'ind_globalizado' => 'getIndGlobalizado',
        'c_mun_env' => 'getCMunEnv',
        'x_mun_env' => 'getXMunEnv',
        'uf_env' => 'getUfEnv',
        'modal' => 'getModal',
        'tp_serv' => 'getTpServ',
        'c_mun_ini' => 'getCMunIni',
        'x_mun_ini' => 'getXMunIni',
        'uf_ini' => 'getUfIni',
        'c_mun_fim' => 'getCMunFim',
        'x_mun_fim' => 'getXMunFim',
        'uf_fim' => 'getUfFim',
        'retira' => 'getRetira',
        'x_det_retira' => 'getXDetRetira',
        'ind_ie_toma' => 'getIndIeToma',
        'toma3' => 'getToma3',
        'toma4' => 'getToma4',
        'dh_cont' => 'getDhCont',
        'x_just' => 'getXJust'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('c_uf', $data ?? [], null);
        $this->setIfExists('c_ct', $data ?? [], null);
        $this->setIfExists('cfop', $data ?? [], null);
        $this->setIfExists('nat_op', $data ?? [], null);
        $this->setIfExists('mod', $data ?? [], null);
        $this->setIfExists('serie', $data ?? [], null);
        $this->setIfExists('n_ct', $data ?? [], null);
        $this->setIfExists('dh_emi', $data ?? [], null);
        $this->setIfExists('tp_imp', $data ?? [], null);
        $this->setIfExists('tp_emis', $data ?? [], null);
        $this->setIfExists('c_dv', $data ?? [], null);
        $this->setIfExists('tp_amb', $data ?? [], null);
        $this->setIfExists('tp_cte', $data ?? [], null);
        $this->setIfExists('proc_emi', $data ?? [], null);
        $this->setIfExists('ver_proc', $data ?? [], null);
        $this->setIfExists('ind_globalizado', $data ?? [], null);
        $this->setIfExists('c_mun_env', $data ?? [], null);
        $this->setIfExists('x_mun_env', $data ?? [], null);
        $this->setIfExists('uf_env', $data ?? [], null);
        $this->setIfExists('modal', $data ?? [], null);
        $this->setIfExists('tp_serv', $data ?? [], null);
        $this->setIfExists('c_mun_ini', $data ?? [], null);
        $this->setIfExists('x_mun_ini', $data ?? [], null);
        $this->setIfExists('uf_ini', $data ?? [], null);
        $this->setIfExists('c_mun_fim', $data ?? [], null);
        $this->setIfExists('x_mun_fim', $data ?? [], null);
        $this->setIfExists('uf_fim', $data ?? [], null);
        $this->setIfExists('retira', $data ?? [], null);
        $this->setIfExists('x_det_retira', $data ?? [], null);
        $this->setIfExists('ind_ie_toma', $data ?? [], null);
        $this->setIfExists('toma3', $data ?? [], null);
        $this->setIfExists('toma4', $data ?? [], null);
        $this->setIfExists('dh_cont', $data ?? [], null);
        $this->setIfExists('x_just', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['c_uf'] === null) {
            $invalidProperties[] = "'c_uf' can't be null";
        }
        if ($this->container['cfop'] === null) {
            $invalidProperties[] = "'cfop' can't be null";
        }
        if ($this->container['nat_op'] === null) {
            $invalidProperties[] = "'nat_op' can't be null";
        }
        if ((mb_strlen($this->container['nat_op']) > 60)) {
            $invalidProperties[] = "invalid value for 'nat_op', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['nat_op']) < 1)) {
            $invalidProperties[] = "invalid value for 'nat_op', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['serie'] === null) {
            $invalidProperties[] = "'serie' can't be null";
        }
        if (($this->container['serie'] > 999)) {
            $invalidProperties[] = "invalid value for 'serie', must be smaller than or equal to 999.";
        }

        if (($this->container['serie'] < 0)) {
            $invalidProperties[] = "invalid value for 'serie', must be bigger than or equal to 0.";
        }

        if ($this->container['n_ct'] === null) {
            $invalidProperties[] = "'n_ct' can't be null";
        }
        if (($this->container['n_ct'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'n_ct', must be smaller than or equal to 999999999.";
        }

        if (($this->container['n_ct'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_ct', must be bigger than or equal to 1.";
        }

        if ($this->container['dh_emi'] === null) {
            $invalidProperties[] = "'dh_emi' can't be null";
        }
        if ($this->container['tp_imp'] === null) {
            $invalidProperties[] = "'tp_imp' can't be null";
        }
        if ($this->container['tp_emis'] === null) {
            $invalidProperties[] = "'tp_emis' can't be null";
        }
        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] > 9)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['c_dv']) && ($this->container['c_dv'] < 0)) {
            $invalidProperties[] = "invalid value for 'c_dv', must be bigger than or equal to 0.";
        }

        if ($this->container['tp_cte'] === null) {
            $invalidProperties[] = "'tp_cte' can't be null";
        }
        if ($this->container['proc_emi'] === null) {
            $invalidProperties[] = "'proc_emi' can't be null";
        }
        if ($this->container['ver_proc'] === null) {
            $invalidProperties[] = "'ver_proc' can't be null";
        }
        if ((mb_strlen($this->container['ver_proc']) > 20)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['ver_proc']) < 1)) {
            $invalidProperties[] = "invalid value for 'ver_proc', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['c_mun_env'] === null) {
            $invalidProperties[] = "'c_mun_env' can't be null";
        }
        if ($this->container['x_mun_env'] === null) {
            $invalidProperties[] = "'x_mun_env' can't be null";
        }
        if ((mb_strlen($this->container['x_mun_env']) > 60)) {
            $invalidProperties[] = "invalid value for 'x_mun_env', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['x_mun_env']) < 2)) {
            $invalidProperties[] = "invalid value for 'x_mun_env', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['uf_env'] === null) {
            $invalidProperties[] = "'uf_env' can't be null";
        }
        if ($this->container['modal'] === null) {
            $invalidProperties[] = "'modal' can't be null";
        }
        if ($this->container['tp_serv'] === null) {
            $invalidProperties[] = "'tp_serv' can't be null";
        }
        if ($this->container['c_mun_ini'] === null) {
            $invalidProperties[] = "'c_mun_ini' can't be null";
        }
        if ($this->container['x_mun_ini'] === null) {
            $invalidProperties[] = "'x_mun_ini' can't be null";
        }
        if ((mb_strlen($this->container['x_mun_ini']) > 60)) {
            $invalidProperties[] = "invalid value for 'x_mun_ini', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['x_mun_ini']) < 2)) {
            $invalidProperties[] = "invalid value for 'x_mun_ini', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['uf_ini'] === null) {
            $invalidProperties[] = "'uf_ini' can't be null";
        }
        if ($this->container['c_mun_fim'] === null) {
            $invalidProperties[] = "'c_mun_fim' can't be null";
        }
        if ($this->container['x_mun_fim'] === null) {
            $invalidProperties[] = "'x_mun_fim' can't be null";
        }
        if ((mb_strlen($this->container['x_mun_fim']) > 60)) {
            $invalidProperties[] = "invalid value for 'x_mun_fim', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['x_mun_fim']) < 2)) {
            $invalidProperties[] = "invalid value for 'x_mun_fim', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['uf_fim'] === null) {
            $invalidProperties[] = "'uf_fim' can't be null";
        }
        if ($this->container['retira'] === null) {
            $invalidProperties[] = "'retira' can't be null";
        }
        if (!is_null($this->container['x_det_retira']) && (mb_strlen($this->container['x_det_retira']) > 160)) {
            $invalidProperties[] = "invalid value for 'x_det_retira', the character length must be smaller than or equal to 160.";
        }

        if (!is_null($this->container['x_det_retira']) && (mb_strlen($this->container['x_det_retira']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_det_retira', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ind_ie_toma'] === null) {
            $invalidProperties[] = "'ind_ie_toma' can't be null";
        }
        if (!is_null($this->container['x_just']) && (mb_strlen($this->container['x_just']) > 256)) {
            $invalidProperties[] = "invalid value for 'x_just', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['x_just']) && (mb_strlen($this->container['x_just']) < 15)) {
            $invalidProperties[] = "invalid value for 'x_just', the character length must be bigger than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_uf
     *
     * @return int
     */
    public function getCUf()
    {
        return $this->container['c_uf'];
    }

    /**
     * Sets c_uf
     *
     * @param int $c_uf Código da UF do emitente do CT-e.  Utilizar a Tabela do IBGE.
     *
     * @return self
     */
    public function setCUf($c_uf)
    {
        if (is_null($c_uf)) {
            array_push($this->openAPINullablesSetToNull, 'c_uf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_uf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_uf'] = $c_uf;

        return $this;
    }

    /**
     * Gets c_ct
     *
     * @return string|null
     */
    public function getCCt()
    {
        return $this->container['c_ct'];
    }

    /**
     * Sets c_ct
     *
     * @param string|null $c_ct Código numérico que compõe a Chave de Acesso.  Número aleatório gerado pelo emitente para cada CT-e, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCCt($c_ct)
    {
        if (is_null($c_ct)) {
            array_push($this->openAPINullablesSetToNull, 'c_ct');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_ct', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_ct'] = $c_ct;

        return $this;
    }

    /**
     * Gets cfop
     *
     * @return string
     */
    public function getCfop()
    {
        return $this->container['cfop'];
    }

    /**
     * Sets cfop
     *
     * @param string $cfop Código Fiscal de Operações e Prestações.
     *
     * @return self
     */
    public function setCfop($cfop)
    {
        if (is_null($cfop)) {
            array_push($this->openAPINullablesSetToNull, 'cfop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfop'] = $cfop;

        return $this;
    }

    /**
     * Gets nat_op
     *
     * @return string
     */
    public function getNatOp()
    {
        return $this->container['nat_op'];
    }

    /**
     * Sets nat_op
     *
     * @param string $nat_op Natureza da Operação.
     *
     * @return self
     */
    public function setNatOp($nat_op)
    {
        if (is_null($nat_op)) {
            array_push($this->openAPINullablesSetToNull, 'nat_op');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nat_op', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nat_op) && (mb_strlen($nat_op) > 60)) {
            throw new \InvalidArgumentException('invalid length for $nat_op when calling CteSefazIde., must be smaller than or equal to 60.');
        }
        if (!is_null($nat_op) && (mb_strlen($nat_op) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nat_op when calling CteSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['nat_op'] = $nat_op;

        return $this;
    }

    /**
     * Gets mod
     *
     * @return int|null
     */
    public function getMod()
    {
        return $this->container['mod'];
    }

    /**
     * Sets mod
     *
     * @param int|null $mod Modelo do documento fiscal.  Utilizar o código 57 para identificação do CT-e, emitido em substituição aos modelos de conhecimentos em papel.
     *
     * @return self
     */
    public function setMod($mod)
    {
        if (is_null($mod)) {
            array_push($this->openAPINullablesSetToNull, 'mod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod'] = $mod;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return int
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param int $serie Série do CT-e.  Preencher com \"0\" no caso de série única.
     *
     * @return self
     */
    public function setSerie($serie)
    {
        if (is_null($serie)) {
            array_push($this->openAPINullablesSetToNull, 'serie');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serie', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($serie) && ($serie > 999)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling CteSefazIde., must be smaller than or equal to 999.');
        }
        if (!is_null($serie) && ($serie < 0)) {
            throw new \InvalidArgumentException('invalid value for $serie when calling CteSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets n_ct
     *
     * @return int
     */
    public function getNCt()
    {
        return $this->container['n_ct'];
    }

    /**
     * Sets n_ct
     *
     * @param int $n_ct Número do CT-e.
     *
     * @return self
     */
    public function setNCt($n_ct)
    {
        if (is_null($n_ct)) {
            array_push($this->openAPINullablesSetToNull, 'n_ct');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_ct', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n_ct) && ($n_ct > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $n_ct when calling CteSefazIde., must be smaller than or equal to 999999999.');
        }
        if (!is_null($n_ct) && ($n_ct < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_ct when calling CteSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['n_ct'] = $n_ct;

        return $this;
    }

    /**
     * Gets dh_emi
     *
     * @return \DateTime
     */
    public function getDhEmi()
    {
        return $this->container['dh_emi'];
    }

    /**
     * Sets dh_emi
     *
     * @param \DateTime $dh_emi Data e hora de emissão do CT-e.  Formato AAAA-MM-DDTHH:MM:DD TZD.
     *
     * @return self
     */
    public function setDhEmi($dh_emi)
    {
        if (is_null($dh_emi)) {
            array_push($this->openAPINullablesSetToNull, 'dh_emi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_emi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_emi'] = $dh_emi;

        return $this;
    }

    /**
     * Gets tp_imp
     *
     * @return int
     */
    public function getTpImp()
    {
        return $this->container['tp_imp'];
    }

    /**
     * Sets tp_imp
     *
     * @param int $tp_imp Formato de impressão do DACTE:  * 1 - Retrato  * 2 - Paisagem
     *
     * @return self
     */
    public function setTpImp($tp_imp)
    {
        if (is_null($tp_imp)) {
            array_push($this->openAPINullablesSetToNull, 'tp_imp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_imp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_imp'] = $tp_imp;

        return $this;
    }

    /**
     * Gets tp_emis
     *
     * @return int
     */
    public function getTpEmis()
    {
        return $this->container['tp_emis'];
    }

    /**
     * Sets tp_emis
     *
     * @param int $tp_emis Forma de emissão do CT-e.  Preencher com:  * 1 - Normal  * 3 - Regime Especial NFF  * 4 - EPEC pela SVC  * 5 - Contingência FSDA  * 7 - Autorização pela SVC-RS  * 8 - Autorização pela SVC-SP
     *
     * @return self
     */
    public function setTpEmis($tp_emis)
    {
        if (is_null($tp_emis)) {
            array_push($this->openAPINullablesSetToNull, 'tp_emis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_emis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_emis'] = $tp_emis;

        return $this;
    }

    /**
     * Gets c_dv
     *
     * @return int|null
     */
    public function getCDv()
    {
        return $this->container['c_dv'];
    }

    /**
     * Sets c_dv
     *
     * @param int|null $c_dv Digito Verificador da chave de acesso do CT-e.  Informar o dígito  de controle da chave de acesso do CT-e, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setCDv($c_dv)
    {
        if (is_null($c_dv)) {
            array_push($this->openAPINullablesSetToNull, 'c_dv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_dv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($c_dv) && ($c_dv > 9)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling CteSefazIde., must be smaller than or equal to 9.');
        }
        if (!is_null($c_dv) && ($c_dv < 0)) {
            throw new \InvalidArgumentException('invalid value for $c_dv when calling CteSefazIde., must be bigger than or equal to 0.');
        }

        $this->container['c_dv'] = $c_dv;

        return $this;
    }

    /**
     * Gets tp_amb
     *
     * @return int|null
     */
    public function getTpAmb()
    {
        return $this->container['tp_amb'];
    }

    /**
     * Sets tp_amb
     *
     * @param int|null $tp_amb Tipo do Ambiente:  * 1 - Produção  * 2 - Homologação
     *
     * @return self
     */
    public function setTpAmb($tp_amb)
    {
        if (is_null($tp_amb)) {
            array_push($this->openAPINullablesSetToNull, 'tp_amb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_amb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_amb'] = $tp_amb;

        return $this;
    }

    /**
     * Gets tp_cte
     *
     * @return int
     */
    public function getTpCte()
    {
        return $this->container['tp_cte'];
    }

    /**
     * Sets tp_cte
     *
     * @param int $tp_cte Tipo do CT-e.  Preencher com:  * 0 - CT-e Normal  * 1 - CT-e de Complemento de Valores  * 3 - CT-e de Substituição
     *
     * @return self
     */
    public function setTpCte($tp_cte)
    {
        if (is_null($tp_cte)) {
            array_push($this->openAPINullablesSetToNull, 'tp_cte');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_cte', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_cte'] = $tp_cte;

        return $this;
    }

    /**
     * Gets proc_emi
     *
     * @return int
     */
    public function getProcEmi()
    {
        return $this->container['proc_emi'];
    }

    /**
     * Sets proc_emi
     *
     * @param int $proc_emi Identificador do processo de emissão do CT-e.  Preencher com:  * 0 - emissão de CT-e com aplicativo do contribuinte  * 3 - emissão CT-e pelo contribuinte com aplicativo fornecido pelo SEBRAE
     *
     * @return self
     */
    public function setProcEmi($proc_emi)
    {
        if (is_null($proc_emi)) {
            array_push($this->openAPINullablesSetToNull, 'proc_emi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proc_emi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['proc_emi'] = $proc_emi;

        return $this;
    }

    /**
     * Gets ver_proc
     *
     * @return string
     */
    public function getVerProc()
    {
        return $this->container['ver_proc'];
    }

    /**
     * Sets ver_proc
     *
     * @param string $ver_proc Versão do processo de emissão.  Iinformar a versão do aplicativo emissor de CT-e.
     *
     * @return self
     */
    public function setVerProc($ver_proc)
    {
        if (is_null($ver_proc)) {
            array_push($this->openAPINullablesSetToNull, 'ver_proc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ver_proc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling CteSefazIde., must be smaller than or equal to 20.');
        }
        if (!is_null($ver_proc) && (mb_strlen($ver_proc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ver_proc when calling CteSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['ver_proc'] = $ver_proc;

        return $this;
    }

    /**
     * Gets ind_globalizado
     *
     * @return int|null
     */
    public function getIndGlobalizado()
    {
        return $this->container['ind_globalizado'];
    }

    /**
     * Sets ind_globalizado
     *
     * @param int|null $ind_globalizado Indicador de CT-e Globalizado.  Informar valor 1 quando for Globalizado e não informar a tag quando não tratar de CT-e Globalizado.
     *
     * @return self
     */
    public function setIndGlobalizado($ind_globalizado)
    {
        if (is_null($ind_globalizado)) {
            array_push($this->openAPINullablesSetToNull, 'ind_globalizado');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_globalizado', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_globalizado'] = $ind_globalizado;

        return $this;
    }

    /**
     * Gets c_mun_env
     *
     * @return string
     */
    public function getCMunEnv()
    {
        return $this->container['c_mun_env'];
    }

    /**
     * Sets c_mun_env
     *
     * @param string $c_mun_env Código do Município de envio do CT-e (de onde o documento foi transmitido).  Utilizar a tabela do IBGE. Informar 9999999 para as operações com o exterior.
     *
     * @return self
     */
    public function setCMunEnv($c_mun_env)
    {
        if (is_null($c_mun_env)) {
            array_push($this->openAPINullablesSetToNull, 'c_mun_env');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mun_env', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mun_env'] = $c_mun_env;

        return $this;
    }

    /**
     * Gets x_mun_env
     *
     * @return string
     */
    public function getXMunEnv()
    {
        return $this->container['x_mun_env'];
    }

    /**
     * Sets x_mun_env
     *
     * @param string $x_mun_env Nome do Município de envio do CT-e (de onde o documento foi transmitido).  Informar PAIS/Municipio para as operações com o exterior.
     *
     * @return self
     */
    public function setXMunEnv($x_mun_env)
    {
        if (is_null($x_mun_env)) {
            array_push($this->openAPINullablesSetToNull, 'x_mun_env');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_mun_env', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_mun_env) && (mb_strlen($x_mun_env) > 60)) {
            throw new \InvalidArgumentException('invalid length for $x_mun_env when calling CteSefazIde., must be smaller than or equal to 60.');
        }
        if (!is_null($x_mun_env) && (mb_strlen($x_mun_env) < 2)) {
            throw new \InvalidArgumentException('invalid length for $x_mun_env when calling CteSefazIde., must be bigger than or equal to 2.');
        }

        $this->container['x_mun_env'] = $x_mun_env;

        return $this;
    }

    /**
     * Gets uf_env
     *
     * @return string
     */
    public function getUfEnv()
    {
        return $this->container['uf_env'];
    }

    /**
     * Sets uf_env
     *
     * @param string $uf_env Sigla da UF de envio do CT-e (de onde o documento foi transmitido).  Informar 'EX' para operações com o exterior.
     *
     * @return self
     */
    public function setUfEnv($uf_env)
    {
        if (is_null($uf_env)) {
            array_push($this->openAPINullablesSetToNull, 'uf_env');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uf_env', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uf_env'] = $uf_env;

        return $this;
    }

    /**
     * Gets modal
     *
     * @return string
     */
    public function getModal()
    {
        return $this->container['modal'];
    }

    /**
     * Sets modal
     *
     * @param string $modal Modal. Preencher com:  * 01 - Rodoviário  * 02 - Aéreo  * 03 - Aquaviário  * 04 - Ferroviário  * 05 - Dutoviário  * 06 - Multimodal
     *
     * @return self
     */
    public function setModal($modal)
    {
        if (is_null($modal)) {
            array_push($this->openAPINullablesSetToNull, 'modal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modal'] = $modal;

        return $this;
    }

    /**
     * Gets tp_serv
     *
     * @return int
     */
    public function getTpServ()
    {
        return $this->container['tp_serv'];
    }

    /**
     * Sets tp_serv
     *
     * @param int $tp_serv Tipo do Serviço.  Preencher com:  * 0 - Normal  * 1 - Subcontratação  * 2 - Redespacho  * 3 - Redespacho Intermediário  * 4 - Serviço Vinculado a Multimodal
     *
     * @return self
     */
    public function setTpServ($tp_serv)
    {
        if (is_null($tp_serv)) {
            array_push($this->openAPINullablesSetToNull, 'tp_serv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_serv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_serv'] = $tp_serv;

        return $this;
    }

    /**
     * Gets c_mun_ini
     *
     * @return string
     */
    public function getCMunIni()
    {
        return $this->container['c_mun_ini'];
    }

    /**
     * Sets c_mun_ini
     *
     * @param string $c_mun_ini Código do Município de início da prestação.  Utilizar a tabela do IBGE. Informar 9999999 para operações com o exterior.
     *
     * @return self
     */
    public function setCMunIni($c_mun_ini)
    {
        if (is_null($c_mun_ini)) {
            array_push($this->openAPINullablesSetToNull, 'c_mun_ini');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mun_ini', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mun_ini'] = $c_mun_ini;

        return $this;
    }

    /**
     * Gets x_mun_ini
     *
     * @return string
     */
    public function getXMunIni()
    {
        return $this->container['x_mun_ini'];
    }

    /**
     * Sets x_mun_ini
     *
     * @param string $x_mun_ini Nome do Município do início da prestação.  Informar 'EXTERIOR' para operações com o exterior.
     *
     * @return self
     */
    public function setXMunIni($x_mun_ini)
    {
        if (is_null($x_mun_ini)) {
            array_push($this->openAPINullablesSetToNull, 'x_mun_ini');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_mun_ini', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_mun_ini) && (mb_strlen($x_mun_ini) > 60)) {
            throw new \InvalidArgumentException('invalid length for $x_mun_ini when calling CteSefazIde., must be smaller than or equal to 60.');
        }
        if (!is_null($x_mun_ini) && (mb_strlen($x_mun_ini) < 2)) {
            throw new \InvalidArgumentException('invalid length for $x_mun_ini when calling CteSefazIde., must be bigger than or equal to 2.');
        }

        $this->container['x_mun_ini'] = $x_mun_ini;

        return $this;
    }

    /**
     * Gets uf_ini
     *
     * @return string
     */
    public function getUfIni()
    {
        return $this->container['uf_ini'];
    }

    /**
     * Sets uf_ini
     *
     * @param string $uf_ini UF do início da prestação.  Informar 'EX' para operações com o exterior.
     *
     * @return self
     */
    public function setUfIni($uf_ini)
    {
        if (is_null($uf_ini)) {
            array_push($this->openAPINullablesSetToNull, 'uf_ini');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uf_ini', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uf_ini'] = $uf_ini;

        return $this;
    }

    /**
     * Gets c_mun_fim
     *
     * @return string
     */
    public function getCMunFim()
    {
        return $this->container['c_mun_fim'];
    }

    /**
     * Sets c_mun_fim
     *
     * @param string $c_mun_fim Código do Município de término da prestação.  Utilizar a tabela do IBGE. Informar 9999999 para operações com o exterior.
     *
     * @return self
     */
    public function setCMunFim($c_mun_fim)
    {
        if (is_null($c_mun_fim)) {
            array_push($this->openAPINullablesSetToNull, 'c_mun_fim');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_mun_fim', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_mun_fim'] = $c_mun_fim;

        return $this;
    }

    /**
     * Gets x_mun_fim
     *
     * @return string
     */
    public function getXMunFim()
    {
        return $this->container['x_mun_fim'];
    }

    /**
     * Sets x_mun_fim
     *
     * @param string $x_mun_fim Nome do Município do término da prestação.  Informar 'EXTERIOR' para operações com o exterior.
     *
     * @return self
     */
    public function setXMunFim($x_mun_fim)
    {
        if (is_null($x_mun_fim)) {
            array_push($this->openAPINullablesSetToNull, 'x_mun_fim');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_mun_fim', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_mun_fim) && (mb_strlen($x_mun_fim) > 60)) {
            throw new \InvalidArgumentException('invalid length for $x_mun_fim when calling CteSefazIde., must be smaller than or equal to 60.');
        }
        if (!is_null($x_mun_fim) && (mb_strlen($x_mun_fim) < 2)) {
            throw new \InvalidArgumentException('invalid length for $x_mun_fim when calling CteSefazIde., must be bigger than or equal to 2.');
        }

        $this->container['x_mun_fim'] = $x_mun_fim;

        return $this;
    }

    /**
     * Gets uf_fim
     *
     * @return string
     */
    public function getUfFim()
    {
        return $this->container['uf_fim'];
    }

    /**
     * Sets uf_fim
     *
     * @param string $uf_fim UF do término da prestação.  Informar 'EX' para operações com o exterior.
     *
     * @return self
     */
    public function setUfFim($uf_fim)
    {
        if (is_null($uf_fim)) {
            array_push($this->openAPINullablesSetToNull, 'uf_fim');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uf_fim', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uf_fim'] = $uf_fim;

        return $this;
    }

    /**
     * Gets retira
     *
     * @return int
     */
    public function getRetira()
    {
        return $this->container['retira'];
    }

    /**
     * Sets retira
     *
     * @param int $retira Indicador se o Recebedor retira no Aeroporto, Filial, Porto ou Estação de Destino? Preencher com:  * 0 - Sim  * 1 - Não
     *
     * @return self
     */
    public function setRetira($retira)
    {
        if (is_null($retira)) {
            array_push($this->openAPINullablesSetToNull, 'retira');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retira', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['retira'] = $retira;

        return $this;
    }

    /**
     * Gets x_det_retira
     *
     * @return string|null
     */
    public function getXDetRetira()
    {
        return $this->container['x_det_retira'];
    }

    /**
     * Sets x_det_retira
     *
     * @param string|null $x_det_retira Detalhes do retira.
     *
     * @return self
     */
    public function setXDetRetira($x_det_retira)
    {
        if (is_null($x_det_retira)) {
            array_push($this->openAPINullablesSetToNull, 'x_det_retira');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_det_retira', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_det_retira) && (mb_strlen($x_det_retira) > 160)) {
            throw new \InvalidArgumentException('invalid length for $x_det_retira when calling CteSefazIde., must be smaller than or equal to 160.');
        }
        if (!is_null($x_det_retira) && (mb_strlen($x_det_retira) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_det_retira when calling CteSefazIde., must be bigger than or equal to 1.');
        }

        $this->container['x_det_retira'] = $x_det_retira;

        return $this;
    }

    /**
     * Gets ind_ie_toma
     *
     * @return int
     */
    public function getIndIeToma()
    {
        return $this->container['ind_ie_toma'];
    }

    /**
     * Sets ind_ie_toma
     *
     * @param int $ind_ie_toma Indicador do papel do tomador na prestação do serviço:  * 1 - Contribuinte ICMS  * 2 - Contribuinte isento de inscrição  * 9 - Não Contribuinte  Aplica-se ao tomador que for indicado no toma3 ou toma4.
     *
     * @return self
     */
    public function setIndIeToma($ind_ie_toma)
    {
        if (is_null($ind_ie_toma)) {
            array_push($this->openAPINullablesSetToNull, 'ind_ie_toma');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_ie_toma', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_ie_toma'] = $ind_ie_toma;

        return $this;
    }

    /**
     * Gets toma3
     *
     * @return \NuvemFiscal\Model\CteSefazToma3|null
     */
    public function getToma3()
    {
        return $this->container['toma3'];
    }

    /**
     * Sets toma3
     *
     * @param \NuvemFiscal\Model\CteSefazToma3|null $toma3 toma3
     *
     * @return self
     */
    public function setToma3($toma3)
    {
        if (is_null($toma3)) {
            throw new \InvalidArgumentException('non-nullable toma3 cannot be null');
        }
        $this->container['toma3'] = $toma3;

        return $this;
    }

    /**
     * Gets toma4
     *
     * @return \NuvemFiscal\Model\CteSefazToma4|null
     */
    public function getToma4()
    {
        return $this->container['toma4'];
    }

    /**
     * Sets toma4
     *
     * @param \NuvemFiscal\Model\CteSefazToma4|null $toma4 toma4
     *
     * @return self
     */
    public function setToma4($toma4)
    {
        if (is_null($toma4)) {
            throw new \InvalidArgumentException('non-nullable toma4 cannot be null');
        }
        $this->container['toma4'] = $toma4;

        return $this;
    }

    /**
     * Gets dh_cont
     *
     * @return \DateTime|null
     */
    public function getDhCont()
    {
        return $this->container['dh_cont'];
    }

    /**
     * Sets dh_cont
     *
     * @param \DateTime|null $dh_cont Data e Hora da entrada em contingência.  Informar a data e hora no formato AAAA-MM-DDTHH:MM:SS.
     *
     * @return self
     */
    public function setDhCont($dh_cont)
    {
        if (is_null($dh_cont)) {
            array_push($this->openAPINullablesSetToNull, 'dh_cont');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dh_cont', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dh_cont'] = $dh_cont;

        return $this;
    }

    /**
     * Gets x_just
     *
     * @return string|null
     */
    public function getXJust()
    {
        return $this->container['x_just'];
    }

    /**
     * Sets x_just
     *
     * @param string|null $x_just Justificativa da entrada em contingência.
     *
     * @return self
     */
    public function setXJust($x_just)
    {
        if (is_null($x_just)) {
            array_push($this->openAPINullablesSetToNull, 'x_just');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_just', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_just) && (mb_strlen($x_just) > 256)) {
            throw new \InvalidArgumentException('invalid length for $x_just when calling CteSefazIde., must be smaller than or equal to 256.');
        }
        if (!is_null($x_just) && (mb_strlen($x_just) < 15)) {
            throw new \InvalidArgumentException('invalid length for $x_just when calling CteSefazIde., must be bigger than or equal to 15.');
        }

        $this->container['x_just'] = $x_just;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


