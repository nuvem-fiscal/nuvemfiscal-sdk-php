<?php
/**
 * CnpjSocio
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * CnpjSocio Class Doc Comment
 *
 * @category Class
 * @description Quadro Societário.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CnpjSocio implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CnpjSocio';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'identificador_socio' => '\NuvemFiscal\Model\CnpjIdentificadorSocio',
        'nome' => 'string',
        'cpf_cnpj' => 'string',
        'qualificacao' => '\NuvemFiscal\Model\CnpjQualificacaoSocio',
        'data_entrada_sociedade' => '\DateTime',
        'pais' => '\NuvemFiscal\Model\CnpjPais',
        'representante_legal' => '\NuvemFiscal\Model\CnpjRepresentanteLegal',
        'faixa_etaria' => '\NuvemFiscal\Model\CnpjFaixaEtaria'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'identificador_socio' => null,
        'nome' => null,
        'cpf_cnpj' => null,
        'qualificacao' => null,
        'data_entrada_sociedade' => 'date',
        'pais' => null,
        'representante_legal' => null,
        'faixa_etaria' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'identificador_socio' => false,
		'nome' => false,
		'cpf_cnpj' => false,
		'qualificacao' => false,
		'data_entrada_sociedade' => false,
		'pais' => false,
		'representante_legal' => false,
		'faixa_etaria' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identificador_socio' => 'identificador_socio',
        'nome' => 'nome',
        'cpf_cnpj' => 'cpf_cnpj',
        'qualificacao' => 'qualificacao',
        'data_entrada_sociedade' => 'data_entrada_sociedade',
        'pais' => 'pais',
        'representante_legal' => 'representante_legal',
        'faixa_etaria' => 'faixa_etaria'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identificador_socio' => 'setIdentificadorSocio',
        'nome' => 'setNome',
        'cpf_cnpj' => 'setCpfCnpj',
        'qualificacao' => 'setQualificacao',
        'data_entrada_sociedade' => 'setDataEntradaSociedade',
        'pais' => 'setPais',
        'representante_legal' => 'setRepresentanteLegal',
        'faixa_etaria' => 'setFaixaEtaria'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identificador_socio' => 'getIdentificadorSocio',
        'nome' => 'getNome',
        'cpf_cnpj' => 'getCpfCnpj',
        'qualificacao' => 'getQualificacao',
        'data_entrada_sociedade' => 'getDataEntradaSociedade',
        'pais' => 'getPais',
        'representante_legal' => 'getRepresentanteLegal',
        'faixa_etaria' => 'getFaixaEtaria'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('identificador_socio', $data ?? [], null);
        $this->setIfExists('nome', $data ?? [], null);
        $this->setIfExists('cpf_cnpj', $data ?? [], null);
        $this->setIfExists('qualificacao', $data ?? [], null);
        $this->setIfExists('data_entrada_sociedade', $data ?? [], null);
        $this->setIfExists('pais', $data ?? [], null);
        $this->setIfExists('representante_legal', $data ?? [], null);
        $this->setIfExists('faixa_etaria', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identificador_socio
     *
     * @return \NuvemFiscal\Model\CnpjIdentificadorSocio|null
     */
    public function getIdentificadorSocio()
    {
        return $this->container['identificador_socio'];
    }

    /**
     * Sets identificador_socio
     *
     * @param \NuvemFiscal\Model\CnpjIdentificadorSocio|null $identificador_socio identificador_socio
     *
     * @return self
     */
    public function setIdentificadorSocio($identificador_socio)
    {
        if (is_null($identificador_socio)) {
            throw new \InvalidArgumentException('non-nullable identificador_socio cannot be null');
        }
        $this->container['identificador_socio'] = $identificador_socio;

        return $this;
    }

    /**
     * Gets nome
     *
     * @return string|null
     */
    public function getNome()
    {
        return $this->container['nome'];
    }

    /**
     * Sets nome
     *
     * @param string|null $nome Nome do sócio pessoa física ou a razão social e/ou nome empresarial da  pessoa jurídica e/ou nome do sócio/razão social do sócio estrangeiro.
     *
     * @return self
     */
    public function setNome($nome)
    {
        if (is_null($nome)) {
            throw new \InvalidArgumentException('non-nullable nome cannot be null');
        }
        $this->container['nome'] = $nome;

        return $this;
    }

    /**
     * Gets cpf_cnpj
     *
     * @return string|null
     */
    public function getCpfCnpj()
    {
        return $this->container['cpf_cnpj'];
    }

    /**
     * Sets cpf_cnpj
     *
     * @param string|null $cpf_cnpj CPF ou CNPJ do sócio (sócio estrangeiro não tem esta informação).
     *
     * @return self
     */
    public function setCpfCnpj($cpf_cnpj)
    {
        if (is_null($cpf_cnpj)) {
            throw new \InvalidArgumentException('non-nullable cpf_cnpj cannot be null');
        }
        $this->container['cpf_cnpj'] = $cpf_cnpj;

        return $this;
    }

    /**
     * Gets qualificacao
     *
     * @return \NuvemFiscal\Model\CnpjQualificacaoSocio|null
     */
    public function getQualificacao()
    {
        return $this->container['qualificacao'];
    }

    /**
     * Sets qualificacao
     *
     * @param \NuvemFiscal\Model\CnpjQualificacaoSocio|null $qualificacao qualificacao
     *
     * @return self
     */
    public function setQualificacao($qualificacao)
    {
        if (is_null($qualificacao)) {
            throw new \InvalidArgumentException('non-nullable qualificacao cannot be null');
        }
        $this->container['qualificacao'] = $qualificacao;

        return $this;
    }

    /**
     * Gets data_entrada_sociedade
     *
     * @return \DateTime|null
     */
    public function getDataEntradaSociedade()
    {
        return $this->container['data_entrada_sociedade'];
    }

    /**
     * Sets data_entrada_sociedade
     *
     * @param \DateTime|null $data_entrada_sociedade Data de entrada na sociedade.
     *
     * @return self
     */
    public function setDataEntradaSociedade($data_entrada_sociedade)
    {
        if (is_null($data_entrada_sociedade)) {
            throw new \InvalidArgumentException('non-nullable data_entrada_sociedade cannot be null');
        }
        $this->container['data_entrada_sociedade'] = $data_entrada_sociedade;

        return $this;
    }

    /**
     * Gets pais
     *
     * @return \NuvemFiscal\Model\CnpjPais|null
     */
    public function getPais()
    {
        return $this->container['pais'];
    }

    /**
     * Sets pais
     *
     * @param \NuvemFiscal\Model\CnpjPais|null $pais pais
     *
     * @return self
     */
    public function setPais($pais)
    {
        if (is_null($pais)) {
            throw new \InvalidArgumentException('non-nullable pais cannot be null');
        }
        $this->container['pais'] = $pais;

        return $this;
    }

    /**
     * Gets representante_legal
     *
     * @return \NuvemFiscal\Model\CnpjRepresentanteLegal|null
     */
    public function getRepresentanteLegal()
    {
        return $this->container['representante_legal'];
    }

    /**
     * Sets representante_legal
     *
     * @param \NuvemFiscal\Model\CnpjRepresentanteLegal|null $representante_legal representante_legal
     *
     * @return self
     */
    public function setRepresentanteLegal($representante_legal)
    {
        if (is_null($representante_legal)) {
            throw new \InvalidArgumentException('non-nullable representante_legal cannot be null');
        }
        $this->container['representante_legal'] = $representante_legal;

        return $this;
    }

    /**
     * Gets faixa_etaria
     *
     * @return \NuvemFiscal\Model\CnpjFaixaEtaria|null
     */
    public function getFaixaEtaria()
    {
        return $this->container['faixa_etaria'];
    }

    /**
     * Sets faixa_etaria
     *
     * @param \NuvemFiscal\Model\CnpjFaixaEtaria|null $faixa_etaria faixa_etaria
     *
     * @return self
     */
    public function setFaixaEtaria($faixa_etaria)
    {
        if (is_null($faixa_etaria)) {
            throw new \InvalidArgumentException('non-nullable faixa_etaria cannot be null');
        }
        $this->container['faixa_etaria'] = $faixa_etaria;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


