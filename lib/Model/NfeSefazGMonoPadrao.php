<?php
/**
 * NfeSefazGMonoPadrao
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazGMonoPadrao Class Doc Comment
 *
 * @category Class
 * @description Grupo de informações da Tributação Monofásica padrão.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazGMonoPadrao implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazGMonoPadrao';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'q_bc_mono' => 'float',
        'ad_rem_ibs' => 'float',
        'ad_rem_cbs' => 'float',
        'v_ibs_mono' => 'float',
        'v_cbs_mono' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'q_bc_mono' => null,
        'ad_rem_ibs' => null,
        'ad_rem_cbs' => null,
        'v_ibs_mono' => null,
        'v_cbs_mono' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'q_bc_mono' => true,
        'ad_rem_ibs' => true,
        'ad_rem_cbs' => true,
        'v_ibs_mono' => true,
        'v_cbs_mono' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'q_bc_mono' => 'qBCMono',
        'ad_rem_ibs' => 'adRemIBS',
        'ad_rem_cbs' => 'adRemCBS',
        'v_ibs_mono' => 'vIBSMono',
        'v_cbs_mono' => 'vCBSMono'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'q_bc_mono' => 'setQBcMono',
        'ad_rem_ibs' => 'setAdRemIbs',
        'ad_rem_cbs' => 'setAdRemCbs',
        'v_ibs_mono' => 'setVIbsMono',
        'v_cbs_mono' => 'setVCbsMono'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'q_bc_mono' => 'getQBcMono',
        'ad_rem_ibs' => 'getAdRemIbs',
        'ad_rem_cbs' => 'getAdRemCbs',
        'v_ibs_mono' => 'getVIbsMono',
        'v_cbs_mono' => 'getVCbsMono'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('q_bc_mono', $data ?? [], null);
        $this->setIfExists('ad_rem_ibs', $data ?? [], null);
        $this->setIfExists('ad_rem_cbs', $data ?? [], null);
        $this->setIfExists('v_ibs_mono', $data ?? [], null);
        $this->setIfExists('v_cbs_mono', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['q_bc_mono'] === null) {
            $invalidProperties[] = "'q_bc_mono' can't be null";
        }
        if (($this->container['q_bc_mono'] <= 0)) {
            $invalidProperties[] = "invalid value for 'q_bc_mono', must be bigger than 0.";
        }

        if ($this->container['ad_rem_ibs'] === null) {
            $invalidProperties[] = "'ad_rem_ibs' can't be null";
        }
        if (($this->container['ad_rem_ibs'] < 0)) {
            $invalidProperties[] = "invalid value for 'ad_rem_ibs', must be bigger than or equal to 0.";
        }

        if ($this->container['ad_rem_cbs'] === null) {
            $invalidProperties[] = "'ad_rem_cbs' can't be null";
        }
        if (($this->container['ad_rem_cbs'] < 0)) {
            $invalidProperties[] = "invalid value for 'ad_rem_cbs', must be bigger than or equal to 0.";
        }

        if ($this->container['v_ibs_mono'] === null) {
            $invalidProperties[] = "'v_ibs_mono' can't be null";
        }
        if (($this->container['v_ibs_mono'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_ibs_mono', must be bigger than or equal to 0.";
        }

        if ($this->container['v_cbs_mono'] === null) {
            $invalidProperties[] = "'v_cbs_mono' can't be null";
        }
        if (($this->container['v_cbs_mono'] < 0)) {
            $invalidProperties[] = "invalid value for 'v_cbs_mono', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets q_bc_mono
     *
     * @return float
     */
    public function getQBcMono()
    {
        return $this->container['q_bc_mono'];
    }

    /**
     * Sets q_bc_mono
     *
     * @param float $q_bc_mono Quantidade tributada na monofasia.
     *
     * @return self
     */
    public function setQBcMono($q_bc_mono)
    {
        if (is_null($q_bc_mono)) {
            array_push($this->openAPINullablesSetToNull, 'q_bc_mono');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q_bc_mono', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($q_bc_mono) && ($q_bc_mono <= 0)) {
            throw new \InvalidArgumentException('invalid value for $q_bc_mono when calling NfeSefazGMonoPadrao., must be bigger than 0.');
        }

        $this->container['q_bc_mono'] = $q_bc_mono;

        return $this;
    }

    /**
     * Gets ad_rem_ibs
     *
     * @return float
     */
    public function getAdRemIbs()
    {
        return $this->container['ad_rem_ibs'];
    }

    /**
     * Sets ad_rem_ibs
     *
     * @param float $ad_rem_ibs Alíquota ad rem do IBS.
     *
     * @return self
     */
    public function setAdRemIbs($ad_rem_ibs)
    {
        if (is_null($ad_rem_ibs)) {
            array_push($this->openAPINullablesSetToNull, 'ad_rem_ibs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ad_rem_ibs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($ad_rem_ibs) && ($ad_rem_ibs < 0)) {
            throw new \InvalidArgumentException('invalid value for $ad_rem_ibs when calling NfeSefazGMonoPadrao., must be bigger than or equal to 0.');
        }

        $this->container['ad_rem_ibs'] = $ad_rem_ibs;

        return $this;
    }

    /**
     * Gets ad_rem_cbs
     *
     * @return float
     */
    public function getAdRemCbs()
    {
        return $this->container['ad_rem_cbs'];
    }

    /**
     * Sets ad_rem_cbs
     *
     * @param float $ad_rem_cbs Alíquota ad rem da CBS.
     *
     * @return self
     */
    public function setAdRemCbs($ad_rem_cbs)
    {
        if (is_null($ad_rem_cbs)) {
            array_push($this->openAPINullablesSetToNull, 'ad_rem_cbs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ad_rem_cbs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($ad_rem_cbs) && ($ad_rem_cbs < 0)) {
            throw new \InvalidArgumentException('invalid value for $ad_rem_cbs when calling NfeSefazGMonoPadrao., must be bigger than or equal to 0.');
        }

        $this->container['ad_rem_cbs'] = $ad_rem_cbs;

        return $this;
    }

    /**
     * Gets v_ibs_mono
     *
     * @return float
     */
    public function getVIbsMono()
    {
        return $this->container['v_ibs_mono'];
    }

    /**
     * Sets v_ibs_mono
     *
     * @param float $v_ibs_mono Valor do IBS monofásico.
     *
     * @return self
     */
    public function setVIbsMono($v_ibs_mono)
    {
        if (is_null($v_ibs_mono)) {
            array_push($this->openAPINullablesSetToNull, 'v_ibs_mono');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_ibs_mono', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_ibs_mono) && ($v_ibs_mono < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_ibs_mono when calling NfeSefazGMonoPadrao., must be bigger than or equal to 0.');
        }

        $this->container['v_ibs_mono'] = $v_ibs_mono;

        return $this;
    }

    /**
     * Gets v_cbs_mono
     *
     * @return float
     */
    public function getVCbsMono()
    {
        return $this->container['v_cbs_mono'];
    }

    /**
     * Sets v_cbs_mono
     *
     * @param float $v_cbs_mono Valor da CBS monofásica.
     *
     * @return self
     */
    public function setVCbsMono($v_cbs_mono)
    {
        if (is_null($v_cbs_mono)) {
            array_push($this->openAPINullablesSetToNull, 'v_cbs_mono');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_cbs_mono', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($v_cbs_mono) && ($v_cbs_mono < 0)) {
            throw new \InvalidArgumentException('invalid value for $v_cbs_mono when calling NfeSefazGMonoPadrao., must be bigger than or equal to 0.');
        }

        $this->container['v_cbs_mono'] = $v_cbs_mono;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


