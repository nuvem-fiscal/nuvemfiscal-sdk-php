<?php
/**
 * HttpRequestDebug
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * HttpRequestDebug Class Doc Comment
 *
 * @category Class
 * @description Detalhes técnicos da requisição HTTP realizada ao autorizador.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HttpRequestDebug implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HttpRequestDebug';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'method' => 'string',
        'uri' => 'string',
        'headers' => 'string',
        'response_status_code' => 'int',
        'response_status_reason' => 'string',
        'response_headers' => 'string',
        'response_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'method' => null,
        'uri' => null,
        'headers' => null,
        'response_status_code' => null,
        'response_status_reason' => null,
        'response_headers' => null,
        'response_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'method' => false,
        'uri' => false,
        'headers' => false,
        'response_status_code' => false,
        'response_status_reason' => false,
        'response_headers' => false,
        'response_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'method' => 'method',
        'uri' => 'uri',
        'headers' => 'headers',
        'response_status_code' => 'response_status_code',
        'response_status_reason' => 'response_status_reason',
        'response_headers' => 'response_headers',
        'response_time' => 'response_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'method' => 'setMethod',
        'uri' => 'setUri',
        'headers' => 'setHeaders',
        'response_status_code' => 'setResponseStatusCode',
        'response_status_reason' => 'setResponseStatusReason',
        'response_headers' => 'setResponseHeaders',
        'response_time' => 'setResponseTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'method' => 'getMethod',
        'uri' => 'getUri',
        'headers' => 'getHeaders',
        'response_status_code' => 'getResponseStatusCode',
        'response_status_reason' => 'getResponseStatusReason',
        'response_headers' => 'getResponseHeaders',
        'response_time' => 'getResponseTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('response_status_code', $data ?? [], null);
        $this->setIfExists('response_status_reason', $data ?? [], null);
        $this->setIfExists('response_headers', $data ?? [], null);
        $this->setIfExists('response_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identificador interno da requisição HTTP.    Esse identificador pode ser utilizado no endpoint  <a href=\"#tag/Debug/operation/DebugHttpRequestContent\">Corpo da Requisição HTTP</a> ou <a href=\"#tag/Debug/operation/DebugHttpResponseContent\">Corpo da Resposta HTTP</a>  para obter o conteúdo enviado ou recebido na comunicação com o autorizador.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method Método HTTP utilizado (ex: 'POST').
     *
     * @return self
     */
    public function setMethod($method)
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri URI do serviço externo (SEFAZ, prefeitura, etc.).
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return string|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param string|null $headers Cabeçalhos HTTP enviados na requisição, no formato bruto.
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        if (is_null($headers)) {
            throw new \InvalidArgumentException('non-nullable headers cannot be null');
        }
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets response_status_code
     *
     * @return int|null
     */
    public function getResponseStatusCode()
    {
        return $this->container['response_status_code'];
    }

    /**
     * Sets response_status_code
     *
     * @param int|null $response_status_code Código de status HTTP retornado (ex: 200, 403).
     *
     * @return self
     */
    public function setResponseStatusCode($response_status_code)
    {
        if (is_null($response_status_code)) {
            throw new \InvalidArgumentException('non-nullable response_status_code cannot be null');
        }
        $this->container['response_status_code'] = $response_status_code;

        return $this;
    }

    /**
     * Gets response_status_reason
     *
     * @return string|null
     */
    public function getResponseStatusReason()
    {
        return $this->container['response_status_reason'];
    }

    /**
     * Sets response_status_reason
     *
     * @param string|null $response_status_reason Motivo ou descrição do status HTTP retornado.
     *
     * @return self
     */
    public function setResponseStatusReason($response_status_reason)
    {
        if (is_null($response_status_reason)) {
            throw new \InvalidArgumentException('non-nullable response_status_reason cannot be null');
        }
        $this->container['response_status_reason'] = $response_status_reason;

        return $this;
    }

    /**
     * Gets response_headers
     *
     * @return string|null
     */
    public function getResponseHeaders()
    {
        return $this->container['response_headers'];
    }

    /**
     * Sets response_headers
     *
     * @param string|null $response_headers Cabeçalhos retornados na resposta, no formato bruto.
     *
     * @return self
     */
    public function setResponseHeaders($response_headers)
    {
        if (is_null($response_headers)) {
            throw new \InvalidArgumentException('non-nullable response_headers cannot be null');
        }
        $this->container['response_headers'] = $response_headers;

        return $this;
    }

    /**
     * Gets response_time
     *
     * @return int|null
     */
    public function getResponseTime()
    {
        return $this->container['response_time'];
    }

    /**
     * Sets response_time
     *
     * @param int|null $response_time Tempo de resposta do serviço externo, em milissegundos.
     *
     * @return self
     */
    public function setResponseTime($response_time)
    {
        if (is_null($response_time)) {
            throw new \InvalidArgumentException('non-nullable response_time cannot be null');
        }
        $this->container['response_time'] = $response_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


