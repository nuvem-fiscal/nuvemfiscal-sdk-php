<?php
/**
 * NfeSefazInfNFe
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazInfNFe Class Doc Comment
 *
 * @category Class
 * @description Informações da Nota Fiscal eletrônica.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazInfNFe implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazInfNFe';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'versao' => 'string',
        'id' => 'string',
        'ide' => '\NuvemFiscal\Model\NfeSefazIde',
        'emit' => '\NuvemFiscal\Model\NfeSefazEmit',
        'avulsa' => '\NuvemFiscal\Model\NfeSefazAvulsa',
        'dest' => '\NuvemFiscal\Model\NfeSefazDest',
        'retirada' => '\NuvemFiscal\Model\NfeSefazLocal',
        'entrega' => '\NuvemFiscal\Model\NfeSefazLocal',
        'aut_xml' => '\NuvemFiscal\Model\NfeSefazAutXML[]',
        'det' => '\NuvemFiscal\Model\NfeSefazDet[]',
        'total' => '\NuvemFiscal\Model\NfeSefazTotal',
        'transp' => '\NuvemFiscal\Model\NfeSefazTransp',
        'cobr' => '\NuvemFiscal\Model\NfeSefazCobr',
        'pag' => '\NuvemFiscal\Model\NfeSefazPag',
        'inf_intermed' => '\NuvemFiscal\Model\NfeSefazInfIntermed',
        'inf_adic' => '\NuvemFiscal\Model\NfeSefazInfAdic',
        'exporta' => '\NuvemFiscal\Model\NfeSefazExporta',
        'compra' => '\NuvemFiscal\Model\NfeSefazCompra',
        'cana' => '\NuvemFiscal\Model\NfeSefazCana',
        'inf_resp_tec' => '\NuvemFiscal\Model\NfeSefazInfRespTec',
        'inf_solic_nff' => '\NuvemFiscal\Model\NfeSefazInfSolicNFF'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'versao' => null,
        'id' => null,
        'ide' => null,
        'emit' => null,
        'avulsa' => null,
        'dest' => null,
        'retirada' => null,
        'entrega' => null,
        'aut_xml' => null,
        'det' => null,
        'total' => null,
        'transp' => null,
        'cobr' => null,
        'pag' => null,
        'inf_intermed' => null,
        'inf_adic' => null,
        'exporta' => null,
        'compra' => null,
        'cana' => null,
        'inf_resp_tec' => null,
        'inf_solic_nff' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'versao' => true,
		'id' => true,
		'ide' => false,
		'emit' => false,
		'avulsa' => false,
		'dest' => false,
		'retirada' => false,
		'entrega' => false,
		'aut_xml' => false,
		'det' => false,
		'total' => false,
		'transp' => false,
		'cobr' => false,
		'pag' => false,
		'inf_intermed' => false,
		'inf_adic' => false,
		'exporta' => false,
		'compra' => false,
		'cana' => false,
		'inf_resp_tec' => false,
		'inf_solic_nff' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'versao' => 'versao',
        'id' => 'Id',
        'ide' => 'ide',
        'emit' => 'emit',
        'avulsa' => 'avulsa',
        'dest' => 'dest',
        'retirada' => 'retirada',
        'entrega' => 'entrega',
        'aut_xml' => 'autXML',
        'det' => 'det',
        'total' => 'total',
        'transp' => 'transp',
        'cobr' => 'cobr',
        'pag' => 'pag',
        'inf_intermed' => 'infIntermed',
        'inf_adic' => 'infAdic',
        'exporta' => 'exporta',
        'compra' => 'compra',
        'cana' => 'cana',
        'inf_resp_tec' => 'infRespTec',
        'inf_solic_nff' => 'infSolicNFF'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'versao' => 'setVersao',
        'id' => 'setId',
        'ide' => 'setIde',
        'emit' => 'setEmit',
        'avulsa' => 'setAvulsa',
        'dest' => 'setDest',
        'retirada' => 'setRetirada',
        'entrega' => 'setEntrega',
        'aut_xml' => 'setAutXml',
        'det' => 'setDet',
        'total' => 'setTotal',
        'transp' => 'setTransp',
        'cobr' => 'setCobr',
        'pag' => 'setPag',
        'inf_intermed' => 'setInfIntermed',
        'inf_adic' => 'setInfAdic',
        'exporta' => 'setExporta',
        'compra' => 'setCompra',
        'cana' => 'setCana',
        'inf_resp_tec' => 'setInfRespTec',
        'inf_solic_nff' => 'setInfSolicNff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'versao' => 'getVersao',
        'id' => 'getId',
        'ide' => 'getIde',
        'emit' => 'getEmit',
        'avulsa' => 'getAvulsa',
        'dest' => 'getDest',
        'retirada' => 'getRetirada',
        'entrega' => 'getEntrega',
        'aut_xml' => 'getAutXml',
        'det' => 'getDet',
        'total' => 'getTotal',
        'transp' => 'getTransp',
        'cobr' => 'getCobr',
        'pag' => 'getPag',
        'inf_intermed' => 'getInfIntermed',
        'inf_adic' => 'getInfAdic',
        'exporta' => 'getExporta',
        'compra' => 'getCompra',
        'cana' => 'getCana',
        'inf_resp_tec' => 'getInfRespTec',
        'inf_solic_nff' => 'getInfSolicNff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('versao', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ide', $data ?? [], null);
        $this->setIfExists('emit', $data ?? [], null);
        $this->setIfExists('avulsa', $data ?? [], null);
        $this->setIfExists('dest', $data ?? [], null);
        $this->setIfExists('retirada', $data ?? [], null);
        $this->setIfExists('entrega', $data ?? [], null);
        $this->setIfExists('aut_xml', $data ?? [], null);
        $this->setIfExists('det', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('transp', $data ?? [], null);
        $this->setIfExists('cobr', $data ?? [], null);
        $this->setIfExists('pag', $data ?? [], null);
        $this->setIfExists('inf_intermed', $data ?? [], null);
        $this->setIfExists('inf_adic', $data ?? [], null);
        $this->setIfExists('exporta', $data ?? [], null);
        $this->setIfExists('compra', $data ?? [], null);
        $this->setIfExists('cana', $data ?? [], null);
        $this->setIfExists('inf_resp_tec', $data ?? [], null);
        $this->setIfExists('inf_solic_nff', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['versao'] === null) {
            $invalidProperties[] = "'versao' can't be null";
        }
        if ($this->container['ide'] === null) {
            $invalidProperties[] = "'ide' can't be null";
        }
        if ($this->container['emit'] === null) {
            $invalidProperties[] = "'emit' can't be null";
        }
        if ($this->container['det'] === null) {
            $invalidProperties[] = "'det' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['transp'] === null) {
            $invalidProperties[] = "'transp' can't be null";
        }
        if ($this->container['pag'] === null) {
            $invalidProperties[] = "'pag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets versao
     *
     * @return string
     */
    public function getVersao()
    {
        return $this->container['versao'];
    }

    /**
     * Sets versao
     *
     * @param string $versao Versão do leiaute (v4.00).
     *
     * @return self
     */
    public function setVersao($versao)
    {
        if (is_null($versao)) {
            array_push($this->openAPINullablesSetToNull, 'versao');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('versao', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['versao'] = $versao;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id PL_005d - 11/08/09 - validação do Id.    *Geramos automaticamente quando nenhum valor é informado.*
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ide
     *
     * @return \NuvemFiscal\Model\NfeSefazIde
     */
    public function getIde()
    {
        return $this->container['ide'];
    }

    /**
     * Sets ide
     *
     * @param \NuvemFiscal\Model\NfeSefazIde $ide ide
     *
     * @return self
     */
    public function setIde($ide)
    {
        if (is_null($ide)) {
            throw new \InvalidArgumentException('non-nullable ide cannot be null');
        }
        $this->container['ide'] = $ide;

        return $this;
    }

    /**
     * Gets emit
     *
     * @return \NuvemFiscal\Model\NfeSefazEmit
     */
    public function getEmit()
    {
        return $this->container['emit'];
    }

    /**
     * Sets emit
     *
     * @param \NuvemFiscal\Model\NfeSefazEmit $emit emit
     *
     * @return self
     */
    public function setEmit($emit)
    {
        if (is_null($emit)) {
            throw new \InvalidArgumentException('non-nullable emit cannot be null');
        }
        $this->container['emit'] = $emit;

        return $this;
    }

    /**
     * Gets avulsa
     *
     * @return \NuvemFiscal\Model\NfeSefazAvulsa|null
     */
    public function getAvulsa()
    {
        return $this->container['avulsa'];
    }

    /**
     * Sets avulsa
     *
     * @param \NuvemFiscal\Model\NfeSefazAvulsa|null $avulsa avulsa
     *
     * @return self
     */
    public function setAvulsa($avulsa)
    {
        if (is_null($avulsa)) {
            throw new \InvalidArgumentException('non-nullable avulsa cannot be null');
        }
        $this->container['avulsa'] = $avulsa;

        return $this;
    }

    /**
     * Gets dest
     *
     * @return \NuvemFiscal\Model\NfeSefazDest|null
     */
    public function getDest()
    {
        return $this->container['dest'];
    }

    /**
     * Sets dest
     *
     * @param \NuvemFiscal\Model\NfeSefazDest|null $dest dest
     *
     * @return self
     */
    public function setDest($dest)
    {
        if (is_null($dest)) {
            throw new \InvalidArgumentException('non-nullable dest cannot be null');
        }
        $this->container['dest'] = $dest;

        return $this;
    }

    /**
     * Gets retirada
     *
     * @return \NuvemFiscal\Model\NfeSefazLocal|null
     */
    public function getRetirada()
    {
        return $this->container['retirada'];
    }

    /**
     * Sets retirada
     *
     * @param \NuvemFiscal\Model\NfeSefazLocal|null $retirada retirada
     *
     * @return self
     */
    public function setRetirada($retirada)
    {
        if (is_null($retirada)) {
            throw new \InvalidArgumentException('non-nullable retirada cannot be null');
        }
        $this->container['retirada'] = $retirada;

        return $this;
    }

    /**
     * Gets entrega
     *
     * @return \NuvemFiscal\Model\NfeSefazLocal|null
     */
    public function getEntrega()
    {
        return $this->container['entrega'];
    }

    /**
     * Sets entrega
     *
     * @param \NuvemFiscal\Model\NfeSefazLocal|null $entrega entrega
     *
     * @return self
     */
    public function setEntrega($entrega)
    {
        if (is_null($entrega)) {
            throw new \InvalidArgumentException('non-nullable entrega cannot be null');
        }
        $this->container['entrega'] = $entrega;

        return $this;
    }

    /**
     * Gets aut_xml
     *
     * @return \NuvemFiscal\Model\NfeSefazAutXML[]|null
     */
    public function getAutXml()
    {
        return $this->container['aut_xml'];
    }

    /**
     * Sets aut_xml
     *
     * @param \NuvemFiscal\Model\NfeSefazAutXML[]|null $aut_xml aut_xml
     *
     * @return self
     */
    public function setAutXml($aut_xml)
    {
        if (is_null($aut_xml)) {
            throw new \InvalidArgumentException('non-nullable aut_xml cannot be null');
        }
        $this->container['aut_xml'] = $aut_xml;

        return $this;
    }

    /**
     * Gets det
     *
     * @return \NuvemFiscal\Model\NfeSefazDet[]
     */
    public function getDet()
    {
        return $this->container['det'];
    }

    /**
     * Sets det
     *
     * @param \NuvemFiscal\Model\NfeSefazDet[] $det det
     *
     * @return self
     */
    public function setDet($det)
    {
        if (is_null($det)) {
            throw new \InvalidArgumentException('non-nullable det cannot be null');
        }
        $this->container['det'] = $det;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \NuvemFiscal\Model\NfeSefazTotal
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \NuvemFiscal\Model\NfeSefazTotal $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets transp
     *
     * @return \NuvemFiscal\Model\NfeSefazTransp
     */
    public function getTransp()
    {
        return $this->container['transp'];
    }

    /**
     * Sets transp
     *
     * @param \NuvemFiscal\Model\NfeSefazTransp $transp transp
     *
     * @return self
     */
    public function setTransp($transp)
    {
        if (is_null($transp)) {
            throw new \InvalidArgumentException('non-nullable transp cannot be null');
        }
        $this->container['transp'] = $transp;

        return $this;
    }

    /**
     * Gets cobr
     *
     * @return \NuvemFiscal\Model\NfeSefazCobr|null
     */
    public function getCobr()
    {
        return $this->container['cobr'];
    }

    /**
     * Sets cobr
     *
     * @param \NuvemFiscal\Model\NfeSefazCobr|null $cobr cobr
     *
     * @return self
     */
    public function setCobr($cobr)
    {
        if (is_null($cobr)) {
            throw new \InvalidArgumentException('non-nullable cobr cannot be null');
        }
        $this->container['cobr'] = $cobr;

        return $this;
    }

    /**
     * Gets pag
     *
     * @return \NuvemFiscal\Model\NfeSefazPag
     */
    public function getPag()
    {
        return $this->container['pag'];
    }

    /**
     * Sets pag
     *
     * @param \NuvemFiscal\Model\NfeSefazPag $pag pag
     *
     * @return self
     */
    public function setPag($pag)
    {
        if (is_null($pag)) {
            throw new \InvalidArgumentException('non-nullable pag cannot be null');
        }
        $this->container['pag'] = $pag;

        return $this;
    }

    /**
     * Gets inf_intermed
     *
     * @return \NuvemFiscal\Model\NfeSefazInfIntermed|null
     */
    public function getInfIntermed()
    {
        return $this->container['inf_intermed'];
    }

    /**
     * Sets inf_intermed
     *
     * @param \NuvemFiscal\Model\NfeSefazInfIntermed|null $inf_intermed inf_intermed
     *
     * @return self
     */
    public function setInfIntermed($inf_intermed)
    {
        if (is_null($inf_intermed)) {
            throw new \InvalidArgumentException('non-nullable inf_intermed cannot be null');
        }
        $this->container['inf_intermed'] = $inf_intermed;

        return $this;
    }

    /**
     * Gets inf_adic
     *
     * @return \NuvemFiscal\Model\NfeSefazInfAdic|null
     */
    public function getInfAdic()
    {
        return $this->container['inf_adic'];
    }

    /**
     * Sets inf_adic
     *
     * @param \NuvemFiscal\Model\NfeSefazInfAdic|null $inf_adic inf_adic
     *
     * @return self
     */
    public function setInfAdic($inf_adic)
    {
        if (is_null($inf_adic)) {
            throw new \InvalidArgumentException('non-nullable inf_adic cannot be null');
        }
        $this->container['inf_adic'] = $inf_adic;

        return $this;
    }

    /**
     * Gets exporta
     *
     * @return \NuvemFiscal\Model\NfeSefazExporta|null
     */
    public function getExporta()
    {
        return $this->container['exporta'];
    }

    /**
     * Sets exporta
     *
     * @param \NuvemFiscal\Model\NfeSefazExporta|null $exporta exporta
     *
     * @return self
     */
    public function setExporta($exporta)
    {
        if (is_null($exporta)) {
            throw new \InvalidArgumentException('non-nullable exporta cannot be null');
        }
        $this->container['exporta'] = $exporta;

        return $this;
    }

    /**
     * Gets compra
     *
     * @return \NuvemFiscal\Model\NfeSefazCompra|null
     */
    public function getCompra()
    {
        return $this->container['compra'];
    }

    /**
     * Sets compra
     *
     * @param \NuvemFiscal\Model\NfeSefazCompra|null $compra compra
     *
     * @return self
     */
    public function setCompra($compra)
    {
        if (is_null($compra)) {
            throw new \InvalidArgumentException('non-nullable compra cannot be null');
        }
        $this->container['compra'] = $compra;

        return $this;
    }

    /**
     * Gets cana
     *
     * @return \NuvemFiscal\Model\NfeSefazCana|null
     */
    public function getCana()
    {
        return $this->container['cana'];
    }

    /**
     * Sets cana
     *
     * @param \NuvemFiscal\Model\NfeSefazCana|null $cana cana
     *
     * @return self
     */
    public function setCana($cana)
    {
        if (is_null($cana)) {
            throw new \InvalidArgumentException('non-nullable cana cannot be null');
        }
        $this->container['cana'] = $cana;

        return $this;
    }

    /**
     * Gets inf_resp_tec
     *
     * @return \NuvemFiscal\Model\NfeSefazInfRespTec|null
     */
    public function getInfRespTec()
    {
        return $this->container['inf_resp_tec'];
    }

    /**
     * Sets inf_resp_tec
     *
     * @param \NuvemFiscal\Model\NfeSefazInfRespTec|null $inf_resp_tec inf_resp_tec
     *
     * @return self
     */
    public function setInfRespTec($inf_resp_tec)
    {
        if (is_null($inf_resp_tec)) {
            throw new \InvalidArgumentException('non-nullable inf_resp_tec cannot be null');
        }
        $this->container['inf_resp_tec'] = $inf_resp_tec;

        return $this;
    }

    /**
     * Gets inf_solic_nff
     *
     * @return \NuvemFiscal\Model\NfeSefazInfSolicNFF|null
     */
    public function getInfSolicNff()
    {
        return $this->container['inf_solic_nff'];
    }

    /**
     * Sets inf_solic_nff
     *
     * @param \NuvemFiscal\Model\NfeSefazInfSolicNFF|null $inf_solic_nff inf_solic_nff
     *
     * @return self
     */
    public function setInfSolicNff($inf_solic_nff)
    {
        if (is_null($inf_solic_nff)) {
            throw new \InvalidArgumentException('non-nullable inf_solic_nff cannot be null');
        }
        $this->container['inf_solic_nff'] = $inf_solic_nff;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


