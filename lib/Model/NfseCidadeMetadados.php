<?php
/**
 * NfseCidadeMetadados
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfseCidadeMetadados Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfseCidadeMetadados implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfseCidadeMetadados';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'codigo_ibge' => 'string',
        'uf' => 'string',
        'municipio' => 'string',
        'provedor' => 'string',
        'ambientes' => 'string[]',
        'credenciais' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'codigo_ibge' => null,
        'uf' => null,
        'municipio' => null,
        'provedor' => null,
        'ambientes' => null,
        'credenciais' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'codigo_ibge' => false,
        'uf' => false,
        'municipio' => false,
        'provedor' => false,
        'ambientes' => false,
        'credenciais' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codigo_ibge' => 'codigo_ibge',
        'uf' => 'uf',
        'municipio' => 'municipio',
        'provedor' => 'provedor',
        'ambientes' => 'ambientes',
        'credenciais' => 'credenciais'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codigo_ibge' => 'setCodigoIbge',
        'uf' => 'setUf',
        'municipio' => 'setMunicipio',
        'provedor' => 'setProvedor',
        'ambientes' => 'setAmbientes',
        'credenciais' => 'setCredenciais'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codigo_ibge' => 'getCodigoIbge',
        'uf' => 'getUf',
        'municipio' => 'getMunicipio',
        'provedor' => 'getProvedor',
        'ambientes' => 'getAmbientes',
        'credenciais' => 'getCredenciais'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AMBIENTES_HOMOLOGACAO = 'homologacao';
    public const AMBIENTES_PRODUCAO = 'producao';
    public const CREDENCIAIS_CERTIFICADO = 'certificado';
    public const CREDENCIAIS_LOGIN_SENHA = 'login_senha';
    public const CREDENCIAIS_TOKEN = 'token';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmbientesAllowableValues()
    {
        return [
            self::AMBIENTES_HOMOLOGACAO,
            self::AMBIENTES_PRODUCAO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCredenciaisAllowableValues()
    {
        return [
            self::CREDENCIAIS_CERTIFICADO,
            self::CREDENCIAIS_LOGIN_SENHA,
            self::CREDENCIAIS_TOKEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('codigo_ibge', $data ?? [], null);
        $this->setIfExists('uf', $data ?? [], null);
        $this->setIfExists('municipio', $data ?? [], null);
        $this->setIfExists('provedor', $data ?? [], null);
        $this->setIfExists('ambientes', $data ?? [], null);
        $this->setIfExists('credenciais', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codigo_ibge
     *
     * @return string|null
     */
    public function getCodigoIbge()
    {
        return $this->container['codigo_ibge'];
    }

    /**
     * Sets codigo_ibge
     *
     * @param string|null $codigo_ibge Código IBGE do município.
     *
     * @return self
     */
    public function setCodigoIbge($codigo_ibge)
    {
        if (is_null($codigo_ibge)) {
            throw new \InvalidArgumentException('non-nullable codigo_ibge cannot be null');
        }
        $this->container['codigo_ibge'] = $codigo_ibge;

        return $this;
    }

    /**
     * Gets uf
     *
     * @return string|null
     */
    public function getUf()
    {
        return $this->container['uf'];
    }

    /**
     * Sets uf
     *
     * @param string|null $uf UF do município.
     *
     * @return self
     */
    public function setUf($uf)
    {
        if (is_null($uf)) {
            throw new \InvalidArgumentException('non-nullable uf cannot be null');
        }
        $this->container['uf'] = $uf;

        return $this;
    }

    /**
     * Gets municipio
     *
     * @return string|null
     */
    public function getMunicipio()
    {
        return $this->container['municipio'];
    }

    /**
     * Sets municipio
     *
     * @param string|null $municipio Nome do município.
     *
     * @return self
     */
    public function setMunicipio($municipio)
    {
        if (is_null($municipio)) {
            throw new \InvalidArgumentException('non-nullable municipio cannot be null');
        }
        $this->container['municipio'] = $municipio;

        return $this;
    }

    /**
     * Gets provedor
     *
     * @return string|null
     */
    public function getProvedor()
    {
        return $this->container['provedor'];
    }

    /**
     * Sets provedor
     *
     * @param string|null $provedor Provedor do município.
     *
     * @return self
     */
    public function setProvedor($provedor)
    {
        if (is_null($provedor)) {
            throw new \InvalidArgumentException('non-nullable provedor cannot be null');
        }
        $this->container['provedor'] = $provedor;

        return $this;
    }

    /**
     * Gets ambientes
     *
     * @return string[]|null
     */
    public function getAmbientes()
    {
        return $this->container['ambientes'];
    }

    /**
     * Sets ambientes
     *
     * @param string[]|null $ambientes Ambientes disponíveis no provedor.
     *
     * @return self
     */
    public function setAmbientes($ambientes)
    {
        if (is_null($ambientes)) {
            throw new \InvalidArgumentException('non-nullable ambientes cannot be null');
        }
        $allowedValues = $this->getAmbientesAllowableValues();
        if (array_diff($ambientes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ambientes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ambientes'] = $ambientes;

        return $this;
    }

    /**
     * Gets credenciais
     *
     * @return string[]|null
     */
    public function getCredenciais()
    {
        return $this->container['credenciais'];
    }

    /**
     * Sets credenciais
     *
     * @param string[]|null $credenciais Credenciais requeridas para autenticação no provedor.
     *
     * @return self
     */
    public function setCredenciais($credenciais)
    {
        if (is_null($credenciais)) {
            throw new \InvalidArgumentException('non-nullable credenciais cannot be null');
        }
        $allowedValues = $this->getCredenciaisAllowableValues();
        if (array_diff($credenciais, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'credenciais', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credenciais'] = $credenciais;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


