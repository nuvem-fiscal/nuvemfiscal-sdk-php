<?php
/**
 * DistribuicaoNfe
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * DistribuicaoNfe Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DistribuicaoNfe implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DistribuicaoNfe';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'status' => 'string',
        'ambiente' => 'string',
        'uf_autor' => 'string',
        'tipo_consulta' => 'string',
        'dist_nsu' => 'int',
        'cons_nsu' => 'int',
        'cons_chave' => 'string',
        'codigo_status' => 'int',
        'motivo_status' => 'string',
        'data_hora_resposta' => '\DateTime',
        'ultimo_nsu' => 'int',
        'max_nsu' => 'int',
        'documentos' => '\NuvemFiscal\Model\DistribuicaoNfeDocumento[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'status' => null,
        'ambiente' => null,
        'uf_autor' => null,
        'tipo_consulta' => null,
        'dist_nsu' => 'int64',
        'cons_nsu' => 'int64',
        'cons_chave' => null,
        'codigo_status' => null,
        'motivo_status' => null,
        'data_hora_resposta' => 'date-time',
        'ultimo_nsu' => 'int64',
        'max_nsu' => 'int64',
        'documentos' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_at' => false,
        'status' => false,
        'ambiente' => false,
        'uf_autor' => true,
        'tipo_consulta' => false,
        'dist_nsu' => true,
        'cons_nsu' => true,
        'cons_chave' => true,
        'codigo_status' => true,
        'motivo_status' => true,
        'data_hora_resposta' => true,
        'ultimo_nsu' => true,
        'max_nsu' => true,
        'documentos' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'status' => 'status',
        'ambiente' => 'ambiente',
        'uf_autor' => 'uf_autor',
        'tipo_consulta' => 'tipo_consulta',
        'dist_nsu' => 'dist_nsu',
        'cons_nsu' => 'cons_nsu',
        'cons_chave' => 'cons_chave',
        'codigo_status' => 'codigo_status',
        'motivo_status' => 'motivo_status',
        'data_hora_resposta' => 'data_hora_resposta',
        'ultimo_nsu' => 'ultimo_nsu',
        'max_nsu' => 'max_nsu',
        'documentos' => 'documentos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'status' => 'setStatus',
        'ambiente' => 'setAmbiente',
        'uf_autor' => 'setUfAutor',
        'tipo_consulta' => 'setTipoConsulta',
        'dist_nsu' => 'setDistNsu',
        'cons_nsu' => 'setConsNsu',
        'cons_chave' => 'setConsChave',
        'codigo_status' => 'setCodigoStatus',
        'motivo_status' => 'setMotivoStatus',
        'data_hora_resposta' => 'setDataHoraResposta',
        'ultimo_nsu' => 'setUltimoNsu',
        'max_nsu' => 'setMaxNsu',
        'documentos' => 'setDocumentos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'status' => 'getStatus',
        'ambiente' => 'getAmbiente',
        'uf_autor' => 'getUfAutor',
        'tipo_consulta' => 'getTipoConsulta',
        'dist_nsu' => 'getDistNsu',
        'cons_nsu' => 'getConsNsu',
        'cons_chave' => 'getConsChave',
        'codigo_status' => 'getCodigoStatus',
        'motivo_status' => 'getMotivoStatus',
        'data_hora_resposta' => 'getDataHoraResposta',
        'ultimo_nsu' => 'getUltimoNsu',
        'max_nsu' => 'getMaxNsu',
        'documentos' => 'getDocumentos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_PROCESSANDO = 'processando';
    public const STATUS_CONCLUIDO = 'concluido';
    public const STATUS_ERRO = 'erro';
    public const AMBIENTE_HOMOLOGACAO = 'homologacao';
    public const AMBIENTE_PRODUCAO = 'producao';
    public const TIPO_CONSULTA_DIST_NSU = 'dist-nsu';
    public const TIPO_CONSULTA_CONS_NSU = 'cons-nsu';
    public const TIPO_CONSULTA_CONS_CHAVE = 'cons-chave';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PROCESSANDO,
            self::STATUS_CONCLUIDO,
            self::STATUS_ERRO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmbienteAllowableValues()
    {
        return [
            self::AMBIENTE_HOMOLOGACAO,
            self::AMBIENTE_PRODUCAO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoConsultaAllowableValues()
    {
        return [
            self::TIPO_CONSULTA_DIST_NSU,
            self::TIPO_CONSULTA_CONS_NSU,
            self::TIPO_CONSULTA_CONS_CHAVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('ambiente', $data ?? [], null);
        $this->setIfExists('uf_autor', $data ?? [], null);
        $this->setIfExists('tipo_consulta', $data ?? [], null);
        $this->setIfExists('dist_nsu', $data ?? [], null);
        $this->setIfExists('cons_nsu', $data ?? [], null);
        $this->setIfExists('cons_chave', $data ?? [], null);
        $this->setIfExists('codigo_status', $data ?? [], null);
        $this->setIfExists('motivo_status', $data ?? [], null);
        $this->setIfExists('data_hora_resposta', $data ?? [], null);
        $this->setIfExists('ultimo_nsu', $data ?? [], null);
        $this->setIfExists('max_nsu', $data ?? [], null);
        $this->setIfExists('documentos', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ambiente'] === null) {
            $invalidProperties[] = "'ambiente' can't be null";
        }
        $allowedValues = $this->getAmbienteAllowableValues();
        if (!is_null($this->container['ambiente']) && !in_array($this->container['ambiente'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ambiente', must be one of '%s'",
                $this->container['ambiente'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tipo_consulta'] === null) {
            $invalidProperties[] = "'tipo_consulta' can't be null";
        }
        $allowedValues = $this->getTipoConsultaAllowableValues();
        if (!is_null($this->container['tipo_consulta']) && !in_array($this->container['tipo_consulta'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_consulta', must be one of '%s'",
                $this->container['tipo_consulta'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['codigo_status'] === null) {
            $invalidProperties[] = "'codigo_status' can't be null";
        }
        if ($this->container['data_hora_resposta'] === null) {
            $invalidProperties[] = "'data_hora_resposta' can't be null";
        }
        if ($this->container['ultimo_nsu'] === null) {
            $invalidProperties[] = "'ultimo_nsu' can't be null";
        }
        if ($this->container['max_nsu'] === null) {
            $invalidProperties[] = "'max_nsu' can't be null";
        }
        if (!is_null($this->container['documentos']) && (count($this->container['documentos']) > 50)) {
            $invalidProperties[] = "invalid value for 'documentos', number of items must be less than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID único gerado pela Nuvem Fiscal para o pedido de distribuição.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Data/hora em que o pedido foi criado na Nuvem Fiscal. Representado no formato <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"blank\">`ISO 8601`</a>.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Indica o status da distribuição.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ambiente
     *
     * @return string
     */
    public function getAmbiente()
    {
        return $this->container['ambiente'];
    }

    /**
     * Sets ambiente
     *
     * @param string $ambiente Identificação do Ambiente.
     *
     * @return self
     */
    public function setAmbiente($ambiente)
    {
        if (is_null($ambiente)) {
            throw new \InvalidArgumentException('non-nullable ambiente cannot be null');
        }
        $allowedValues = $this->getAmbienteAllowableValues();
        if (!in_array($ambiente, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ambiente', must be one of '%s'",
                    $ambiente,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ambiente'] = $ambiente;

        return $this;
    }

    /**
     * Gets uf_autor
     *
     * @return string|null
     */
    public function getUfAutor()
    {
        return $this->container['uf_autor'];
    }

    /**
     * Sets uf_autor
     *
     * @param string|null $uf_autor Sigla da UF do autor.
     *
     * @return self
     */
    public function setUfAutor($uf_autor)
    {
        if (is_null($uf_autor)) {
            array_push($this->openAPINullablesSetToNull, 'uf_autor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uf_autor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uf_autor'] = $uf_autor;

        return $this;
    }

    /**
     * Gets tipo_consulta
     *
     * @return string
     */
    public function getTipoConsulta()
    {
        return $this->container['tipo_consulta'];
    }

    /**
     * Sets tipo_consulta
     *
     * @param string $tipo_consulta tipo_consulta
     *
     * @return self
     */
    public function setTipoConsulta($tipo_consulta)
    {
        if (is_null($tipo_consulta)) {
            throw new \InvalidArgumentException('non-nullable tipo_consulta cannot be null');
        }
        $allowedValues = $this->getTipoConsultaAllowableValues();
        if (!in_array($tipo_consulta, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_consulta', must be one of '%s'",
                    $tipo_consulta,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_consulta'] = $tipo_consulta;

        return $this;
    }

    /**
     * Gets dist_nsu
     *
     * @return int|null
     */
    public function getDistNsu()
    {
        return $this->container['dist_nsu'];
    }

    /**
     * Sets dist_nsu
     *
     * @param int|null $dist_nsu Distribuição de conjunto de DF-e a partir do NSU informado.    *Obrigatório quando `tipo_consulta` for `distNSU`.*
     *
     * @return self
     */
    public function setDistNsu($dist_nsu)
    {
        if (is_null($dist_nsu)) {
            array_push($this->openAPINullablesSetToNull, 'dist_nsu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dist_nsu', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dist_nsu'] = $dist_nsu;

        return $this;
    }

    /**
     * Gets cons_nsu
     *
     * @return int|null
     */
    public function getConsNsu()
    {
        return $this->container['cons_nsu'];
    }

    /**
     * Sets cons_nsu
     *
     * @param int|null $cons_nsu Consulta DF-e vinculado ao NSU informado.    *Obrigatório quando `tipo_consulta` for `consNSU`.*
     *
     * @return self
     */
    public function setConsNsu($cons_nsu)
    {
        if (is_null($cons_nsu)) {
            array_push($this->openAPINullablesSetToNull, 'cons_nsu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cons_nsu', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cons_nsu'] = $cons_nsu;

        return $this;
    }

    /**
     * Gets cons_chave
     *
     * @return string|null
     */
    public function getConsChave()
    {
        return $this->container['cons_chave'];
    }

    /**
     * Sets cons_chave
     *
     * @param string|null $cons_chave Consulta de NF-e por chave de acesso informada.    *Obrigatório quando `tipo_consulta` for `consChNFe`.*
     *
     * @return self
     */
    public function setConsChave($cons_chave)
    {
        if (is_null($cons_chave)) {
            array_push($this->openAPINullablesSetToNull, 'cons_chave');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cons_chave', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cons_chave'] = $cons_chave;

        return $this;
    }

    /**
     * Gets codigo_status
     *
     * @return int
     */
    public function getCodigoStatus()
    {
        return $this->container['codigo_status'];
    }

    /**
     * Sets codigo_status
     *
     * @param int $codigo_status Código do status de processamento da requisição.
     *
     * @return self
     */
    public function setCodigoStatus($codigo_status)
    {
        if (is_null($codigo_status)) {
            array_push($this->openAPINullablesSetToNull, 'codigo_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codigo_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codigo_status'] = $codigo_status;

        return $this;
    }

    /**
     * Gets motivo_status
     *
     * @return string|null
     */
    public function getMotivoStatus()
    {
        return $this->container['motivo_status'];
    }

    /**
     * Sets motivo_status
     *
     * @param string|null $motivo_status Descrição do status de processamento da requisição.
     *
     * @return self
     */
    public function setMotivoStatus($motivo_status)
    {
        if (is_null($motivo_status)) {
            array_push($this->openAPINullablesSetToNull, 'motivo_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('motivo_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['motivo_status'] = $motivo_status;

        return $this;
    }

    /**
     * Gets data_hora_resposta
     *
     * @return \DateTime
     */
    public function getDataHoraResposta()
    {
        return $this->container['data_hora_resposta'];
    }

    /**
     * Sets data_hora_resposta
     *
     * @param \DateTime $data_hora_resposta Data e Hora de processamento da requisição.
     *
     * @return self
     */
    public function setDataHoraResposta($data_hora_resposta)
    {
        if (is_null($data_hora_resposta)) {
            array_push($this->openAPINullablesSetToNull, 'data_hora_resposta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_hora_resposta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_hora_resposta'] = $data_hora_resposta;

        return $this;
    }

    /**
     * Gets ultimo_nsu
     *
     * @return int
     */
    public function getUltimoNsu()
    {
        return $this->container['ultimo_nsu'];
    }

    /**
     * Sets ultimo_nsu
     *
     * @param int $ultimo_nsu Último NSU pesquisado no Ambiente Nacional. Se for o caso, o solicitante pode continuar a consulta a partir deste NSU para obter novos resultados.
     *
     * @return self
     */
    public function setUltimoNsu($ultimo_nsu)
    {
        if (is_null($ultimo_nsu)) {
            array_push($this->openAPINullablesSetToNull, 'ultimo_nsu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ultimo_nsu', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ultimo_nsu'] = $ultimo_nsu;

        return $this;
    }

    /**
     * Gets max_nsu
     *
     * @return int
     */
    public function getMaxNsu()
    {
        return $this->container['max_nsu'];
    }

    /**
     * Sets max_nsu
     *
     * @param int $max_nsu Maior NSU existente no Ambiente Nacional para o CNPJ/CPF informado.
     *
     * @return self
     */
    public function setMaxNsu($max_nsu)
    {
        if (is_null($max_nsu)) {
            array_push($this->openAPINullablesSetToNull, 'max_nsu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_nsu', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_nsu'] = $max_nsu;

        return $this;
    }

    /**
     * Gets documentos
     *
     * @return \NuvemFiscal\Model\DistribuicaoNfeDocumento[]|null
     */
    public function getDocumentos()
    {
        return $this->container['documentos'];
    }

    /**
     * Sets documentos
     *
     * @param \NuvemFiscal\Model\DistribuicaoNfeDocumento[]|null $documentos Conjunto de informações resumidas e documentos fiscais eletrônicos de interesse da pessoa ou empresa.
     *
     * @return self
     */
    public function setDocumentos($documentos)
    {
        if (is_null($documentos)) {
            throw new \InvalidArgumentException('non-nullable documentos cannot be null');
        }

        if ((count($documentos) > 50)) {
            throw new \InvalidArgumentException('invalid value for $documentos when calling DistribuicaoNfe., number of items must be less than or equal to 50.');
        }
        $this->container['documentos'] = $documentos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


