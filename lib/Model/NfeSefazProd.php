<?php
/**
 * NfeSefazProd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * NfeSefazProd Class Doc Comment
 *
 * @category Class
 * @description Dados dos produtos e serviços da NF-e.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfeSefazProd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NfeSefazProd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'c_prod' => 'string',
        'c_ean' => 'string',
        'c_barra' => 'string',
        'x_prod' => 'string',
        'ncm' => 'string',
        'nve' => 'string[]',
        'cest' => 'string',
        'ind_escala' => 'string',
        'cnpj_fab' => 'string',
        'c_benef' => 'string',
        'extipi' => 'string',
        'cfop' => 'string',
        'u_com' => 'string',
        'q_com' => 'float',
        'v_un_com' => 'float',
        'v_prod' => 'float',
        'c_ean_trib' => 'string',
        'c_barra_trib' => 'string',
        'u_trib' => 'string',
        'q_trib' => 'float',
        'v_un_trib' => 'float',
        'v_frete' => 'float',
        'v_seg' => 'float',
        'v_desc' => 'float',
        'v_outro' => 'float',
        'ind_tot' => 'int',
        'di' => '\NuvemFiscal\Model\NfeSefazDI[]',
        'det_export' => '\NuvemFiscal\Model\NfeSefazDetExport[]',
        'x_ped' => 'string',
        'n_item_ped' => 'int',
        'n_fci' => 'string',
        'rastro' => '\NuvemFiscal\Model\NfeSefazRastro[]',
        'inf_prod_nff' => '\NuvemFiscal\Model\NfeSefazInfProdNFF',
        'inf_prod_emb' => '\NuvemFiscal\Model\NfeSefazInfProdEmb',
        'veic_prod' => '\NuvemFiscal\Model\NfeSefazVeicProd',
        'med' => '\NuvemFiscal\Model\NfeSefazMed',
        'arma' => '\NuvemFiscal\Model\NfeSefazArma[]',
        'comb' => '\NuvemFiscal\Model\NfeSefazComb',
        'n_recopi' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'c_prod' => null,
        'c_ean' => null,
        'c_barra' => null,
        'x_prod' => null,
        'ncm' => null,
        'nve' => null,
        'cest' => null,
        'ind_escala' => null,
        'cnpj_fab' => null,
        'c_benef' => null,
        'extipi' => null,
        'cfop' => null,
        'u_com' => null,
        'q_com' => null,
        'v_un_com' => null,
        'v_prod' => null,
        'c_ean_trib' => null,
        'c_barra_trib' => null,
        'u_trib' => null,
        'q_trib' => null,
        'v_un_trib' => null,
        'v_frete' => null,
        'v_seg' => null,
        'v_desc' => null,
        'v_outro' => null,
        'ind_tot' => null,
        'di' => null,
        'det_export' => null,
        'x_ped' => null,
        'n_item_ped' => null,
        'n_fci' => null,
        'rastro' => null,
        'inf_prod_nff' => null,
        'inf_prod_emb' => null,
        'veic_prod' => null,
        'med' => null,
        'arma' => null,
        'comb' => null,
        'n_recopi' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'c_prod' => true,
		'c_ean' => true,
		'c_barra' => true,
		'x_prod' => true,
		'ncm' => true,
		'nve' => false,
		'cest' => true,
		'ind_escala' => true,
		'cnpj_fab' => true,
		'c_benef' => true,
		'extipi' => true,
		'cfop' => true,
		'u_com' => true,
		'q_com' => true,
		'v_un_com' => true,
		'v_prod' => true,
		'c_ean_trib' => true,
		'c_barra_trib' => true,
		'u_trib' => true,
		'q_trib' => true,
		'v_un_trib' => true,
		'v_frete' => true,
		'v_seg' => true,
		'v_desc' => true,
		'v_outro' => true,
		'ind_tot' => true,
		'di' => false,
		'det_export' => false,
		'x_ped' => true,
		'n_item_ped' => true,
		'n_fci' => true,
		'rastro' => false,
		'inf_prod_nff' => false,
		'inf_prod_emb' => false,
		'veic_prod' => false,
		'med' => false,
		'arma' => false,
		'comb' => false,
		'n_recopi' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_prod' => 'cProd',
        'c_ean' => 'cEAN',
        'c_barra' => 'cBarra',
        'x_prod' => 'xProd',
        'ncm' => 'NCM',
        'nve' => 'NVE',
        'cest' => 'CEST',
        'ind_escala' => 'indEscala',
        'cnpj_fab' => 'CNPJFab',
        'c_benef' => 'cBenef',
        'extipi' => 'EXTIPI',
        'cfop' => 'CFOP',
        'u_com' => 'uCom',
        'q_com' => 'qCom',
        'v_un_com' => 'vUnCom',
        'v_prod' => 'vProd',
        'c_ean_trib' => 'cEANTrib',
        'c_barra_trib' => 'cBarraTrib',
        'u_trib' => 'uTrib',
        'q_trib' => 'qTrib',
        'v_un_trib' => 'vUnTrib',
        'v_frete' => 'vFrete',
        'v_seg' => 'vSeg',
        'v_desc' => 'vDesc',
        'v_outro' => 'vOutro',
        'ind_tot' => 'indTot',
        'di' => 'DI',
        'det_export' => 'detExport',
        'x_ped' => 'xPed',
        'n_item_ped' => 'nItemPed',
        'n_fci' => 'nFCI',
        'rastro' => 'rastro',
        'inf_prod_nff' => 'infProdNFF',
        'inf_prod_emb' => 'infProdEmb',
        'veic_prod' => 'veicProd',
        'med' => 'med',
        'arma' => 'arma',
        'comb' => 'comb',
        'n_recopi' => 'nRECOPI'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_prod' => 'setCProd',
        'c_ean' => 'setCEan',
        'c_barra' => 'setCBarra',
        'x_prod' => 'setXProd',
        'ncm' => 'setNcm',
        'nve' => 'setNve',
        'cest' => 'setCest',
        'ind_escala' => 'setIndEscala',
        'cnpj_fab' => 'setCnpjFab',
        'c_benef' => 'setCBenef',
        'extipi' => 'setExtipi',
        'cfop' => 'setCfop',
        'u_com' => 'setUCom',
        'q_com' => 'setQCom',
        'v_un_com' => 'setVUnCom',
        'v_prod' => 'setVProd',
        'c_ean_trib' => 'setCEanTrib',
        'c_barra_trib' => 'setCBarraTrib',
        'u_trib' => 'setUTrib',
        'q_trib' => 'setQTrib',
        'v_un_trib' => 'setVUnTrib',
        'v_frete' => 'setVFrete',
        'v_seg' => 'setVSeg',
        'v_desc' => 'setVDesc',
        'v_outro' => 'setVOutro',
        'ind_tot' => 'setIndTot',
        'di' => 'setDi',
        'det_export' => 'setDetExport',
        'x_ped' => 'setXPed',
        'n_item_ped' => 'setNItemPed',
        'n_fci' => 'setNFci',
        'rastro' => 'setRastro',
        'inf_prod_nff' => 'setInfProdNff',
        'inf_prod_emb' => 'setInfProdEmb',
        'veic_prod' => 'setVeicProd',
        'med' => 'setMed',
        'arma' => 'setArma',
        'comb' => 'setComb',
        'n_recopi' => 'setNRecopi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_prod' => 'getCProd',
        'c_ean' => 'getCEan',
        'c_barra' => 'getCBarra',
        'x_prod' => 'getXProd',
        'ncm' => 'getNcm',
        'nve' => 'getNve',
        'cest' => 'getCest',
        'ind_escala' => 'getIndEscala',
        'cnpj_fab' => 'getCnpjFab',
        'c_benef' => 'getCBenef',
        'extipi' => 'getExtipi',
        'cfop' => 'getCfop',
        'u_com' => 'getUCom',
        'q_com' => 'getQCom',
        'v_un_com' => 'getVUnCom',
        'v_prod' => 'getVProd',
        'c_ean_trib' => 'getCEanTrib',
        'c_barra_trib' => 'getCBarraTrib',
        'u_trib' => 'getUTrib',
        'q_trib' => 'getQTrib',
        'v_un_trib' => 'getVUnTrib',
        'v_frete' => 'getVFrete',
        'v_seg' => 'getVSeg',
        'v_desc' => 'getVDesc',
        'v_outro' => 'getVOutro',
        'ind_tot' => 'getIndTot',
        'di' => 'getDi',
        'det_export' => 'getDetExport',
        'x_ped' => 'getXPed',
        'n_item_ped' => 'getNItemPed',
        'n_fci' => 'getNFci',
        'rastro' => 'getRastro',
        'inf_prod_nff' => 'getInfProdNff',
        'inf_prod_emb' => 'getInfProdEmb',
        'veic_prod' => 'getVeicProd',
        'med' => 'getMed',
        'arma' => 'getArma',
        'comb' => 'getComb',
        'n_recopi' => 'getNRecopi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('c_prod', $data ?? [], null);
        $this->setIfExists('c_ean', $data ?? [], null);
        $this->setIfExists('c_barra', $data ?? [], null);
        $this->setIfExists('x_prod', $data ?? [], null);
        $this->setIfExists('ncm', $data ?? [], null);
        $this->setIfExists('nve', $data ?? [], null);
        $this->setIfExists('cest', $data ?? [], null);
        $this->setIfExists('ind_escala', $data ?? [], null);
        $this->setIfExists('cnpj_fab', $data ?? [], null);
        $this->setIfExists('c_benef', $data ?? [], null);
        $this->setIfExists('extipi', $data ?? [], null);
        $this->setIfExists('cfop', $data ?? [], null);
        $this->setIfExists('u_com', $data ?? [], null);
        $this->setIfExists('q_com', $data ?? [], null);
        $this->setIfExists('v_un_com', $data ?? [], null);
        $this->setIfExists('v_prod', $data ?? [], null);
        $this->setIfExists('c_ean_trib', $data ?? [], null);
        $this->setIfExists('c_barra_trib', $data ?? [], null);
        $this->setIfExists('u_trib', $data ?? [], null);
        $this->setIfExists('q_trib', $data ?? [], null);
        $this->setIfExists('v_un_trib', $data ?? [], null);
        $this->setIfExists('v_frete', $data ?? [], null);
        $this->setIfExists('v_seg', $data ?? [], null);
        $this->setIfExists('v_desc', $data ?? [], null);
        $this->setIfExists('v_outro', $data ?? [], null);
        $this->setIfExists('ind_tot', $data ?? [], null);
        $this->setIfExists('di', $data ?? [], null);
        $this->setIfExists('det_export', $data ?? [], null);
        $this->setIfExists('x_ped', $data ?? [], null);
        $this->setIfExists('n_item_ped', $data ?? [], null);
        $this->setIfExists('n_fci', $data ?? [], null);
        $this->setIfExists('rastro', $data ?? [], null);
        $this->setIfExists('inf_prod_nff', $data ?? [], null);
        $this->setIfExists('inf_prod_emb', $data ?? [], null);
        $this->setIfExists('veic_prod', $data ?? [], null);
        $this->setIfExists('med', $data ?? [], null);
        $this->setIfExists('arma', $data ?? [], null);
        $this->setIfExists('comb', $data ?? [], null);
        $this->setIfExists('n_recopi', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['c_prod'] === null) {
            $invalidProperties[] = "'c_prod' can't be null";
        }
        if ((mb_strlen($this->container['c_prod']) > 60)) {
            $invalidProperties[] = "invalid value for 'c_prod', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['c_prod']) < 1)) {
            $invalidProperties[] = "invalid value for 'c_prod', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['c_ean'] === null) {
            $invalidProperties[] = "'c_ean' can't be null";
        }
        if (!is_null($this->container['c_barra']) && (mb_strlen($this->container['c_barra']) > 30)) {
            $invalidProperties[] = "invalid value for 'c_barra', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['c_barra']) && (mb_strlen($this->container['c_barra']) < 3)) {
            $invalidProperties[] = "invalid value for 'c_barra', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['x_prod'] === null) {
            $invalidProperties[] = "'x_prod' can't be null";
        }
        if ((mb_strlen($this->container['x_prod']) > 120)) {
            $invalidProperties[] = "invalid value for 'x_prod', the character length must be smaller than or equal to 120.";
        }

        if ((mb_strlen($this->container['x_prod']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_prod', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ncm'] === null) {
            $invalidProperties[] = "'ncm' can't be null";
        }
        if (!is_null($this->container['cnpj_fab']) && (mb_strlen($this->container['cnpj_fab']) > 14)) {
            $invalidProperties[] = "invalid value for 'cnpj_fab', the character length must be smaller than or equal to 14.";
        }

        if ($this->container['cfop'] === null) {
            $invalidProperties[] = "'cfop' can't be null";
        }
        if ($this->container['u_com'] === null) {
            $invalidProperties[] = "'u_com' can't be null";
        }
        if ((mb_strlen($this->container['u_com']) > 6)) {
            $invalidProperties[] = "invalid value for 'u_com', the character length must be smaller than or equal to 6.";
        }

        if ((mb_strlen($this->container['u_com']) < 1)) {
            $invalidProperties[] = "invalid value for 'u_com', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['q_com'] === null) {
            $invalidProperties[] = "'q_com' can't be null";
        }
        if ($this->container['v_un_com'] === null) {
            $invalidProperties[] = "'v_un_com' can't be null";
        }
        if ($this->container['v_prod'] === null) {
            $invalidProperties[] = "'v_prod' can't be null";
        }
        if ($this->container['c_ean_trib'] === null) {
            $invalidProperties[] = "'c_ean_trib' can't be null";
        }
        if (!is_null($this->container['c_barra_trib']) && (mb_strlen($this->container['c_barra_trib']) > 30)) {
            $invalidProperties[] = "invalid value for 'c_barra_trib', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['c_barra_trib']) && (mb_strlen($this->container['c_barra_trib']) < 3)) {
            $invalidProperties[] = "invalid value for 'c_barra_trib', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['u_trib'] === null) {
            $invalidProperties[] = "'u_trib' can't be null";
        }
        if ((mb_strlen($this->container['u_trib']) > 6)) {
            $invalidProperties[] = "invalid value for 'u_trib', the character length must be smaller than or equal to 6.";
        }

        if ((mb_strlen($this->container['u_trib']) < 1)) {
            $invalidProperties[] = "invalid value for 'u_trib', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['q_trib'] === null) {
            $invalidProperties[] = "'q_trib' can't be null";
        }
        if ($this->container['v_un_trib'] === null) {
            $invalidProperties[] = "'v_un_trib' can't be null";
        }
        if ($this->container['ind_tot'] === null) {
            $invalidProperties[] = "'ind_tot' can't be null";
        }
        if (!is_null($this->container['x_ped']) && (mb_strlen($this->container['x_ped']) > 15)) {
            $invalidProperties[] = "invalid value for 'x_ped', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['x_ped']) && (mb_strlen($this->container['x_ped']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_ped', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['n_item_ped']) && ($this->container['n_item_ped'] > 999999)) {
            $invalidProperties[] = "invalid value for 'n_item_ped', must be smaller than or equal to 999999.";
        }

        if (!is_null($this->container['n_item_ped']) && ($this->container['n_item_ped'] < 0)) {
            $invalidProperties[] = "invalid value for 'n_item_ped', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['n_recopi']) && (mb_strlen($this->container['n_recopi']) > 20)) {
            $invalidProperties[] = "invalid value for 'n_recopi', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_prod
     *
     * @return string
     */
    public function getCProd()
    {
        return $this->container['c_prod'];
    }

    /**
     * Sets c_prod
     *
     * @param string $c_prod Código do produto ou serviço. Preencher com CFOP caso se trate de itens não relacionados com mercadorias/produto e que o contribuinte não possua codificação própria  Formato ”CFOP9999”.
     *
     * @return self
     */
    public function setCProd($c_prod)
    {
        if (is_null($c_prod)) {
            array_push($this->openAPINullablesSetToNull, 'c_prod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_prod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($c_prod) && (mb_strlen($c_prod) > 60)) {
            throw new \InvalidArgumentException('invalid length for $c_prod when calling NfeSefazProd., must be smaller than or equal to 60.');
        }
        if (!is_null($c_prod) && (mb_strlen($c_prod) < 1)) {
            throw new \InvalidArgumentException('invalid length for $c_prod when calling NfeSefazProd., must be bigger than or equal to 1.');
        }

        $this->container['c_prod'] = $c_prod;

        return $this;
    }

    /**
     * Gets c_ean
     *
     * @return string
     */
    public function getCEan()
    {
        return $this->container['c_ean'];
    }

    /**
     * Sets c_ean
     *
     * @param string $c_ean GTIN (Global Trade Item Number) do produto, antigo código EAN ou código de barras.
     *
     * @return self
     */
    public function setCEan($c_ean)
    {
        if (is_null($c_ean)) {
            array_push($this->openAPINullablesSetToNull, 'c_ean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_ean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_ean'] = $c_ean;

        return $this;
    }

    /**
     * Gets c_barra
     *
     * @return string|null
     */
    public function getCBarra()
    {
        return $this->container['c_barra'];
    }

    /**
     * Sets c_barra
     *
     * @param string|null $c_barra Codigo de barras diferente do padrão GTIN.
     *
     * @return self
     */
    public function setCBarra($c_barra)
    {
        if (is_null($c_barra)) {
            array_push($this->openAPINullablesSetToNull, 'c_barra');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_barra', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($c_barra) && (mb_strlen($c_barra) > 30)) {
            throw new \InvalidArgumentException('invalid length for $c_barra when calling NfeSefazProd., must be smaller than or equal to 30.');
        }
        if (!is_null($c_barra) && (mb_strlen($c_barra) < 3)) {
            throw new \InvalidArgumentException('invalid length for $c_barra when calling NfeSefazProd., must be bigger than or equal to 3.');
        }

        $this->container['c_barra'] = $c_barra;

        return $this;
    }

    /**
     * Gets x_prod
     *
     * @return string
     */
    public function getXProd()
    {
        return $this->container['x_prod'];
    }

    /**
     * Sets x_prod
     *
     * @param string $x_prod Descrição do produto ou serviço.
     *
     * @return self
     */
    public function setXProd($x_prod)
    {
        if (is_null($x_prod)) {
            array_push($this->openAPINullablesSetToNull, 'x_prod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_prod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_prod) && (mb_strlen($x_prod) > 120)) {
            throw new \InvalidArgumentException('invalid length for $x_prod when calling NfeSefazProd., must be smaller than or equal to 120.');
        }
        if (!is_null($x_prod) && (mb_strlen($x_prod) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_prod when calling NfeSefazProd., must be bigger than or equal to 1.');
        }

        $this->container['x_prod'] = $x_prod;

        return $this;
    }

    /**
     * Gets ncm
     *
     * @return string
     */
    public function getNcm()
    {
        return $this->container['ncm'];
    }

    /**
     * Sets ncm
     *
     * @param string $ncm Código NCM (8 posições), será permitida a informação do gênero (posição do capítulo do NCM) quando a operação não for de comércio exterior (importação/exportação) ou o produto não seja tributado pelo IPI. Em caso de item de serviço ou item que não tenham produto (Ex. transferência de crédito, crédito do ativo imobilizado, etc.), informar o código 00 (zeros) (v2.0).
     *
     * @return self
     */
    public function setNcm($ncm)
    {
        if (is_null($ncm)) {
            array_push($this->openAPINullablesSetToNull, 'ncm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ncm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ncm'] = $ncm;

        return $this;
    }

    /**
     * Gets nve
     *
     * @return string[]|null
     */
    public function getNve()
    {
        return $this->container['nve'];
    }

    /**
     * Sets nve
     *
     * @param string[]|null $nve Nomenclatura de Valor aduaneio e Estatístico.
     *
     * @return self
     */
    public function setNve($nve)
    {
        if (is_null($nve)) {
            throw new \InvalidArgumentException('non-nullable nve cannot be null');
        }
        $this->container['nve'] = $nve;

        return $this;
    }

    /**
     * Gets cest
     *
     * @return string|null
     */
    public function getCest()
    {
        return $this->container['cest'];
    }

    /**
     * Sets cest
     *
     * @param string|null $cest Codigo especificador da Substuicao Tributaria - CEST, que identifica a mercadoria sujeita aos regimes de  substituicao tributária e de antecipação do recolhimento  do imposto.
     *
     * @return self
     */
    public function setCest($cest)
    {
        if (is_null($cest)) {
            array_push($this->openAPINullablesSetToNull, 'cest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cest'] = $cest;

        return $this;
    }

    /**
     * Gets ind_escala
     *
     * @return string|null
     */
    public function getIndEscala()
    {
        return $this->container['ind_escala'];
    }

    /**
     * Sets ind_escala
     *
     * @param string|null $ind_escala ind_escala
     *
     * @return self
     */
    public function setIndEscala($ind_escala)
    {
        if (is_null($ind_escala)) {
            array_push($this->openAPINullablesSetToNull, 'ind_escala');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_escala', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_escala'] = $ind_escala;

        return $this;
    }

    /**
     * Gets cnpj_fab
     *
     * @return string|null
     */
    public function getCnpjFab()
    {
        return $this->container['cnpj_fab'];
    }

    /**
     * Sets cnpj_fab
     *
     * @param string|null $cnpj_fab CNPJ do Fabricante da Mercadoria, obrigatório para produto em escala NÃO relevante.
     *
     * @return self
     */
    public function setCnpjFab($cnpj_fab)
    {
        if (is_null($cnpj_fab)) {
            array_push($this->openAPINullablesSetToNull, 'cnpj_fab');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnpj_fab', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cnpj_fab) && (mb_strlen($cnpj_fab) > 14)) {
            throw new \InvalidArgumentException('invalid length for $cnpj_fab when calling NfeSefazProd., must be smaller than or equal to 14.');
        }

        $this->container['cnpj_fab'] = $cnpj_fab;

        return $this;
    }

    /**
     * Gets c_benef
     *
     * @return string|null
     */
    public function getCBenef()
    {
        return $this->container['c_benef'];
    }

    /**
     * Sets c_benef
     *
     * @param string|null $c_benef c_benef
     *
     * @return self
     */
    public function setCBenef($c_benef)
    {
        if (is_null($c_benef)) {
            array_push($this->openAPINullablesSetToNull, 'c_benef');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_benef', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_benef'] = $c_benef;

        return $this;
    }

    /**
     * Gets extipi
     *
     * @return string|null
     */
    public function getExtipi()
    {
        return $this->container['extipi'];
    }

    /**
     * Sets extipi
     *
     * @param string|null $extipi Código EX TIPI (3 posições).
     *
     * @return self
     */
    public function setExtipi($extipi)
    {
        if (is_null($extipi)) {
            array_push($this->openAPINullablesSetToNull, 'extipi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extipi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extipi'] = $extipi;

        return $this;
    }

    /**
     * Gets cfop
     *
     * @return string
     */
    public function getCfop()
    {
        return $this->container['cfop'];
    }

    /**
     * Sets cfop
     *
     * @param string $cfop Cfop.
     *
     * @return self
     */
    public function setCfop($cfop)
    {
        if (is_null($cfop)) {
            array_push($this->openAPINullablesSetToNull, 'cfop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfop'] = $cfop;

        return $this;
    }

    /**
     * Gets u_com
     *
     * @return string
     */
    public function getUCom()
    {
        return $this->container['u_com'];
    }

    /**
     * Sets u_com
     *
     * @param string $u_com Unidade comercial.
     *
     * @return self
     */
    public function setUCom($u_com)
    {
        if (is_null($u_com)) {
            array_push($this->openAPINullablesSetToNull, 'u_com');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_com', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($u_com) && (mb_strlen($u_com) > 6)) {
            throw new \InvalidArgumentException('invalid length for $u_com when calling NfeSefazProd., must be smaller than or equal to 6.');
        }
        if (!is_null($u_com) && (mb_strlen($u_com) < 1)) {
            throw new \InvalidArgumentException('invalid length for $u_com when calling NfeSefazProd., must be bigger than or equal to 1.');
        }

        $this->container['u_com'] = $u_com;

        return $this;
    }

    /**
     * Gets q_com
     *
     * @return float
     */
    public function getQCom()
    {
        return $this->container['q_com'];
    }

    /**
     * Sets q_com
     *
     * @param float $q_com Quantidade Comercial  do produto, alterado para aceitar de 0 a 4 casas decimais e 11 inteiros.
     *
     * @return self
     */
    public function setQCom($q_com)
    {
        if (is_null($q_com)) {
            array_push($this->openAPINullablesSetToNull, 'q_com');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q_com', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['q_com'] = $q_com;

        return $this;
    }

    /**
     * Gets v_un_com
     *
     * @return float
     */
    public function getVUnCom()
    {
        return $this->container['v_un_com'];
    }

    /**
     * Sets v_un_com
     *
     * @param float $v_un_com Valor unitário de comercialização  - alterado para aceitar 0 a 10 casas decimais e 11 inteiros.
     *
     * @return self
     */
    public function setVUnCom($v_un_com)
    {
        if (is_null($v_un_com)) {
            array_push($this->openAPINullablesSetToNull, 'v_un_com');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_un_com', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_un_com'] = $v_un_com;

        return $this;
    }

    /**
     * Gets v_prod
     *
     * @return float
     */
    public function getVProd()
    {
        return $this->container['v_prod'];
    }

    /**
     * Sets v_prod
     *
     * @param float $v_prod Valor bruto do produto ou serviço.
     *
     * @return self
     */
    public function setVProd($v_prod)
    {
        if (is_null($v_prod)) {
            array_push($this->openAPINullablesSetToNull, 'v_prod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_prod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_prod'] = $v_prod;

        return $this;
    }

    /**
     * Gets c_ean_trib
     *
     * @return string
     */
    public function getCEanTrib()
    {
        return $this->container['c_ean_trib'];
    }

    /**
     * Sets c_ean_trib
     *
     * @param string $c_ean_trib GTIN (Global Trade Item Number) da unidade tributável, antigo código EAN ou código de barras.
     *
     * @return self
     */
    public function setCEanTrib($c_ean_trib)
    {
        if (is_null($c_ean_trib)) {
            array_push($this->openAPINullablesSetToNull, 'c_ean_trib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_ean_trib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['c_ean_trib'] = $c_ean_trib;

        return $this;
    }

    /**
     * Gets c_barra_trib
     *
     * @return string|null
     */
    public function getCBarraTrib()
    {
        return $this->container['c_barra_trib'];
    }

    /**
     * Sets c_barra_trib
     *
     * @param string|null $c_barra_trib Código de barras da unidade tributável diferente do padrão GTIN.
     *
     * @return self
     */
    public function setCBarraTrib($c_barra_trib)
    {
        if (is_null($c_barra_trib)) {
            array_push($this->openAPINullablesSetToNull, 'c_barra_trib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('c_barra_trib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($c_barra_trib) && (mb_strlen($c_barra_trib) > 30)) {
            throw new \InvalidArgumentException('invalid length for $c_barra_trib when calling NfeSefazProd., must be smaller than or equal to 30.');
        }
        if (!is_null($c_barra_trib) && (mb_strlen($c_barra_trib) < 3)) {
            throw new \InvalidArgumentException('invalid length for $c_barra_trib when calling NfeSefazProd., must be bigger than or equal to 3.');
        }

        $this->container['c_barra_trib'] = $c_barra_trib;

        return $this;
    }

    /**
     * Gets u_trib
     *
     * @return string
     */
    public function getUTrib()
    {
        return $this->container['u_trib'];
    }

    /**
     * Sets u_trib
     *
     * @param string $u_trib Unidade Tributável.
     *
     * @return self
     */
    public function setUTrib($u_trib)
    {
        if (is_null($u_trib)) {
            array_push($this->openAPINullablesSetToNull, 'u_trib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_trib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($u_trib) && (mb_strlen($u_trib) > 6)) {
            throw new \InvalidArgumentException('invalid length for $u_trib when calling NfeSefazProd., must be smaller than or equal to 6.');
        }
        if (!is_null($u_trib) && (mb_strlen($u_trib) < 1)) {
            throw new \InvalidArgumentException('invalid length for $u_trib when calling NfeSefazProd., must be bigger than or equal to 1.');
        }

        $this->container['u_trib'] = $u_trib;

        return $this;
    }

    /**
     * Gets q_trib
     *
     * @return float
     */
    public function getQTrib()
    {
        return $this->container['q_trib'];
    }

    /**
     * Sets q_trib
     *
     * @param float $q_trib Quantidade Tributável - alterado para aceitar de 0 a 4 casas decimais e 11 inteiros.
     *
     * @return self
     */
    public function setQTrib($q_trib)
    {
        if (is_null($q_trib)) {
            array_push($this->openAPINullablesSetToNull, 'q_trib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('q_trib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['q_trib'] = $q_trib;

        return $this;
    }

    /**
     * Gets v_un_trib
     *
     * @return float
     */
    public function getVUnTrib()
    {
        return $this->container['v_un_trib'];
    }

    /**
     * Sets v_un_trib
     *
     * @param float $v_un_trib Valor unitário de tributação - - alterado para aceitar 0 a 10 casas decimais e 11 inteiros.
     *
     * @return self
     */
    public function setVUnTrib($v_un_trib)
    {
        if (is_null($v_un_trib)) {
            array_push($this->openAPINullablesSetToNull, 'v_un_trib');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_un_trib', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_un_trib'] = $v_un_trib;

        return $this;
    }

    /**
     * Gets v_frete
     *
     * @return float|null
     */
    public function getVFrete()
    {
        return $this->container['v_frete'];
    }

    /**
     * Sets v_frete
     *
     * @param float|null $v_frete Valor Total do Frete.
     *
     * @return self
     */
    public function setVFrete($v_frete)
    {
        if (is_null($v_frete)) {
            array_push($this->openAPINullablesSetToNull, 'v_frete');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_frete', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_frete'] = $v_frete;

        return $this;
    }

    /**
     * Gets v_seg
     *
     * @return float|null
     */
    public function getVSeg()
    {
        return $this->container['v_seg'];
    }

    /**
     * Sets v_seg
     *
     * @param float|null $v_seg Valor Total do Seguro.
     *
     * @return self
     */
    public function setVSeg($v_seg)
    {
        if (is_null($v_seg)) {
            array_push($this->openAPINullablesSetToNull, 'v_seg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_seg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_seg'] = $v_seg;

        return $this;
    }

    /**
     * Gets v_desc
     *
     * @return float|null
     */
    public function getVDesc()
    {
        return $this->container['v_desc'];
    }

    /**
     * Sets v_desc
     *
     * @param float|null $v_desc Valor do Desconto.
     *
     * @return self
     */
    public function setVDesc($v_desc)
    {
        if (is_null($v_desc)) {
            array_push($this->openAPINullablesSetToNull, 'v_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_desc'] = $v_desc;

        return $this;
    }

    /**
     * Gets v_outro
     *
     * @return float|null
     */
    public function getVOutro()
    {
        return $this->container['v_outro'];
    }

    /**
     * Sets v_outro
     *
     * @param float|null $v_outro Outras despesas acessórias.
     *
     * @return self
     */
    public function setVOutro($v_outro)
    {
        if (is_null($v_outro)) {
            array_push($this->openAPINullablesSetToNull, 'v_outro');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_outro', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_outro'] = $v_outro;

        return $this;
    }

    /**
     * Gets ind_tot
     *
     * @return int
     */
    public function getIndTot()
    {
        return $this->container['ind_tot'];
    }

    /**
     * Sets ind_tot
     *
     * @param int $ind_tot Este campo deverá ser preenchido com:  * 0 - o valor do item (vProd) não compõe o valor total da NF-e (vProd)  * 1 - o valor do item (vProd) compõe o valor total da NF-e (vProd)
     *
     * @return self
     */
    public function setIndTot($ind_tot)
    {
        if (is_null($ind_tot)) {
            array_push($this->openAPINullablesSetToNull, 'ind_tot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ind_tot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ind_tot'] = $ind_tot;

        return $this;
    }

    /**
     * Gets di
     *
     * @return \NuvemFiscal\Model\NfeSefazDI[]|null
     */
    public function getDi()
    {
        return $this->container['di'];
    }

    /**
     * Sets di
     *
     * @param \NuvemFiscal\Model\NfeSefazDI[]|null $di di
     *
     * @return self
     */
    public function setDi($di)
    {
        if (is_null($di)) {
            throw new \InvalidArgumentException('non-nullable di cannot be null');
        }
        $this->container['di'] = $di;

        return $this;
    }

    /**
     * Gets det_export
     *
     * @return \NuvemFiscal\Model\NfeSefazDetExport[]|null
     */
    public function getDetExport()
    {
        return $this->container['det_export'];
    }

    /**
     * Sets det_export
     *
     * @param \NuvemFiscal\Model\NfeSefazDetExport[]|null $det_export det_export
     *
     * @return self
     */
    public function setDetExport($det_export)
    {
        if (is_null($det_export)) {
            throw new \InvalidArgumentException('non-nullable det_export cannot be null');
        }
        $this->container['det_export'] = $det_export;

        return $this;
    }

    /**
     * Gets x_ped
     *
     * @return string|null
     */
    public function getXPed()
    {
        return $this->container['x_ped'];
    }

    /**
     * Sets x_ped
     *
     * @param string|null $x_ped pedido de compra - Informação de interesse do emissor para controle do B2B.
     *
     * @return self
     */
    public function setXPed($x_ped)
    {
        if (is_null($x_ped)) {
            array_push($this->openAPINullablesSetToNull, 'x_ped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('x_ped', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($x_ped) && (mb_strlen($x_ped) > 15)) {
            throw new \InvalidArgumentException('invalid length for $x_ped when calling NfeSefazProd., must be smaller than or equal to 15.');
        }
        if (!is_null($x_ped) && (mb_strlen($x_ped) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_ped when calling NfeSefazProd., must be bigger than or equal to 1.');
        }

        $this->container['x_ped'] = $x_ped;

        return $this;
    }

    /**
     * Gets n_item_ped
     *
     * @return int|null
     */
    public function getNItemPed()
    {
        return $this->container['n_item_ped'];
    }

    /**
     * Sets n_item_ped
     *
     * @param int|null $n_item_ped Número do Item do Pedido de Compra - Identificação do número do item do pedido de Compra.
     *
     * @return self
     */
    public function setNItemPed($n_item_ped)
    {
        if (is_null($n_item_ped)) {
            array_push($this->openAPINullablesSetToNull, 'n_item_ped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_item_ped', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($n_item_ped) && ($n_item_ped > 999999)) {
            throw new \InvalidArgumentException('invalid value for $n_item_ped when calling NfeSefazProd., must be smaller than or equal to 999999.');
        }
        if (!is_null($n_item_ped) && ($n_item_ped < 0)) {
            throw new \InvalidArgumentException('invalid value for $n_item_ped when calling NfeSefazProd., must be bigger than or equal to 0.');
        }

        $this->container['n_item_ped'] = $n_item_ped;

        return $this;
    }

    /**
     * Gets n_fci
     *
     * @return string|null
     */
    public function getNFci()
    {
        return $this->container['n_fci'];
    }

    /**
     * Sets n_fci
     *
     * @param string|null $n_fci Número de controle da FCI - Ficha de Conteúdo de Importação.
     *
     * @return self
     */
    public function setNFci($n_fci)
    {
        if (is_null($n_fci)) {
            array_push($this->openAPINullablesSetToNull, 'n_fci');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_fci', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['n_fci'] = $n_fci;

        return $this;
    }

    /**
     * Gets rastro
     *
     * @return \NuvemFiscal\Model\NfeSefazRastro[]|null
     */
    public function getRastro()
    {
        return $this->container['rastro'];
    }

    /**
     * Sets rastro
     *
     * @param \NuvemFiscal\Model\NfeSefazRastro[]|null $rastro rastro
     *
     * @return self
     */
    public function setRastro($rastro)
    {
        if (is_null($rastro)) {
            throw new \InvalidArgumentException('non-nullable rastro cannot be null');
        }
        $this->container['rastro'] = $rastro;

        return $this;
    }

    /**
     * Gets inf_prod_nff
     *
     * @return \NuvemFiscal\Model\NfeSefazInfProdNFF|null
     */
    public function getInfProdNff()
    {
        return $this->container['inf_prod_nff'];
    }

    /**
     * Sets inf_prod_nff
     *
     * @param \NuvemFiscal\Model\NfeSefazInfProdNFF|null $inf_prod_nff inf_prod_nff
     *
     * @return self
     */
    public function setInfProdNff($inf_prod_nff)
    {
        if (is_null($inf_prod_nff)) {
            throw new \InvalidArgumentException('non-nullable inf_prod_nff cannot be null');
        }
        $this->container['inf_prod_nff'] = $inf_prod_nff;

        return $this;
    }

    /**
     * Gets inf_prod_emb
     *
     * @return \NuvemFiscal\Model\NfeSefazInfProdEmb|null
     */
    public function getInfProdEmb()
    {
        return $this->container['inf_prod_emb'];
    }

    /**
     * Sets inf_prod_emb
     *
     * @param \NuvemFiscal\Model\NfeSefazInfProdEmb|null $inf_prod_emb inf_prod_emb
     *
     * @return self
     */
    public function setInfProdEmb($inf_prod_emb)
    {
        if (is_null($inf_prod_emb)) {
            throw new \InvalidArgumentException('non-nullable inf_prod_emb cannot be null');
        }
        $this->container['inf_prod_emb'] = $inf_prod_emb;

        return $this;
    }

    /**
     * Gets veic_prod
     *
     * @return \NuvemFiscal\Model\NfeSefazVeicProd|null
     */
    public function getVeicProd()
    {
        return $this->container['veic_prod'];
    }

    /**
     * Sets veic_prod
     *
     * @param \NuvemFiscal\Model\NfeSefazVeicProd|null $veic_prod veic_prod
     *
     * @return self
     */
    public function setVeicProd($veic_prod)
    {
        if (is_null($veic_prod)) {
            throw new \InvalidArgumentException('non-nullable veic_prod cannot be null');
        }
        $this->container['veic_prod'] = $veic_prod;

        return $this;
    }

    /**
     * Gets med
     *
     * @return \NuvemFiscal\Model\NfeSefazMed|null
     */
    public function getMed()
    {
        return $this->container['med'];
    }

    /**
     * Sets med
     *
     * @param \NuvemFiscal\Model\NfeSefazMed|null $med med
     *
     * @return self
     */
    public function setMed($med)
    {
        if (is_null($med)) {
            throw new \InvalidArgumentException('non-nullable med cannot be null');
        }
        $this->container['med'] = $med;

        return $this;
    }

    /**
     * Gets arma
     *
     * @return \NuvemFiscal\Model\NfeSefazArma[]|null
     */
    public function getArma()
    {
        return $this->container['arma'];
    }

    /**
     * Sets arma
     *
     * @param \NuvemFiscal\Model\NfeSefazArma[]|null $arma arma
     *
     * @return self
     */
    public function setArma($arma)
    {
        if (is_null($arma)) {
            throw new \InvalidArgumentException('non-nullable arma cannot be null');
        }
        $this->container['arma'] = $arma;

        return $this;
    }

    /**
     * Gets comb
     *
     * @return \NuvemFiscal\Model\NfeSefazComb|null
     */
    public function getComb()
    {
        return $this->container['comb'];
    }

    /**
     * Sets comb
     *
     * @param \NuvemFiscal\Model\NfeSefazComb|null $comb comb
     *
     * @return self
     */
    public function setComb($comb)
    {
        if (is_null($comb)) {
            throw new \InvalidArgumentException('non-nullable comb cannot be null');
        }
        $this->container['comb'] = $comb;

        return $this;
    }

    /**
     * Gets n_recopi
     *
     * @return string|null
     */
    public function getNRecopi()
    {
        return $this->container['n_recopi'];
    }

    /**
     * Sets n_recopi
     *
     * @param string|null $n_recopi Número do RECOPI.
     *
     * @return self
     */
    public function setNRecopi($n_recopi)
    {
        if (is_null($n_recopi)) {
            array_push($this->openAPINullablesSetToNull, 'n_recopi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_recopi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_recopi) && (mb_strlen($n_recopi) > 20)) {
            throw new \InvalidArgumentException('invalid length for $n_recopi when calling NfeSefazProd., must be smaller than or equal to 20.');
        }

        $this->container['n_recopi'] = $n_recopi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


