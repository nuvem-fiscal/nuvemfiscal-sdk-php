<?php
/**
 * CteSefazIdDocAntPap
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Versão do documento OpenAPI: 1.2.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * CteSefazIdDocAntPap Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CteSefazIdDocAntPap implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CteSefazIdDocAntPap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tp_doc' => 'string',
        'serie' => 'string',
        'subser' => 'string',
        'n_doc' => 'string',
        'd_emi' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tp_doc' => null,
        'serie' => null,
        'subser' => null,
        'n_doc' => null,
        'd_emi' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tp_doc' => false,
		'serie' => false,
		'subser' => false,
		'n_doc' => false,
		'd_emi' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tp_doc' => 'tpDoc',
        'serie' => 'serie',
        'subser' => 'subser',
        'n_doc' => 'nDoc',
        'd_emi' => 'dEmi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tp_doc' => 'setTpDoc',
        'serie' => 'setSerie',
        'subser' => 'setSubser',
        'n_doc' => 'setNDoc',
        'd_emi' => 'setDEmi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tp_doc' => 'getTpDoc',
        'serie' => 'getSerie',
        'subser' => 'getSubser',
        'n_doc' => 'getNDoc',
        'd_emi' => 'getDEmi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tp_doc', $data ?? [], null);
        $this->setIfExists('serie', $data ?? [], null);
        $this->setIfExists('subser', $data ?? [], null);
        $this->setIfExists('n_doc', $data ?? [], null);
        $this->setIfExists('d_emi', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tp_doc'] === null) {
            $invalidProperties[] = "'tp_doc' can't be null";
        }
        if ($this->container['serie'] === null) {
            $invalidProperties[] = "'serie' can't be null";
        }
        if ($this->container['n_doc'] === null) {
            $invalidProperties[] = "'n_doc' can't be null";
        }
        if ($this->container['d_emi'] === null) {
            $invalidProperties[] = "'d_emi' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tp_doc
     *
     * @return string
     */
    public function getTpDoc()
    {
        return $this->container['tp_doc'];
    }

    /**
     * Sets tp_doc
     *
     * @param string $tp_doc Tipo do Documento de Transporte Anterior.  Preencher com:  07-ATRE;         08-DTA (Despacho de Transito Aduaneiro);  09-Conhecimento Aéreo Internacional;  10 – Conhecimento - Carta de Porte Internacional;  11 – Conhecimento Avulso;  12-TIF (Transporte Internacional Ferroviário); 13-BL (Bill of Lading).
     *
     * @return self
     */
    public function setTpDoc($tp_doc)
    {

        if (is_null($tp_doc)) {
            throw new \InvalidArgumentException('non-nullable tp_doc cannot be null');
        }

        $this->container['tp_doc'] = $tp_doc;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return string
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param string $serie Série do Documento Fiscal.
     *
     * @return self
     */
    public function setSerie($serie)
    {

        if (is_null($serie)) {
            throw new \InvalidArgumentException('non-nullable serie cannot be null');
        }

        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets subser
     *
     * @return string|null
     */
    public function getSubser()
    {
        return $this->container['subser'];
    }

    /**
     * Sets subser
     *
     * @param string|null $subser Série do Documento Fiscal.
     *
     * @return self
     */
    public function setSubser($subser)
    {

        if (is_null($subser)) {
            throw new \InvalidArgumentException('non-nullable subser cannot be null');
        }

        $this->container['subser'] = $subser;

        return $this;
    }

    /**
     * Gets n_doc
     *
     * @return string
     */
    public function getNDoc()
    {
        return $this->container['n_doc'];
    }

    /**
     * Sets n_doc
     *
     * @param string $n_doc Número do Documento Fiscal.
     *
     * @return self
     */
    public function setNDoc($n_doc)
    {

        if (is_null($n_doc)) {
            throw new \InvalidArgumentException('non-nullable n_doc cannot be null');
        }

        $this->container['n_doc'] = $n_doc;

        return $this;
    }

    /**
     * Gets d_emi
     *
     * @return \DateTime
     */
    public function getDEmi()
    {
        return $this->container['d_emi'];
    }

    /**
     * Sets d_emi
     *
     * @param \DateTime $d_emi Data de emissão (AAAA-MM-DD).
     *
     * @return self
     */
    public function setDEmi($d_emi)
    {

        if (is_null($d_emi)) {
            throw new \InvalidArgumentException('non-nullable d_emi cannot be null');
        }

        $this->container['d_emi'] = $d_emi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


