<?php
/**
 * MdfeSefazDisp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * MdfeSefazDisp Class Doc Comment
 *
 * @category Class
 * @description Informações dos dispositivos do Vale Pedágio.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MdfeSefazDisp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MdfeSefazDisp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cnpj_forn' => 'string',
        'cnpjpg' => 'string',
        'cpfpg' => 'string',
        'n_compra' => 'string',
        'v_vale_ped' => 'float',
        'tp_vale_ped' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cnpj_forn' => null,
        'cnpjpg' => null,
        'cpfpg' => null,
        'n_compra' => null,
        'v_vale_ped' => null,
        'tp_vale_ped' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cnpj_forn' => true,
		'cnpjpg' => true,
		'cpfpg' => true,
		'n_compra' => true,
		'v_vale_ped' => true,
		'tp_vale_ped' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cnpj_forn' => 'CNPJForn',
        'cnpjpg' => 'CNPJPg',
        'cpfpg' => 'CPFPg',
        'n_compra' => 'nCompra',
        'v_vale_ped' => 'vValePed',
        'tp_vale_ped' => 'tpValePed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cnpj_forn' => 'setCnpjForn',
        'cnpjpg' => 'setCnpjpg',
        'cpfpg' => 'setCpfpg',
        'n_compra' => 'setNCompra',
        'v_vale_ped' => 'setVValePed',
        'tp_vale_ped' => 'setTpValePed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cnpj_forn' => 'getCnpjForn',
        'cnpjpg' => 'getCnpjpg',
        'cpfpg' => 'getCpfpg',
        'n_compra' => 'getNCompra',
        'v_vale_ped' => 'getVValePed',
        'tp_vale_ped' => 'getTpValePed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cnpj_forn', $data ?? [], null);
        $this->setIfExists('cnpjpg', $data ?? [], null);
        $this->setIfExists('cpfpg', $data ?? [], null);
        $this->setIfExists('n_compra', $data ?? [], null);
        $this->setIfExists('v_vale_ped', $data ?? [], null);
        $this->setIfExists('tp_vale_ped', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cnpj_forn'] === null) {
            $invalidProperties[] = "'cnpj_forn' can't be null";
        }
        if ($this->container['v_vale_ped'] === null) {
            $invalidProperties[] = "'v_vale_ped' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cnpj_forn
     *
     * @return string
     */
    public function getCnpjForn()
    {
        return $this->container['cnpj_forn'];
    }

    /**
     * Sets cnpj_forn
     *
     * @param string $cnpj_forn CNPJ da empresa fornecedora do Vale-Pedágio.  * CNPJ da Empresa Fornecedora do Vale-Pedágio, ou seja, empresa que fornece ao Responsável pelo Pagamento do Vale-Pedágio os dispositivos do Vale-Pedágio.  * Informar os zeros não significativos.
     *
     * @return self
     */
    public function setCnpjForn($cnpj_forn)
    {
        if (is_null($cnpj_forn)) {
            array_push($this->openAPINullablesSetToNull, 'cnpj_forn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnpj_forn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnpj_forn'] = $cnpj_forn;

        return $this;
    }

    /**
     * Gets cnpjpg
     *
     * @return string|null
     */
    public function getCnpjpg()
    {
        return $this->container['cnpjpg'];
    }

    /**
     * Sets cnpjpg
     *
     * @param string|null $cnpjpg CNPJ do responsável pelo pagamento do Vale-Pedágio.  * responsável pelo pagamento do Vale Pedágio. Informar somente quando o responsável não for o emitente do MDF-e.  * Informar os zeros não significativos.
     *
     * @return self
     */
    public function setCnpjpg($cnpjpg)
    {
        if (is_null($cnpjpg)) {
            array_push($this->openAPINullablesSetToNull, 'cnpjpg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnpjpg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnpjpg'] = $cnpjpg;

        return $this;
    }

    /**
     * Gets cpfpg
     *
     * @return string|null
     */
    public function getCpfpg()
    {
        return $this->container['cpfpg'];
    }

    /**
     * Sets cpfpg
     *
     * @param string|null $cpfpg CNPJ do responsável pelo pagamento do Vale-Pedágio.  Informar os zeros não significativos.
     *
     * @return self
     */
    public function setCpfpg($cpfpg)
    {
        if (is_null($cpfpg)) {
            array_push($this->openAPINullablesSetToNull, 'cpfpg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cpfpg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cpfpg'] = $cpfpg;

        return $this;
    }

    /**
     * Gets n_compra
     *
     * @return string|null
     */
    public function getNCompra()
    {
        return $this->container['n_compra'];
    }

    /**
     * Sets n_compra
     *
     * @param string|null $n_compra Número do comprovante de compra.  Número de ordem do comprovante de compra do Vale-Pedágio fornecido para cada veículo ou combinação veicular, por viagem.
     *
     * @return self
     */
    public function setNCompra($n_compra)
    {
        if (is_null($n_compra)) {
            array_push($this->openAPINullablesSetToNull, 'n_compra');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_compra', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['n_compra'] = $n_compra;

        return $this;
    }

    /**
     * Gets v_vale_ped
     *
     * @return float
     */
    public function getVValePed()
    {
        return $this->container['v_vale_ped'];
    }

    /**
     * Sets v_vale_ped
     *
     * @param float $v_vale_ped Valor do Vale-Pedagio.  Valor do Vale-Pedágio obrigatório necessário à livre circulação, desde a origem da operação de transporte até o destino, do transportador contratado.
     *
     * @return self
     */
    public function setVValePed($v_vale_ped)
    {
        if (is_null($v_vale_ped)) {
            array_push($this->openAPINullablesSetToNull, 'v_vale_ped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_vale_ped', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_vale_ped'] = $v_vale_ped;

        return $this;
    }

    /**
     * Gets tp_vale_ped
     *
     * @return string|null
     */
    public function getTpValePed()
    {
        return $this->container['tp_vale_ped'];
    }

    /**
     * Sets tp_vale_ped
     *
     * @param string|null $tp_vale_ped Tipo do Vale Pedagio.  * 01 - TAG  * 02 - Cupom  * 03 - Cartão
     *
     * @return self
     */
    public function setTpValePed($tp_vale_ped)
    {
        if (is_null($tp_vale_ped)) {
            array_push($this->openAPINullablesSetToNull, 'tp_vale_ped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tp_vale_ped', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tp_vale_ped'] = $tp_vale_ped;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


