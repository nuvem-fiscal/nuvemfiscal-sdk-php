<?php
/**
 * CteSefazInfNF
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * CteSefazInfNF Class Doc Comment
 *
 * @category Class
 * @description Informações das NF.  Este grupo deve ser informado quando o documento originário for NF.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CteSefazInfNF implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CteSefazInfNF';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'n_roma' => 'string',
        'n_ped' => 'string',
        'mod' => 'string',
        'serie' => 'string',
        'n_doc' => 'string',
        'd_emi' => '\DateTime',
        'v_bc' => 'float',
        'v_icms' => 'float',
        'v_bcst' => 'float',
        'v_st' => 'float',
        'v_prod' => 'float',
        'v_nf' => 'float',
        'n_cfop' => 'string',
        'n_peso' => 'float',
        'pin' => 'string',
        'd_prev' => '\DateTime',
        'inf_unid_carga' => '\NuvemFiscal\Model\CteSefazUnidCarga[]',
        'inf_unid_transp' => '\NuvemFiscal\Model\CteSefazUnidadeTransp[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'n_roma' => null,
        'n_ped' => null,
        'mod' => null,
        'serie' => null,
        'n_doc' => null,
        'd_emi' => 'date',
        'v_bc' => null,
        'v_icms' => null,
        'v_bcst' => null,
        'v_st' => null,
        'v_prod' => null,
        'v_nf' => null,
        'n_cfop' => null,
        'n_peso' => null,
        'pin' => null,
        'd_prev' => 'date',
        'inf_unid_carga' => null,
        'inf_unid_transp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'n_roma' => true,
		'n_ped' => true,
		'mod' => true,
		'serie' => true,
		'n_doc' => true,
		'd_emi' => true,
		'v_bc' => true,
		'v_icms' => true,
		'v_bcst' => true,
		'v_st' => true,
		'v_prod' => true,
		'v_nf' => true,
		'n_cfop' => true,
		'n_peso' => true,
		'pin' => true,
		'd_prev' => true,
		'inf_unid_carga' => false,
		'inf_unid_transp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'n_roma' => 'nRoma',
        'n_ped' => 'nPed',
        'mod' => 'mod',
        'serie' => 'serie',
        'n_doc' => 'nDoc',
        'd_emi' => 'dEmi',
        'v_bc' => 'vBC',
        'v_icms' => 'vICMS',
        'v_bcst' => 'vBCST',
        'v_st' => 'vST',
        'v_prod' => 'vProd',
        'v_nf' => 'vNF',
        'n_cfop' => 'nCFOP',
        'n_peso' => 'nPeso',
        'pin' => 'PIN',
        'd_prev' => 'dPrev',
        'inf_unid_carga' => 'infUnidCarga',
        'inf_unid_transp' => 'infUnidTransp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'n_roma' => 'setNRoma',
        'n_ped' => 'setNPed',
        'mod' => 'setMod',
        'serie' => 'setSerie',
        'n_doc' => 'setNDoc',
        'd_emi' => 'setDEmi',
        'v_bc' => 'setVBc',
        'v_icms' => 'setVIcms',
        'v_bcst' => 'setVBcst',
        'v_st' => 'setVSt',
        'v_prod' => 'setVProd',
        'v_nf' => 'setVNf',
        'n_cfop' => 'setNCfop',
        'n_peso' => 'setNPeso',
        'pin' => 'setPin',
        'd_prev' => 'setDPrev',
        'inf_unid_carga' => 'setInfUnidCarga',
        'inf_unid_transp' => 'setInfUnidTransp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'n_roma' => 'getNRoma',
        'n_ped' => 'getNPed',
        'mod' => 'getMod',
        'serie' => 'getSerie',
        'n_doc' => 'getNDoc',
        'd_emi' => 'getDEmi',
        'v_bc' => 'getVBc',
        'v_icms' => 'getVIcms',
        'v_bcst' => 'getVBcst',
        'v_st' => 'getVSt',
        'v_prod' => 'getVProd',
        'v_nf' => 'getVNf',
        'n_cfop' => 'getNCfop',
        'n_peso' => 'getNPeso',
        'pin' => 'getPin',
        'd_prev' => 'getDPrev',
        'inf_unid_carga' => 'getInfUnidCarga',
        'inf_unid_transp' => 'getInfUnidTransp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('n_roma', $data ?? [], null);
        $this->setIfExists('n_ped', $data ?? [], null);
        $this->setIfExists('mod', $data ?? [], null);
        $this->setIfExists('serie', $data ?? [], null);
        $this->setIfExists('n_doc', $data ?? [], null);
        $this->setIfExists('d_emi', $data ?? [], null);
        $this->setIfExists('v_bc', $data ?? [], null);
        $this->setIfExists('v_icms', $data ?? [], null);
        $this->setIfExists('v_bcst', $data ?? [], null);
        $this->setIfExists('v_st', $data ?? [], null);
        $this->setIfExists('v_prod', $data ?? [], null);
        $this->setIfExists('v_nf', $data ?? [], null);
        $this->setIfExists('n_cfop', $data ?? [], null);
        $this->setIfExists('n_peso', $data ?? [], null);
        $this->setIfExists('pin', $data ?? [], null);
        $this->setIfExists('d_prev', $data ?? [], null);
        $this->setIfExists('inf_unid_carga', $data ?? [], null);
        $this->setIfExists('inf_unid_transp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['n_roma']) && (mb_strlen($this->container['n_roma']) > 20)) {
            $invalidProperties[] = "invalid value for 'n_roma', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['n_roma']) && (mb_strlen($this->container['n_roma']) < 1)) {
            $invalidProperties[] = "invalid value for 'n_roma', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['n_ped']) && (mb_strlen($this->container['n_ped']) > 20)) {
            $invalidProperties[] = "invalid value for 'n_ped', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['n_ped']) && (mb_strlen($this->container['n_ped']) < 1)) {
            $invalidProperties[] = "invalid value for 'n_ped', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mod'] === null) {
            $invalidProperties[] = "'mod' can't be null";
        }
        if ($this->container['serie'] === null) {
            $invalidProperties[] = "'serie' can't be null";
        }
        if ((mb_strlen($this->container['serie']) > 3)) {
            $invalidProperties[] = "invalid value for 'serie', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['serie']) < 1)) {
            $invalidProperties[] = "invalid value for 'serie', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['n_doc'] === null) {
            $invalidProperties[] = "'n_doc' can't be null";
        }
        if ((mb_strlen($this->container['n_doc']) > 20)) {
            $invalidProperties[] = "invalid value for 'n_doc', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['n_doc']) < 1)) {
            $invalidProperties[] = "invalid value for 'n_doc', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['d_emi'] === null) {
            $invalidProperties[] = "'d_emi' can't be null";
        }
        if ($this->container['v_bc'] === null) {
            $invalidProperties[] = "'v_bc' can't be null";
        }
        if ($this->container['v_icms'] === null) {
            $invalidProperties[] = "'v_icms' can't be null";
        }
        if ($this->container['v_bcst'] === null) {
            $invalidProperties[] = "'v_bcst' can't be null";
        }
        if ($this->container['v_st'] === null) {
            $invalidProperties[] = "'v_st' can't be null";
        }
        if ($this->container['v_prod'] === null) {
            $invalidProperties[] = "'v_prod' can't be null";
        }
        if ($this->container['v_nf'] === null) {
            $invalidProperties[] = "'v_nf' can't be null";
        }
        if ($this->container['n_cfop'] === null) {
            $invalidProperties[] = "'n_cfop' can't be null";
        }
        if (!is_null($this->container['pin']) && (mb_strlen($this->container['pin']) > 9)) {
            $invalidProperties[] = "invalid value for 'pin', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['pin']) && (mb_strlen($this->container['pin']) < 2)) {
            $invalidProperties[] = "invalid value for 'pin', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets n_roma
     *
     * @return string|null
     */
    public function getNRoma()
    {
        return $this->container['n_roma'];
    }

    /**
     * Sets n_roma
     *
     * @param string|null $n_roma Número do Romaneio da NF.
     *
     * @return self
     */
    public function setNRoma($n_roma)
    {
        if (is_null($n_roma)) {
            array_push($this->openAPINullablesSetToNull, 'n_roma');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_roma', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_roma) && (mb_strlen($n_roma) > 20)) {
            throw new \InvalidArgumentException('invalid length for $n_roma when calling CteSefazInfNF., must be smaller than or equal to 20.');
        }
        if (!is_null($n_roma) && (mb_strlen($n_roma) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_roma when calling CteSefazInfNF., must be bigger than or equal to 1.');
        }

        $this->container['n_roma'] = $n_roma;

        return $this;
    }

    /**
     * Gets n_ped
     *
     * @return string|null
     */
    public function getNPed()
    {
        return $this->container['n_ped'];
    }

    /**
     * Sets n_ped
     *
     * @param string|null $n_ped Número do Pedido da NF.
     *
     * @return self
     */
    public function setNPed($n_ped)
    {
        if (is_null($n_ped)) {
            array_push($this->openAPINullablesSetToNull, 'n_ped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_ped', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_ped) && (mb_strlen($n_ped) > 20)) {
            throw new \InvalidArgumentException('invalid length for $n_ped when calling CteSefazInfNF., must be smaller than or equal to 20.');
        }
        if (!is_null($n_ped) && (mb_strlen($n_ped) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_ped when calling CteSefazInfNF., must be bigger than or equal to 1.');
        }

        $this->container['n_ped'] = $n_ped;

        return $this;
    }

    /**
     * Gets mod
     *
     * @return string
     */
    public function getMod()
    {
        return $this->container['mod'];
    }

    /**
     * Sets mod
     *
     * @param string $mod Modelo da Nota Fiscal.  Preencher com:  * 01 - NF Modelo 01/1A e Avulsa  * 04 - NF de Produtor
     *
     * @return self
     */
    public function setMod($mod)
    {
        if (is_null($mod)) {
            array_push($this->openAPINullablesSetToNull, 'mod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mod'] = $mod;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return string
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param string $serie Série.
     *
     * @return self
     */
    public function setSerie($serie)
    {
        if (is_null($serie)) {
            array_push($this->openAPINullablesSetToNull, 'serie');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serie', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($serie) && (mb_strlen($serie) > 3)) {
            throw new \InvalidArgumentException('invalid length for $serie when calling CteSefazInfNF., must be smaller than or equal to 3.');
        }
        if (!is_null($serie) && (mb_strlen($serie) < 1)) {
            throw new \InvalidArgumentException('invalid length for $serie when calling CteSefazInfNF., must be bigger than or equal to 1.');
        }

        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets n_doc
     *
     * @return string
     */
    public function getNDoc()
    {
        return $this->container['n_doc'];
    }

    /**
     * Sets n_doc
     *
     * @param string $n_doc Número.
     *
     * @return self
     */
    public function setNDoc($n_doc)
    {
        if (is_null($n_doc)) {
            array_push($this->openAPINullablesSetToNull, 'n_doc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_doc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($n_doc) && (mb_strlen($n_doc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $n_doc when calling CteSefazInfNF., must be smaller than or equal to 20.');
        }
        if (!is_null($n_doc) && (mb_strlen($n_doc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_doc when calling CteSefazInfNF., must be bigger than or equal to 1.');
        }

        $this->container['n_doc'] = $n_doc;

        return $this;
    }

    /**
     * Gets d_emi
     *
     * @return \DateTime
     */
    public function getDEmi()
    {
        return $this->container['d_emi'];
    }

    /**
     * Sets d_emi
     *
     * @param \DateTime $d_emi Data de Emissão.  Formato AAAA-MM-DD.
     *
     * @return self
     */
    public function setDEmi($d_emi)
    {
        if (is_null($d_emi)) {
            array_push($this->openAPINullablesSetToNull, 'd_emi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('d_emi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['d_emi'] = $d_emi;

        return $this;
    }

    /**
     * Gets v_bc
     *
     * @return float
     */
    public function getVBc()
    {
        return $this->container['v_bc'];
    }

    /**
     * Sets v_bc
     *
     * @param float $v_bc Valor da Base de Cálculo do ICMS.
     *
     * @return self
     */
    public function setVBc($v_bc)
    {
        if (is_null($v_bc)) {
            array_push($this->openAPINullablesSetToNull, 'v_bc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_bc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_bc'] = $v_bc;

        return $this;
    }

    /**
     * Gets v_icms
     *
     * @return float
     */
    public function getVIcms()
    {
        return $this->container['v_icms'];
    }

    /**
     * Sets v_icms
     *
     * @param float $v_icms Valor Total do ICMS.
     *
     * @return self
     */
    public function setVIcms($v_icms)
    {
        if (is_null($v_icms)) {
            array_push($this->openAPINullablesSetToNull, 'v_icms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_icms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_icms'] = $v_icms;

        return $this;
    }

    /**
     * Gets v_bcst
     *
     * @return float
     */
    public function getVBcst()
    {
        return $this->container['v_bcst'];
    }

    /**
     * Sets v_bcst
     *
     * @param float $v_bcst Valor da Base de Cálculo do ICMS ST.
     *
     * @return self
     */
    public function setVBcst($v_bcst)
    {
        if (is_null($v_bcst)) {
            array_push($this->openAPINullablesSetToNull, 'v_bcst');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_bcst', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_bcst'] = $v_bcst;

        return $this;
    }

    /**
     * Gets v_st
     *
     * @return float
     */
    public function getVSt()
    {
        return $this->container['v_st'];
    }

    /**
     * Sets v_st
     *
     * @param float $v_st Valor Total do ICMS ST.
     *
     * @return self
     */
    public function setVSt($v_st)
    {
        if (is_null($v_st)) {
            array_push($this->openAPINullablesSetToNull, 'v_st');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_st', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_st'] = $v_st;

        return $this;
    }

    /**
     * Gets v_prod
     *
     * @return float
     */
    public function getVProd()
    {
        return $this->container['v_prod'];
    }

    /**
     * Sets v_prod
     *
     * @param float $v_prod Valor Total dos Produtos.
     *
     * @return self
     */
    public function setVProd($v_prod)
    {
        if (is_null($v_prod)) {
            array_push($this->openAPINullablesSetToNull, 'v_prod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_prod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_prod'] = $v_prod;

        return $this;
    }

    /**
     * Gets v_nf
     *
     * @return float
     */
    public function getVNf()
    {
        return $this->container['v_nf'];
    }

    /**
     * Sets v_nf
     *
     * @param float $v_nf Valor Total da NF.
     *
     * @return self
     */
    public function setVNf($v_nf)
    {
        if (is_null($v_nf)) {
            array_push($this->openAPINullablesSetToNull, 'v_nf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('v_nf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['v_nf'] = $v_nf;

        return $this;
    }

    /**
     * Gets n_cfop
     *
     * @return string
     */
    public function getNCfop()
    {
        return $this->container['n_cfop'];
    }

    /**
     * Sets n_cfop
     *
     * @param string $n_cfop CFOP Predominante.  CFOP da NF ou, na existência de mais de um, predominância pelo critério de valor econômico.
     *
     * @return self
     */
    public function setNCfop($n_cfop)
    {
        if (is_null($n_cfop)) {
            array_push($this->openAPINullablesSetToNull, 'n_cfop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_cfop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['n_cfop'] = $n_cfop;

        return $this;
    }

    /**
     * Gets n_peso
     *
     * @return float|null
     */
    public function getNPeso()
    {
        return $this->container['n_peso'];
    }

    /**
     * Sets n_peso
     *
     * @param float|null $n_peso Peso total em Kg.
     *
     * @return self
     */
    public function setNPeso($n_peso)
    {
        if (is_null($n_peso)) {
            array_push($this->openAPINullablesSetToNull, 'n_peso');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('n_peso', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['n_peso'] = $n_peso;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string|null $pin PIN SUFRAMA.  PIN atribuído pela SUFRAMA para a operação.
     *
     * @return self
     */
    public function setPin($pin)
    {
        if (is_null($pin)) {
            array_push($this->openAPINullablesSetToNull, 'pin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pin) && (mb_strlen($pin) > 9)) {
            throw new \InvalidArgumentException('invalid length for $pin when calling CteSefazInfNF., must be smaller than or equal to 9.');
        }
        if (!is_null($pin) && (mb_strlen($pin) < 2)) {
            throw new \InvalidArgumentException('invalid length for $pin when calling CteSefazInfNF., must be bigger than or equal to 2.');
        }

        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets d_prev
     *
     * @return \DateTime|null
     */
    public function getDPrev()
    {
        return $this->container['d_prev'];
    }

    /**
     * Sets d_prev
     *
     * @param \DateTime|null $d_prev Data prevista de entrega.  Formato AAAA-MM-DD.
     *
     * @return self
     */
    public function setDPrev($d_prev)
    {
        if (is_null($d_prev)) {
            array_push($this->openAPINullablesSetToNull, 'd_prev');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('d_prev', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['d_prev'] = $d_prev;

        return $this;
    }

    /**
     * Gets inf_unid_carga
     *
     * @return \NuvemFiscal\Model\CteSefazUnidCarga[]|null
     */
    public function getInfUnidCarga()
    {
        return $this->container['inf_unid_carga'];
    }

    /**
     * Sets inf_unid_carga
     *
     * @param \NuvemFiscal\Model\CteSefazUnidCarga[]|null $inf_unid_carga inf_unid_carga
     *
     * @return self
     */
    public function setInfUnidCarga($inf_unid_carga)
    {
        if (is_null($inf_unid_carga)) {
            throw new \InvalidArgumentException('non-nullable inf_unid_carga cannot be null');
        }
        $this->container['inf_unid_carga'] = $inf_unid_carga;

        return $this;
    }

    /**
     * Gets inf_unid_transp
     *
     * @return \NuvemFiscal\Model\CteSefazUnidadeTransp[]|null
     */
    public function getInfUnidTransp()
    {
        return $this->container['inf_unid_transp'];
    }

    /**
     * Sets inf_unid_transp
     *
     * @param \NuvemFiscal\Model\CteSefazUnidadeTransp[]|null $inf_unid_transp inf_unid_transp
     *
     * @return self
     */
    public function setInfUnidTransp($inf_unid_transp)
    {
        if (is_null($inf_unid_transp)) {
            throw new \InvalidArgumentException('non-nullable inf_unid_transp cannot be null');
        }
        $this->container['inf_unid_transp'] = $inf_unid_transp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


