<?php
/**
 * RpsPedidoEmissao
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * RpsPedidoEmissao Class Doc Comment
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RpsPedidoEmissao implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RpsPedidoEmissao';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'referencia' => 'string',
        'data_emissao' => '\DateTime',
        'competencia' => '\DateTime',
        'natureza_tributacao' => 'int',
        'prestador' => '\NuvemFiscal\Model\RpsIdentificacaoPrestador',
        'tomador' => '\NuvemFiscal\Model\RpsDadosTomador',
        'intermediario' => '\NuvemFiscal\Model\RpsDadosIntermediario',
        'construcao_civil' => '\NuvemFiscal\Model\RpsDadosConstrucaoCivil',
        'servicos' => '\NuvemFiscal\Model\RpsDadosServico[]',
        'outras_informacoes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'referencia' => null,
        'data_emissao' => 'date-time',
        'competencia' => 'date-time',
        'natureza_tributacao' => null,
        'prestador' => null,
        'tomador' => null,
        'intermediario' => null,
        'construcao_civil' => null,
        'servicos' => null,
        'outras_informacoes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'referencia' => false,
		'data_emissao' => false,
		'competencia' => false,
		'natureza_tributacao' => false,
		'prestador' => false,
		'tomador' => false,
		'intermediario' => false,
		'construcao_civil' => false,
		'servicos' => false,
		'outras_informacoes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'referencia' => 'referencia',
        'data_emissao' => 'data_emissao',
        'competencia' => 'competencia',
        'natureza_tributacao' => 'natureza_tributacao',
        'prestador' => 'prestador',
        'tomador' => 'tomador',
        'intermediario' => 'intermediario',
        'construcao_civil' => 'construcao_civil',
        'servicos' => 'servicos',
        'outras_informacoes' => 'outras_informacoes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'referencia' => 'setReferencia',
        'data_emissao' => 'setDataEmissao',
        'competencia' => 'setCompetencia',
        'natureza_tributacao' => 'setNaturezaTributacao',
        'prestador' => 'setPrestador',
        'tomador' => 'setTomador',
        'intermediario' => 'setIntermediario',
        'construcao_civil' => 'setConstrucaoCivil',
        'servicos' => 'setServicos',
        'outras_informacoes' => 'setOutrasInformacoes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'referencia' => 'getReferencia',
        'data_emissao' => 'getDataEmissao',
        'competencia' => 'getCompetencia',
        'natureza_tributacao' => 'getNaturezaTributacao',
        'prestador' => 'getPrestador',
        'tomador' => 'getTomador',
        'intermediario' => 'getIntermediario',
        'construcao_civil' => 'getConstrucaoCivil',
        'servicos' => 'getServicos',
        'outras_informacoes' => 'getOutrasInformacoes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('referencia', $data ?? [], null);
        $this->setIfExists('data_emissao', $data ?? [], null);
        $this->setIfExists('competencia', $data ?? [], null);
        $this->setIfExists('natureza_tributacao', $data ?? [], null);
        $this->setIfExists('prestador', $data ?? [], null);
        $this->setIfExists('tomador', $data ?? [], null);
        $this->setIfExists('intermediario', $data ?? [], null);
        $this->setIfExists('construcao_civil', $data ?? [], null);
        $this->setIfExists('servicos', $data ?? [], null);
        $this->setIfExists('outras_informacoes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['prestador'] === null) {
            $invalidProperties[] = "'prestador' can't be null";
        }
        if ($this->container['tomador'] === null) {
            $invalidProperties[] = "'tomador' can't be null";
        }
        if ($this->container['servicos'] === null) {
            $invalidProperties[] = "'servicos' can't be null";
        }
        if (!is_null($this->container['outras_informacoes']) && (mb_strlen($this->container['outras_informacoes']) > 255)) {
            $invalidProperties[] = "invalid value for 'outras_informacoes', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets referencia
     *
     * @return string|null
     */
    public function getReferencia()
    {
        return $this->container['referencia'];
    }

    /**
     * Sets referencia
     *
     * @param string|null $referencia Seu identificador único para este documento. Opcional, ajuda a evitar o envio duplicado de um mesmo documento.
     *
     * @return self
     */
    public function setReferencia($referencia)
    {
        if (is_null($referencia)) {
            throw new \InvalidArgumentException('non-nullable referencia cannot be null');
        }
        $this->container['referencia'] = $referencia;

        return $this;
    }

    /**
     * Gets data_emissao
     *
     * @return \DateTime|null
     */
    public function getDataEmissao()
    {
        return $this->container['data_emissao'];
    }

    /**
     * Sets data_emissao
     *
     * @param \DateTime|null $data_emissao Data e Hora de Emissão do RPS, no formato AAAA-MM-DDTHH:MM:SSTZD.  Caso não informado, será considerada a data/hora da requisição à API da Nuvem Fiscal.
     *
     * @return self
     */
    public function setDataEmissao($data_emissao)
    {
        if (is_null($data_emissao)) {
            throw new \InvalidArgumentException('non-nullable data_emissao cannot be null');
        }
        $this->container['data_emissao'] = $data_emissao;

        return $this;
    }

    /**
     * Gets competencia
     *
     * @return \DateTime|null
     */
    public function getCompetencia()
    {
        return $this->container['competencia'];
    }

    /**
     * Sets competencia
     *
     * @param \DateTime|null $competencia Competência do RPS, no formato AAAA-MM-DD.  Caso não informado, será considerada a data da requisição à API da Nuvem Fiscal.
     *
     * @return self
     */
    public function setCompetencia($competencia)
    {
        if (is_null($competencia)) {
            throw new \InvalidArgumentException('non-nullable competencia cannot be null');
        }
        $this->container['competencia'] = $competencia;

        return $this;
    }

    /**
     * Gets natureza_tributacao
     *
     * @return int|null
     */
    public function getNaturezaTributacao()
    {
        return $this->container['natureza_tributacao'];
    }

    /**
     * Sets natureza_tributacao
     *
     * @param int|null $natureza_tributacao Natureza da tributação:  * 1 - Simples Nacional;  * 2 - Fixo;  * 3 - Depósito em juízo;  * 4 - Exigibilidade suspensa por decisão judicial;  * 5 - Exigibilidade suspensa por procedimento administrativo;  * 6 - Isenção parcial.
     *
     * @return self
     */
    public function setNaturezaTributacao($natureza_tributacao)
    {
        if (is_null($natureza_tributacao)) {
            throw new \InvalidArgumentException('non-nullable natureza_tributacao cannot be null');
        }
        $this->container['natureza_tributacao'] = $natureza_tributacao;

        return $this;
    }

    /**
     * Gets prestador
     *
     * @return \NuvemFiscal\Model\RpsIdentificacaoPrestador
     */
    public function getPrestador()
    {
        return $this->container['prestador'];
    }

    /**
     * Sets prestador
     *
     * @param \NuvemFiscal\Model\RpsIdentificacaoPrestador $prestador prestador
     *
     * @return self
     */
    public function setPrestador($prestador)
    {
        if (is_null($prestador)) {
            throw new \InvalidArgumentException('non-nullable prestador cannot be null');
        }
        $this->container['prestador'] = $prestador;

        return $this;
    }

    /**
     * Gets tomador
     *
     * @return \NuvemFiscal\Model\RpsDadosTomador
     */
    public function getTomador()
    {
        return $this->container['tomador'];
    }

    /**
     * Sets tomador
     *
     * @param \NuvemFiscal\Model\RpsDadosTomador $tomador tomador
     *
     * @return self
     */
    public function setTomador($tomador)
    {
        if (is_null($tomador)) {
            throw new \InvalidArgumentException('non-nullable tomador cannot be null');
        }
        $this->container['tomador'] = $tomador;

        return $this;
    }

    /**
     * Gets intermediario
     *
     * @return \NuvemFiscal\Model\RpsDadosIntermediario|null
     */
    public function getIntermediario()
    {
        return $this->container['intermediario'];
    }

    /**
     * Sets intermediario
     *
     * @param \NuvemFiscal\Model\RpsDadosIntermediario|null $intermediario intermediario
     *
     * @return self
     */
    public function setIntermediario($intermediario)
    {
        if (is_null($intermediario)) {
            throw new \InvalidArgumentException('non-nullable intermediario cannot be null');
        }
        $this->container['intermediario'] = $intermediario;

        return $this;
    }

    /**
     * Gets construcao_civil
     *
     * @return \NuvemFiscal\Model\RpsDadosConstrucaoCivil|null
     */
    public function getConstrucaoCivil()
    {
        return $this->container['construcao_civil'];
    }

    /**
     * Sets construcao_civil
     *
     * @param \NuvemFiscal\Model\RpsDadosConstrucaoCivil|null $construcao_civil construcao_civil
     *
     * @return self
     */
    public function setConstrucaoCivil($construcao_civil)
    {
        if (is_null($construcao_civil)) {
            throw new \InvalidArgumentException('non-nullable construcao_civil cannot be null');
        }
        $this->container['construcao_civil'] = $construcao_civil;

        return $this;
    }

    /**
     * Gets servicos
     *
     * @return \NuvemFiscal\Model\RpsDadosServico[]
     */
    public function getServicos()
    {
        return $this->container['servicos'];
    }

    /**
     * Sets servicos
     *
     * @param \NuvemFiscal\Model\RpsDadosServico[] $servicos servicos
     *
     * @return self
     */
    public function setServicos($servicos)
    {
        if (is_null($servicos)) {
            throw new \InvalidArgumentException('non-nullable servicos cannot be null');
        }
        $this->container['servicos'] = $servicos;

        return $this;
    }

    /**
     * Gets outras_informacoes
     *
     * @return string|null
     */
    public function getOutrasInformacoes()
    {
        return $this->container['outras_informacoes'];
    }

    /**
     * Sets outras_informacoes
     *
     * @param string|null $outras_informacoes Informações adicionais ao documento.
     *
     * @return self
     */
    public function setOutrasInformacoes($outras_informacoes)
    {
        if (is_null($outras_informacoes)) {
            throw new \InvalidArgumentException('non-nullable outras_informacoes cannot be null');
        }
        if ((mb_strlen($outras_informacoes) > 255)) {
            throw new \InvalidArgumentException('invalid length for $outras_informacoes when calling RpsPedidoEmissao., must be smaller than or equal to 255.');
        }

        $this->container['outras_informacoes'] = $outras_informacoes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


