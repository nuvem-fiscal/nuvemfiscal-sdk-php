<?php
/**
 * DceSefazInfAdic
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * DceSefazInfAdic Class Doc Comment
 *
 * @category Class
 * @description Informações Adicionais.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DceSefazInfAdic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DceSefazInfAdic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inf_ad_fisco' => 'string',
        'inf_cpl' => 'string',
        'inf_ad_marketplace' => 'string',
        'inf_ad_ect' => 'string',
        'obs_emit' => '\NuvemFiscal\Model\DceSefazObsEmit[]',
        'obs_fisco' => '\NuvemFiscal\Model\DceSefazObsFisco[]',
        'obs_marketplace' => '\NuvemFiscal\Model\DceSefazObsMarketplace[]',
        'obs_ect' => '\NuvemFiscal\Model\DceSefazObsECT[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inf_ad_fisco' => null,
        'inf_cpl' => null,
        'inf_ad_marketplace' => null,
        'inf_ad_ect' => null,
        'obs_emit' => null,
        'obs_fisco' => null,
        'obs_marketplace' => null,
        'obs_ect' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inf_ad_fisco' => true,
        'inf_cpl' => true,
        'inf_ad_marketplace' => true,
        'inf_ad_ect' => true,
        'obs_emit' => false,
        'obs_fisco' => false,
        'obs_marketplace' => false,
        'obs_ect' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inf_ad_fisco' => 'infAdFisco',
        'inf_cpl' => 'infCpl',
        'inf_ad_marketplace' => 'infAdMarketplace',
        'inf_ad_ect' => 'infAdECT',
        'obs_emit' => 'obsEmit',
        'obs_fisco' => 'obsFisco',
        'obs_marketplace' => 'obsMarketplace',
        'obs_ect' => 'obsECT'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inf_ad_fisco' => 'setInfAdFisco',
        'inf_cpl' => 'setInfCpl',
        'inf_ad_marketplace' => 'setInfAdMarketplace',
        'inf_ad_ect' => 'setInfAdEct',
        'obs_emit' => 'setObsEmit',
        'obs_fisco' => 'setObsFisco',
        'obs_marketplace' => 'setObsMarketplace',
        'obs_ect' => 'setObsEct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inf_ad_fisco' => 'getInfAdFisco',
        'inf_cpl' => 'getInfCpl',
        'inf_ad_marketplace' => 'getInfAdMarketplace',
        'inf_ad_ect' => 'getInfAdEct',
        'obs_emit' => 'getObsEmit',
        'obs_fisco' => 'getObsFisco',
        'obs_marketplace' => 'getObsMarketplace',
        'obs_ect' => 'getObsEct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inf_ad_fisco', $data ?? [], null);
        $this->setIfExists('inf_cpl', $data ?? [], null);
        $this->setIfExists('inf_ad_marketplace', $data ?? [], null);
        $this->setIfExists('inf_ad_ect', $data ?? [], null);
        $this->setIfExists('obs_emit', $data ?? [], null);
        $this->setIfExists('obs_fisco', $data ?? [], null);
        $this->setIfExists('obs_marketplace', $data ?? [], null);
        $this->setIfExists('obs_ect', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['inf_ad_fisco']) && (mb_strlen($this->container['inf_ad_fisco']) > 2000)) {
            $invalidProperties[] = "invalid value for 'inf_ad_fisco', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['inf_ad_fisco']) && (mb_strlen($this->container['inf_ad_fisco']) < 1)) {
            $invalidProperties[] = "invalid value for 'inf_ad_fisco', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inf_cpl']) && (mb_strlen($this->container['inf_cpl']) > 5000)) {
            $invalidProperties[] = "invalid value for 'inf_cpl', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['inf_cpl']) && (mb_strlen($this->container['inf_cpl']) < 1)) {
            $invalidProperties[] = "invalid value for 'inf_cpl', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inf_ad_marketplace']) && (mb_strlen($this->container['inf_ad_marketplace']) > 5000)) {
            $invalidProperties[] = "invalid value for 'inf_ad_marketplace', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['inf_ad_marketplace']) && (mb_strlen($this->container['inf_ad_marketplace']) < 1)) {
            $invalidProperties[] = "invalid value for 'inf_ad_marketplace', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inf_ad_ect']) && (mb_strlen($this->container['inf_ad_ect']) > 5000)) {
            $invalidProperties[] = "invalid value for 'inf_ad_ect', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['inf_ad_ect']) && (mb_strlen($this->container['inf_ad_ect']) < 1)) {
            $invalidProperties[] = "invalid value for 'inf_ad_ect', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['obs_emit']) && (count($this->container['obs_emit']) > 10)) {
            $invalidProperties[] = "invalid value for 'obs_emit', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['obs_fisco']) && (count($this->container['obs_fisco']) > 10)) {
            $invalidProperties[] = "invalid value for 'obs_fisco', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['obs_marketplace']) && (count($this->container['obs_marketplace']) > 10)) {
            $invalidProperties[] = "invalid value for 'obs_marketplace', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['obs_ect']) && (count($this->container['obs_ect']) > 10)) {
            $invalidProperties[] = "invalid value for 'obs_ect', number of items must be less than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inf_ad_fisco
     *
     * @return string|null
     */
    public function getInfAdFisco()
    {
        return $this->container['inf_ad_fisco'];
    }

    /**
     * Sets inf_ad_fisco
     *
     * @param string|null $inf_ad_fisco Informações adicionais de interesse do Fisco.  Norma referenciada, informações complementares, etc.
     *
     * @return self
     */
    public function setInfAdFisco($inf_ad_fisco)
    {
        if (is_null($inf_ad_fisco)) {
            array_push($this->openAPINullablesSetToNull, 'inf_ad_fisco');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inf_ad_fisco', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inf_ad_fisco) && (mb_strlen($inf_ad_fisco) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $inf_ad_fisco when calling DceSefazInfAdic., must be smaller than or equal to 2000.');
        }
        if (!is_null($inf_ad_fisco) && (mb_strlen($inf_ad_fisco) < 1)) {
            throw new \InvalidArgumentException('invalid length for $inf_ad_fisco when calling DceSefazInfAdic., must be bigger than or equal to 1.');
        }

        $this->container['inf_ad_fisco'] = $inf_ad_fisco;

        return $this;
    }

    /**
     * Gets inf_cpl
     *
     * @return string|null
     */
    public function getInfCpl()
    {
        return $this->container['inf_cpl'];
    }

    /**
     * Sets inf_cpl
     *
     * @param string|null $inf_cpl Informações complementares de interesse do Emitente.
     *
     * @return self
     */
    public function setInfCpl($inf_cpl)
    {
        if (is_null($inf_cpl)) {
            array_push($this->openAPINullablesSetToNull, 'inf_cpl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inf_cpl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inf_cpl) && (mb_strlen($inf_cpl) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $inf_cpl when calling DceSefazInfAdic., must be smaller than or equal to 5000.');
        }
        if (!is_null($inf_cpl) && (mb_strlen($inf_cpl) < 1)) {
            throw new \InvalidArgumentException('invalid length for $inf_cpl when calling DceSefazInfAdic., must be bigger than or equal to 1.');
        }

        $this->container['inf_cpl'] = $inf_cpl;

        return $this;
    }

    /**
     * Gets inf_ad_marketplace
     *
     * @return string|null
     */
    public function getInfAdMarketplace()
    {
        return $this->container['inf_ad_marketplace'];
    }

    /**
     * Sets inf_ad_marketplace
     *
     * @param string|null $inf_ad_marketplace Informações Adicionais do MarketPlace.
     *
     * @return self
     */
    public function setInfAdMarketplace($inf_ad_marketplace)
    {
        if (is_null($inf_ad_marketplace)) {
            array_push($this->openAPINullablesSetToNull, 'inf_ad_marketplace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inf_ad_marketplace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inf_ad_marketplace) && (mb_strlen($inf_ad_marketplace) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $inf_ad_marketplace when calling DceSefazInfAdic., must be smaller than or equal to 5000.');
        }
        if (!is_null($inf_ad_marketplace) && (mb_strlen($inf_ad_marketplace) < 1)) {
            throw new \InvalidArgumentException('invalid length for $inf_ad_marketplace when calling DceSefazInfAdic., must be bigger than or equal to 1.');
        }

        $this->container['inf_ad_marketplace'] = $inf_ad_marketplace;

        return $this;
    }

    /**
     * Gets inf_ad_ect
     *
     * @return string|null
     */
    public function getInfAdEct()
    {
        return $this->container['inf_ad_ect'];
    }

    /**
     * Sets inf_ad_ect
     *
     * @param string|null $inf_ad_ect Informações Adicionais do Correio.
     *
     * @return self
     */
    public function setInfAdEct($inf_ad_ect)
    {
        if (is_null($inf_ad_ect)) {
            array_push($this->openAPINullablesSetToNull, 'inf_ad_ect');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inf_ad_ect', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inf_ad_ect) && (mb_strlen($inf_ad_ect) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $inf_ad_ect when calling DceSefazInfAdic., must be smaller than or equal to 5000.');
        }
        if (!is_null($inf_ad_ect) && (mb_strlen($inf_ad_ect) < 1)) {
            throw new \InvalidArgumentException('invalid length for $inf_ad_ect when calling DceSefazInfAdic., must be bigger than or equal to 1.');
        }

        $this->container['inf_ad_ect'] = $inf_ad_ect;

        return $this;
    }

    /**
     * Gets obs_emit
     *
     * @return \NuvemFiscal\Model\DceSefazObsEmit[]|null
     */
    public function getObsEmit()
    {
        return $this->container['obs_emit'];
    }

    /**
     * Sets obs_emit
     *
     * @param \NuvemFiscal\Model\DceSefazObsEmit[]|null $obs_emit obs_emit
     *
     * @return self
     */
    public function setObsEmit($obs_emit)
    {
        if (is_null($obs_emit)) {
            throw new \InvalidArgumentException('non-nullable obs_emit cannot be null');
        }

        if ((count($obs_emit) > 10)) {
            throw new \InvalidArgumentException('invalid value for $obs_emit when calling DceSefazInfAdic., number of items must be less than or equal to 10.');
        }
        $this->container['obs_emit'] = $obs_emit;

        return $this;
    }

    /**
     * Gets obs_fisco
     *
     * @return \NuvemFiscal\Model\DceSefazObsFisco[]|null
     */
    public function getObsFisco()
    {
        return $this->container['obs_fisco'];
    }

    /**
     * Sets obs_fisco
     *
     * @param \NuvemFiscal\Model\DceSefazObsFisco[]|null $obs_fisco obs_fisco
     *
     * @return self
     */
    public function setObsFisco($obs_fisco)
    {
        if (is_null($obs_fisco)) {
            throw new \InvalidArgumentException('non-nullable obs_fisco cannot be null');
        }

        if ((count($obs_fisco) > 10)) {
            throw new \InvalidArgumentException('invalid value for $obs_fisco when calling DceSefazInfAdic., number of items must be less than or equal to 10.');
        }
        $this->container['obs_fisco'] = $obs_fisco;

        return $this;
    }

    /**
     * Gets obs_marketplace
     *
     * @return \NuvemFiscal\Model\DceSefazObsMarketplace[]|null
     */
    public function getObsMarketplace()
    {
        return $this->container['obs_marketplace'];
    }

    /**
     * Sets obs_marketplace
     *
     * @param \NuvemFiscal\Model\DceSefazObsMarketplace[]|null $obs_marketplace obs_marketplace
     *
     * @return self
     */
    public function setObsMarketplace($obs_marketplace)
    {
        if (is_null($obs_marketplace)) {
            throw new \InvalidArgumentException('non-nullable obs_marketplace cannot be null');
        }

        if ((count($obs_marketplace) > 10)) {
            throw new \InvalidArgumentException('invalid value for $obs_marketplace when calling DceSefazInfAdic., number of items must be less than or equal to 10.');
        }
        $this->container['obs_marketplace'] = $obs_marketplace;

        return $this;
    }

    /**
     * Gets obs_ect
     *
     * @return \NuvemFiscal\Model\DceSefazObsECT[]|null
     */
    public function getObsEct()
    {
        return $this->container['obs_ect'];
    }

    /**
     * Sets obs_ect
     *
     * @param \NuvemFiscal\Model\DceSefazObsECT[]|null $obs_ect obs_ect
     *
     * @return self
     */
    public function setObsEct($obs_ect)
    {
        if (is_null($obs_ect)) {
            throw new \InvalidArgumentException('non-nullable obs_ect cannot be null');
        }

        if ((count($obs_ect) > 10)) {
            throw new \InvalidArgumentException('invalid value for $obs_ect when calling DceSefazInfAdic., number of items must be less than or equal to 10.');
        }
        $this->container['obs_ect'] = $obs_ect;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


