<?php
/**
 * CteOsSefazInfCTeNormOS
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Nuvem Fiscal
 *
 * API para automação comercial e documentos fiscais.
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NuvemFiscal\Model;

use \ArrayAccess;
use \NuvemFiscal\ObjectSerializer;

/**
 * CteOsSefazInfCTeNormOS Class Doc Comment
 *
 * @category Class
 * @description Grupo de informações do CT-e OS Normal.
 * @package  NuvemFiscal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CteOsSefazInfCTeNormOS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CteOsSefazInfCTeNormOS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inf_servico' => '\NuvemFiscal\Model\CteOsSefazInfServicoOS',
        'inf_doc_ref' => '\NuvemFiscal\Model\CteOsSefazInfDocRefOS[]',
        'seg' => '\NuvemFiscal\Model\CteOsSefazSegOS[]',
        'inf_modal' => '\NuvemFiscal\Model\CteOsSefazInfModalOS',
        'inf_cte_sub' => '\NuvemFiscal\Model\CteOsSefazInfCteSubOS',
        'ref_cte_canc' => 'string',
        'cobr' => '\NuvemFiscal\Model\CteOsSefazCobrOS',
        'inf_gtve' => '\NuvemFiscal\Model\CteOsSefazInfGTVeOS[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inf_servico' => null,
        'inf_doc_ref' => null,
        'seg' => null,
        'inf_modal' => null,
        'inf_cte_sub' => null,
        'ref_cte_canc' => null,
        'cobr' => null,
        'inf_gtve' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inf_servico' => false,
        'inf_doc_ref' => false,
        'seg' => false,
        'inf_modal' => false,
        'inf_cte_sub' => false,
        'ref_cte_canc' => true,
        'cobr' => false,
        'inf_gtve' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inf_servico' => 'infServico',
        'inf_doc_ref' => 'infDocRef',
        'seg' => 'seg',
        'inf_modal' => 'infModal',
        'inf_cte_sub' => 'infCteSub',
        'ref_cte_canc' => 'refCTeCanc',
        'cobr' => 'cobr',
        'inf_gtve' => 'infGTVe'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inf_servico' => 'setInfServico',
        'inf_doc_ref' => 'setInfDocRef',
        'seg' => 'setSeg',
        'inf_modal' => 'setInfModal',
        'inf_cte_sub' => 'setInfCteSub',
        'ref_cte_canc' => 'setRefCteCanc',
        'cobr' => 'setCobr',
        'inf_gtve' => 'setInfGtve'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inf_servico' => 'getInfServico',
        'inf_doc_ref' => 'getInfDocRef',
        'seg' => 'getSeg',
        'inf_modal' => 'getInfModal',
        'inf_cte_sub' => 'getInfCteSub',
        'ref_cte_canc' => 'getRefCteCanc',
        'cobr' => 'getCobr',
        'inf_gtve' => 'getInfGtve'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inf_servico', $data ?? [], null);
        $this->setIfExists('inf_doc_ref', $data ?? [], null);
        $this->setIfExists('seg', $data ?? [], null);
        $this->setIfExists('inf_modal', $data ?? [], null);
        $this->setIfExists('inf_cte_sub', $data ?? [], null);
        $this->setIfExists('ref_cte_canc', $data ?? [], null);
        $this->setIfExists('cobr', $data ?? [], null);
        $this->setIfExists('inf_gtve', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inf_servico'] === null) {
            $invalidProperties[] = "'inf_servico' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inf_servico
     *
     * @return \NuvemFiscal\Model\CteOsSefazInfServicoOS
     */
    public function getInfServico()
    {
        return $this->container['inf_servico'];
    }

    /**
     * Sets inf_servico
     *
     * @param \NuvemFiscal\Model\CteOsSefazInfServicoOS $inf_servico inf_servico
     *
     * @return self
     */
    public function setInfServico($inf_servico)
    {
        if (is_null($inf_servico)) {
            throw new \InvalidArgumentException('non-nullable inf_servico cannot be null');
        }
        $this->container['inf_servico'] = $inf_servico;

        return $this;
    }

    /**
     * Gets inf_doc_ref
     *
     * @return \NuvemFiscal\Model\CteOsSefazInfDocRefOS[]|null
     */
    public function getInfDocRef()
    {
        return $this->container['inf_doc_ref'];
    }

    /**
     * Sets inf_doc_ref
     *
     * @param \NuvemFiscal\Model\CteOsSefazInfDocRefOS[]|null $inf_doc_ref inf_doc_ref
     *
     * @return self
     */
    public function setInfDocRef($inf_doc_ref)
    {
        if (is_null($inf_doc_ref)) {
            throw new \InvalidArgumentException('non-nullable inf_doc_ref cannot be null');
        }
        $this->container['inf_doc_ref'] = $inf_doc_ref;

        return $this;
    }

    /**
     * Gets seg
     *
     * @return \NuvemFiscal\Model\CteOsSefazSegOS[]|null
     */
    public function getSeg()
    {
        return $this->container['seg'];
    }

    /**
     * Sets seg
     *
     * @param \NuvemFiscal\Model\CteOsSefazSegOS[]|null $seg seg
     *
     * @return self
     */
    public function setSeg($seg)
    {
        if (is_null($seg)) {
            throw new \InvalidArgumentException('non-nullable seg cannot be null');
        }
        $this->container['seg'] = $seg;

        return $this;
    }

    /**
     * Gets inf_modal
     *
     * @return \NuvemFiscal\Model\CteOsSefazInfModalOS|null
     */
    public function getInfModal()
    {
        return $this->container['inf_modal'];
    }

    /**
     * Sets inf_modal
     *
     * @param \NuvemFiscal\Model\CteOsSefazInfModalOS|null $inf_modal inf_modal
     *
     * @return self
     */
    public function setInfModal($inf_modal)
    {
        if (is_null($inf_modal)) {
            throw new \InvalidArgumentException('non-nullable inf_modal cannot be null');
        }
        $this->container['inf_modal'] = $inf_modal;

        return $this;
    }

    /**
     * Gets inf_cte_sub
     *
     * @return \NuvemFiscal\Model\CteOsSefazInfCteSubOS|null
     */
    public function getInfCteSub()
    {
        return $this->container['inf_cte_sub'];
    }

    /**
     * Sets inf_cte_sub
     *
     * @param \NuvemFiscal\Model\CteOsSefazInfCteSubOS|null $inf_cte_sub inf_cte_sub
     *
     * @return self
     */
    public function setInfCteSub($inf_cte_sub)
    {
        if (is_null($inf_cte_sub)) {
            throw new \InvalidArgumentException('non-nullable inf_cte_sub cannot be null');
        }
        $this->container['inf_cte_sub'] = $inf_cte_sub;

        return $this;
    }

    /**
     * Gets ref_cte_canc
     *
     * @return string|null
     */
    public function getRefCteCanc()
    {
        return $this->container['ref_cte_canc'];
    }

    /**
     * Sets ref_cte_canc
     *
     * @param string|null $ref_cte_canc Chave de acesso do CT-e Cancelado  Somente para Transporte de Valores.
     *
     * @return self
     */
    public function setRefCteCanc($ref_cte_canc)
    {
        if (is_null($ref_cte_canc)) {
            array_push($this->openAPINullablesSetToNull, 'ref_cte_canc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_cte_canc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ref_cte_canc'] = $ref_cte_canc;

        return $this;
    }

    /**
     * Gets cobr
     *
     * @return \NuvemFiscal\Model\CteOsSefazCobrOS|null
     */
    public function getCobr()
    {
        return $this->container['cobr'];
    }

    /**
     * Sets cobr
     *
     * @param \NuvemFiscal\Model\CteOsSefazCobrOS|null $cobr cobr
     *
     * @return self
     */
    public function setCobr($cobr)
    {
        if (is_null($cobr)) {
            throw new \InvalidArgumentException('non-nullable cobr cannot be null');
        }
        $this->container['cobr'] = $cobr;

        return $this;
    }

    /**
     * Gets inf_gtve
     *
     * @return \NuvemFiscal\Model\CteOsSefazInfGTVeOS[]|null
     */
    public function getInfGtve()
    {
        return $this->container['inf_gtve'];
    }

    /**
     * Sets inf_gtve
     *
     * @param \NuvemFiscal\Model\CteOsSefazInfGTVeOS[]|null $inf_gtve inf_gtve
     *
     * @return self
     */
    public function setInfGtve($inf_gtve)
    {
        if (is_null($inf_gtve)) {
            throw new \InvalidArgumentException('non-nullable inf_gtve cannot be null');
        }
        $this->container['inf_gtve'] = $inf_gtve;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


